
alarm_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005744  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aac  08005aac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ab4  08005ab4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab4  08005ab4  00015ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000074  08005b30  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08005b30  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2c9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000241c  00000000  00000000  0002f36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed8  00000000  00000000  00031790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  00032668  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a37  00000000  00000000  00033418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bc4c  00000000  00000000  00057e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df0cb  00000000  00000000  00063a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142b66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d0  00000000  00000000  00142be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080058dc 	.word	0x080058dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080058dc 	.word	0x080058dc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_TIM_PeriodElapsedCallback>:
uint32_t time_interval;
uint32_t long_key_count;
uint8_t key_value;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if(htim->Instance==TIM2)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005a0:	d14c      	bne.n	800063c <HAL_TIM_PeriodElapsedCallback+0xac>
  {
    if((timer_count%100)==0)
 80005a2:	4b28      	ldr	r3, [pc, #160]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80005a8:	fb83 1302 	smull	r1, r3, r3, r2
 80005ac:	1159      	asrs	r1, r3, #5
 80005ae:	17d3      	asrs	r3, r2, #31
 80005b0:	1acb      	subs	r3, r1, r3
 80005b2:	2164      	movs	r1, #100	; 0x64
 80005b4:	fb01 f303 	mul.w	r3, r1, r3
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d139      	bne.n	8000632 <HAL_TIM_PeriodElapsedCallback+0xa2>
    {
      second++;
 80005be:	4b23      	ldr	r3, [pc, #140]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005c6:	6013      	str	r3, [r2, #0]

      if(second>=60)
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b3b      	cmp	r3, #59	; 0x3b
 80005ce:	dd08      	ble.n	80005e2 <HAL_TIM_PeriodElapsedCallback+0x52>
      {
        minute++;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80005d8:	6013      	str	r3, [r2, #0]
        second = 0;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	e006      	b.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0x60>
      }
      else if(second < 0) second = 0;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	da02      	bge.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0x60>
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
      if(minute>=60)
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b3b      	cmp	r3, #59	; 0x3b
 80005f6:	dd08      	ble.n	800060a <HAL_TIM_PeriodElapsedCallback+0x7a>
      {
        hour++;
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000600:	6013      	str	r3, [r2, #0]
        minute = 0;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	e006      	b.n	8000618 <HAL_TIM_PeriodElapsedCallback+0x88>
      }
      else if(minute < 0) minute = 0;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	da02      	bge.n	8000618 <HAL_TIM_PeriodElapsedCallback+0x88>
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
      if(hour>=24 || hour < 0)
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b17      	cmp	r3, #23
 800061e:	dc03      	bgt.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x98>
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	da02      	bge.n	800062e <HAL_TIM_PeriodElapsedCallback+0x9e>
      {
        hour = 0;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
      }

      time_display();
 800062e:	f000 f813 	bl	8000658 <time_display>
    }
	timer_count++;
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	4a02      	ldr	r2, [pc, #8]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800063a:	6013      	str	r3, [r2, #0]
  }
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200001f8 	.word	0x200001f8
 8000648:	51eb851f 	.word	0x51eb851f
 800064c:	20000134 	.word	0x20000134
 8000650:	2000016c 	.word	0x2000016c
 8000654:	20000174 	.word	0x20000174

08000658 <time_display>:

void time_display(void)
{
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af02      	add	r7, sp, #8
	switch(current_state.mode)
 800065e:	4ba5      	ldr	r3, [pc, #660]	; (80008f4 <time_display+0x29c>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b03      	cmp	r3, #3
 8000664:	f200 845d 	bhi.w	8000f22 <time_display+0x8ca>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <time_display+0x18>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	08000681 	.word	0x08000681
 8000674:	08000709 	.word	0x08000709
 8000678:	08000ad1 	.word	0x08000ad1
 800067c:	08000edf 	.word	0x08000edf
	{
	case NORMAL_STATE:
		memset(line,0,sizeof(line));
 8000680:	2224      	movs	r2, #36	; 0x24
 8000682:	2100      	movs	r1, #0
 8000684:	489c      	ldr	r0, [pc, #624]	; (80008f8 <time_display+0x2a0>)
 8000686:	f004 fd0b 	bl	80050a0 <memset>
		sprintf(line[0],"Korea Polytech  \r\n");
 800068a:	4a9b      	ldr	r2, [pc, #620]	; (80008f8 <time_display+0x2a0>)
 800068c:	4b9b      	ldr	r3, [pc, #620]	; (80008fc <time_display+0x2a4>)
 800068e:	4615      	mov	r5, r2
 8000690:	461c      	mov	r4, r3
 8000692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000694:	6028      	str	r0, [r5, #0]
 8000696:	6069      	str	r1, [r5, #4]
 8000698:	60aa      	str	r2, [r5, #8]
 800069a:	60eb      	str	r3, [r5, #12]
 800069c:	8823      	ldrh	r3, [r4, #0]
 800069e:	78a2      	ldrb	r2, [r4, #2]
 80006a0:	822b      	strh	r3, [r5, #16]
 80006a2:	4613      	mov	r3, r2
 80006a4:	74ab      	strb	r3, [r5, #18]
		if(hour>=12)
 80006a6:	4b96      	ldr	r3, [pc, #600]	; (8000900 <time_display+0x2a8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b0b      	cmp	r3, #11
 80006ac:	dd14      	ble.n	80006d8 <time_display+0x80>
		{
		  strncpy(line[1],"PM ",3);
 80006ae:	4b95      	ldr	r3, [pc, #596]	; (8000904 <time_display+0x2ac>)
 80006b0:	4a95      	ldr	r2, [pc, #596]	; (8000908 <time_display+0x2b0>)
 80006b2:	8811      	ldrh	r1, [r2, #0]
 80006b4:	7892      	ldrb	r2, [r2, #2]
 80006b6:	8019      	strh	r1, [r3, #0]
 80006b8:	709a      	strb	r2, [r3, #2]
		  sprintf(time_str,"%02d:%02d:%02d\r\n",hour-12,minute,second);
 80006ba:	4b91      	ldr	r3, [pc, #580]	; (8000900 <time_display+0x2a8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f1a3 020c 	sub.w	r2, r3, #12
 80006c2:	4b92      	ldr	r3, [pc, #584]	; (800090c <time_display+0x2b4>)
 80006c4:	6819      	ldr	r1, [r3, #0]
 80006c6:	4b92      	ldr	r3, [pc, #584]	; (8000910 <time_display+0x2b8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	460b      	mov	r3, r1
 80006ce:	4991      	ldr	r1, [pc, #580]	; (8000914 <time_display+0x2bc>)
 80006d0:	4891      	ldr	r0, [pc, #580]	; (8000918 <time_display+0x2c0>)
 80006d2:	f004 fced 	bl	80050b0 <siprintf>
 80006d6:	e011      	b.n	80006fc <time_display+0xa4>
		}
		else
		{
		  strncpy(line[1],"AM ",3);
 80006d8:	4b8a      	ldr	r3, [pc, #552]	; (8000904 <time_display+0x2ac>)
 80006da:	4a90      	ldr	r2, [pc, #576]	; (800091c <time_display+0x2c4>)
 80006dc:	8811      	ldrh	r1, [r2, #0]
 80006de:	7892      	ldrb	r2, [r2, #2]
 80006e0:	8019      	strh	r1, [r3, #0]
 80006e2:	709a      	strb	r2, [r3, #2]
		  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
 80006e4:	4b86      	ldr	r3, [pc, #536]	; (8000900 <time_display+0x2a8>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b88      	ldr	r3, [pc, #544]	; (800090c <time_display+0x2b4>)
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	4b88      	ldr	r3, [pc, #544]	; (8000910 <time_display+0x2b8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	460b      	mov	r3, r1
 80006f4:	4987      	ldr	r1, [pc, #540]	; (8000914 <time_display+0x2bc>)
 80006f6:	4888      	ldr	r0, [pc, #544]	; (8000918 <time_display+0x2c0>)
 80006f8:	f004 fcda 	bl	80050b0 <siprintf>
		}
		strcat(line[1],time_str);
 80006fc:	4986      	ldr	r1, [pc, #536]	; (8000918 <time_display+0x2c0>)
 80006fe:	4881      	ldr	r0, [pc, #516]	; (8000904 <time_display+0x2ac>)
 8000700:	f004 fcf6 	bl	80050f0 <strcat>
		break;
 8000704:	f000 bc0e 	b.w	8000f24 <time_display+0x8cc>
	case TIME_SETTING:
		memset(line,0,sizeof(line));
 8000708:	2224      	movs	r2, #36	; 0x24
 800070a:	2100      	movs	r1, #0
 800070c:	487a      	ldr	r0, [pc, #488]	; (80008f8 <time_display+0x2a0>)
 800070e:	f004 fcc7 	bl	80050a0 <memset>
		sprintf(line[0],"Korea Polytech  \r\n");
 8000712:	4a79      	ldr	r2, [pc, #484]	; (80008f8 <time_display+0x2a0>)
 8000714:	4b79      	ldr	r3, [pc, #484]	; (80008fc <time_display+0x2a4>)
 8000716:	4615      	mov	r5, r2
 8000718:	461c      	mov	r4, r3
 800071a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800071c:	6028      	str	r0, [r5, #0]
 800071e:	6069      	str	r1, [r5, #4]
 8000720:	60aa      	str	r2, [r5, #8]
 8000722:	60eb      	str	r3, [r5, #12]
 8000724:	8823      	ldrh	r3, [r4, #0]
 8000726:	78a2      	ldrb	r2, [r4, #2]
 8000728:	822b      	strh	r3, [r5, #16]
 800072a:	4613      	mov	r3, r2
 800072c:	74ab      	strb	r3, [r5, #18]
		//설정모드 자리가 어디 선택 되어 있는 가에 따라 깜빡임 다른 모습으로 출력
		switch(setting)
 800072e:	4b7c      	ldr	r3, [pc, #496]	; (8000920 <time_display+0x2c8>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	3b01      	subs	r3, #1
 8000734:	2b03      	cmp	r3, #3
 8000736:	f200 81c9 	bhi.w	8000acc <time_display+0x474>
 800073a:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <time_display+0xe8>)
 800073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000740:	08000751 	.word	0x08000751
 8000744:	0800082d 	.word	0x0800082d
 8000748:	08000935 	.word	0x08000935
 800074c:	08000a01 	.word	0x08000a01
		{
		case AP:
			if(timer_count % 200 == 0)
 8000750:	4b74      	ldr	r3, [pc, #464]	; (8000924 <time_display+0x2cc>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b74      	ldr	r3, [pc, #464]	; (8000928 <time_display+0x2d0>)
 8000756:	fb83 1302 	smull	r1, r3, r3, r2
 800075a:	1199      	asrs	r1, r3, #6
 800075c:	17d3      	asrs	r3, r2, #31
 800075e:	1acb      	subs	r3, r1, r3
 8000760:	21c8      	movs	r1, #200	; 0xc8
 8000762:	fb01 f303 	mul.w	r3, r1, r3
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d12f      	bne.n	80007cc <time_display+0x174>
			{
				if(hour>=12)
 800076c:	4b64      	ldr	r3, [pc, #400]	; (8000900 <time_display+0x2a8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b0b      	cmp	r3, #11
 8000772:	dd14      	ble.n	800079e <time_display+0x146>
				{
				  strncpy(line[1],"   ",3);
 8000774:	4b63      	ldr	r3, [pc, #396]	; (8000904 <time_display+0x2ac>)
 8000776:	4a6d      	ldr	r2, [pc, #436]	; (800092c <time_display+0x2d4>)
 8000778:	8811      	ldrh	r1, [r2, #0]
 800077a:	7892      	ldrb	r2, [r2, #2]
 800077c:	8019      	strh	r1, [r3, #0]
 800077e:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour-12,minute,second);
 8000780:	4b5f      	ldr	r3, [pc, #380]	; (8000900 <time_display+0x2a8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f1a3 020c 	sub.w	r2, r3, #12
 8000788:	4b60      	ldr	r3, [pc, #384]	; (800090c <time_display+0x2b4>)
 800078a:	6819      	ldr	r1, [r3, #0]
 800078c:	4b60      	ldr	r3, [pc, #384]	; (8000910 <time_display+0x2b8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	460b      	mov	r3, r1
 8000794:	495f      	ldr	r1, [pc, #380]	; (8000914 <time_display+0x2bc>)
 8000796:	4860      	ldr	r0, [pc, #384]	; (8000918 <time_display+0x2c0>)
 8000798:	f004 fc8a 	bl	80050b0 <siprintf>
 800079c:	e011      	b.n	80007c2 <time_display+0x16a>
				}
				else
				{
				  strncpy(line[1],"   ",3);
 800079e:	4b59      	ldr	r3, [pc, #356]	; (8000904 <time_display+0x2ac>)
 80007a0:	4a62      	ldr	r2, [pc, #392]	; (800092c <time_display+0x2d4>)
 80007a2:	8811      	ldrh	r1, [r2, #0]
 80007a4:	7892      	ldrb	r2, [r2, #2]
 80007a6:	8019      	strh	r1, [r3, #0]
 80007a8:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
 80007aa:	4b55      	ldr	r3, [pc, #340]	; (8000900 <time_display+0x2a8>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b57      	ldr	r3, [pc, #348]	; (800090c <time_display+0x2b4>)
 80007b0:	6819      	ldr	r1, [r3, #0]
 80007b2:	4b57      	ldr	r3, [pc, #348]	; (8000910 <time_display+0x2b8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	460b      	mov	r3, r1
 80007ba:	4956      	ldr	r1, [pc, #344]	; (8000914 <time_display+0x2bc>)
 80007bc:	4856      	ldr	r0, [pc, #344]	; (8000918 <time_display+0x2c0>)
 80007be:	f004 fc77 	bl	80050b0 <siprintf>
				}
				strcat(line[1],time_str);
 80007c2:	4955      	ldr	r1, [pc, #340]	; (8000918 <time_display+0x2c0>)
 80007c4:	484f      	ldr	r0, [pc, #316]	; (8000904 <time_display+0x2ac>)
 80007c6:	f004 fc93 	bl	80050f0 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
				}
				strcat(line[1],time_str);

			}
			break;
 80007ca:	e180      	b.n	8000ace <time_display+0x476>
				if(hour>=12)
 80007cc:	4b4c      	ldr	r3, [pc, #304]	; (8000900 <time_display+0x2a8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b0b      	cmp	r3, #11
 80007d2:	dd14      	ble.n	80007fe <time_display+0x1a6>
				  strncpy(line[1],"PM ",3);
 80007d4:	4b4b      	ldr	r3, [pc, #300]	; (8000904 <time_display+0x2ac>)
 80007d6:	4a4c      	ldr	r2, [pc, #304]	; (8000908 <time_display+0x2b0>)
 80007d8:	8811      	ldrh	r1, [r2, #0]
 80007da:	7892      	ldrb	r2, [r2, #2]
 80007dc:	8019      	strh	r1, [r3, #0]
 80007de:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour-12,minute,second);
 80007e0:	4b47      	ldr	r3, [pc, #284]	; (8000900 <time_display+0x2a8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f1a3 020c 	sub.w	r2, r3, #12
 80007e8:	4b48      	ldr	r3, [pc, #288]	; (800090c <time_display+0x2b4>)
 80007ea:	6819      	ldr	r1, [r3, #0]
 80007ec:	4b48      	ldr	r3, [pc, #288]	; (8000910 <time_display+0x2b8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	460b      	mov	r3, r1
 80007f4:	4947      	ldr	r1, [pc, #284]	; (8000914 <time_display+0x2bc>)
 80007f6:	4848      	ldr	r0, [pc, #288]	; (8000918 <time_display+0x2c0>)
 80007f8:	f004 fc5a 	bl	80050b0 <siprintf>
 80007fc:	e011      	b.n	8000822 <time_display+0x1ca>
				  strncpy(line[1],"AM ",3);
 80007fe:	4b41      	ldr	r3, [pc, #260]	; (8000904 <time_display+0x2ac>)
 8000800:	4a46      	ldr	r2, [pc, #280]	; (800091c <time_display+0x2c4>)
 8000802:	8811      	ldrh	r1, [r2, #0]
 8000804:	7892      	ldrb	r2, [r2, #2]
 8000806:	8019      	strh	r1, [r3, #0]
 8000808:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
 800080a:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <time_display+0x2a8>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4b3f      	ldr	r3, [pc, #252]	; (800090c <time_display+0x2b4>)
 8000810:	6819      	ldr	r1, [r3, #0]
 8000812:	4b3f      	ldr	r3, [pc, #252]	; (8000910 <time_display+0x2b8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	460b      	mov	r3, r1
 800081a:	493e      	ldr	r1, [pc, #248]	; (8000914 <time_display+0x2bc>)
 800081c:	483e      	ldr	r0, [pc, #248]	; (8000918 <time_display+0x2c0>)
 800081e:	f004 fc47 	bl	80050b0 <siprintf>
				strcat(line[1],time_str);
 8000822:	493d      	ldr	r1, [pc, #244]	; (8000918 <time_display+0x2c0>)
 8000824:	4837      	ldr	r0, [pc, #220]	; (8000904 <time_display+0x2ac>)
 8000826:	f004 fc63 	bl	80050f0 <strcat>
			break;
 800082a:	e150      	b.n	8000ace <time_display+0x476>
		case SET_H:
			if(timer_count % 200 == 0)
 800082c:	4b3d      	ldr	r3, [pc, #244]	; (8000924 <time_display+0x2cc>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b3d      	ldr	r3, [pc, #244]	; (8000928 <time_display+0x2d0>)
 8000832:	fb83 1302 	smull	r1, r3, r3, r2
 8000836:	1199      	asrs	r1, r3, #6
 8000838:	17d3      	asrs	r3, r2, #31
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	21c8      	movs	r1, #200	; 0xc8
 800083e:	fb01 f303 	mul.w	r3, r1, r3
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d125      	bne.n	8000894 <time_display+0x23c>
			{
				if(hour>=12)
 8000848:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <time_display+0x2a8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b0b      	cmp	r3, #11
 800084e:	dd0e      	ble.n	800086e <time_display+0x216>
				{
				  strncpy(line[1],"PM ",3);
 8000850:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <time_display+0x2ac>)
 8000852:	4a2d      	ldr	r2, [pc, #180]	; (8000908 <time_display+0x2b0>)
 8000854:	8811      	ldrh	r1, [r2, #0]
 8000856:	7892      	ldrb	r2, [r2, #2]
 8000858:	8019      	strh	r1, [r3, #0]
 800085a:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"  :%02d:%02d\r\n",minute,second);
 800085c:	4b2b      	ldr	r3, [pc, #172]	; (800090c <time_display+0x2b4>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <time_display+0x2b8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4932      	ldr	r1, [pc, #200]	; (8000930 <time_display+0x2d8>)
 8000866:	482c      	ldr	r0, [pc, #176]	; (8000918 <time_display+0x2c0>)
 8000868:	f004 fc22 	bl	80050b0 <siprintf>
 800086c:	e00d      	b.n	800088a <time_display+0x232>
				}
				else
				{
				  strncpy(line[1],"AM ",3);
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <time_display+0x2ac>)
 8000870:	4a2a      	ldr	r2, [pc, #168]	; (800091c <time_display+0x2c4>)
 8000872:	8811      	ldrh	r1, [r2, #0]
 8000874:	7892      	ldrb	r2, [r2, #2]
 8000876:	8019      	strh	r1, [r3, #0]
 8000878:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"  :%02d:%02d\r\n",minute,second);
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <time_display+0x2b4>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <time_display+0x2b8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	492b      	ldr	r1, [pc, #172]	; (8000930 <time_display+0x2d8>)
 8000884:	4824      	ldr	r0, [pc, #144]	; (8000918 <time_display+0x2c0>)
 8000886:	f004 fc13 	bl	80050b0 <siprintf>
				}
				strcat(line[1],time_str);
 800088a:	4923      	ldr	r1, [pc, #140]	; (8000918 <time_display+0x2c0>)
 800088c:	481d      	ldr	r0, [pc, #116]	; (8000904 <time_display+0x2ac>)
 800088e:	f004 fc2f 	bl	80050f0 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
				}
				strcat(line[1],time_str);

			}
			break;
 8000892:	e11c      	b.n	8000ace <time_display+0x476>
				if(hour>=12)
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <time_display+0x2a8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b0b      	cmp	r3, #11
 800089a:	dd14      	ble.n	80008c6 <time_display+0x26e>
				  strncpy(line[1],"PM ",3);
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <time_display+0x2ac>)
 800089e:	4a1a      	ldr	r2, [pc, #104]	; (8000908 <time_display+0x2b0>)
 80008a0:	8811      	ldrh	r1, [r2, #0]
 80008a2:	7892      	ldrb	r2, [r2, #2]
 80008a4:	8019      	strh	r1, [r3, #0]
 80008a6:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour-12,minute,second);
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <time_display+0x2a8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f1a3 020c 	sub.w	r2, r3, #12
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <time_display+0x2b4>)
 80008b2:	6819      	ldr	r1, [r3, #0]
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <time_display+0x2b8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	460b      	mov	r3, r1
 80008bc:	4915      	ldr	r1, [pc, #84]	; (8000914 <time_display+0x2bc>)
 80008be:	4816      	ldr	r0, [pc, #88]	; (8000918 <time_display+0x2c0>)
 80008c0:	f004 fbf6 	bl	80050b0 <siprintf>
 80008c4:	e011      	b.n	80008ea <time_display+0x292>
				  strncpy(line[1],"AM ",3);
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <time_display+0x2ac>)
 80008c8:	4a14      	ldr	r2, [pc, #80]	; (800091c <time_display+0x2c4>)
 80008ca:	8811      	ldrh	r1, [r2, #0]
 80008cc:	7892      	ldrb	r2, [r2, #2]
 80008ce:	8019      	strh	r1, [r3, #0]
 80008d0:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <time_display+0x2a8>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <time_display+0x2b4>)
 80008d8:	6819      	ldr	r1, [r3, #0]
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <time_display+0x2b8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	460b      	mov	r3, r1
 80008e2:	490c      	ldr	r1, [pc, #48]	; (8000914 <time_display+0x2bc>)
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <time_display+0x2c0>)
 80008e6:	f004 fbe3 	bl	80050b0 <siprintf>
				strcat(line[1],time_str);
 80008ea:	490b      	ldr	r1, [pc, #44]	; (8000918 <time_display+0x2c0>)
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <time_display+0x2ac>)
 80008ee:	f004 fbff 	bl	80050f0 <strcat>
			break;
 80008f2:	e0ec      	b.n	8000ace <time_display+0x476>
 80008f4:	20000104 	.word	0x20000104
 80008f8:	20000110 	.word	0x20000110
 80008fc:	080058f4 	.word	0x080058f4
 8000900:	20000174 	.word	0x20000174
 8000904:	20000122 	.word	0x20000122
 8000908:	08005908 	.word	0x08005908
 800090c:	2000016c 	.word	0x2000016c
 8000910:	20000134 	.word	0x20000134
 8000914:	0800590c 	.word	0x0800590c
 8000918:	200001e0 	.word	0x200001e0
 800091c:	08005920 	.word	0x08005920
 8000920:	20000000 	.word	0x20000000
 8000924:	200001f8 	.word	0x200001f8
 8000928:	51eb851f 	.word	0x51eb851f
 800092c:	08005924 	.word	0x08005924
 8000930:	08005928 	.word	0x08005928
		case SET_M:
			if(timer_count % 200 == 0)
 8000934:	4ba4      	ldr	r3, [pc, #656]	; (8000bc8 <time_display+0x570>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4ba4      	ldr	r3, [pc, #656]	; (8000bcc <time_display+0x574>)
 800093a:	fb83 1302 	smull	r1, r3, r3, r2
 800093e:	1199      	asrs	r1, r3, #6
 8000940:	17d3      	asrs	r3, r2, #31
 8000942:	1acb      	subs	r3, r1, r3
 8000944:	21c8      	movs	r1, #200	; 0xc8
 8000946:	fb01 f303 	mul.w	r3, r1, r3
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d127      	bne.n	80009a0 <time_display+0x348>
			{
				if(hour>=12)
 8000950:	4b9f      	ldr	r3, [pc, #636]	; (8000bd0 <time_display+0x578>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b0b      	cmp	r3, #11
 8000956:	dd10      	ble.n	800097a <time_display+0x322>
				{
				  strncpy(line[1],"PM ",3);
 8000958:	4b9e      	ldr	r3, [pc, #632]	; (8000bd4 <time_display+0x57c>)
 800095a:	4a9f      	ldr	r2, [pc, #636]	; (8000bd8 <time_display+0x580>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	7892      	ldrb	r2, [r2, #2]
 8000960:	8019      	strh	r1, [r3, #0]
 8000962:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:  :%02d\r\n",hour-12,second);
 8000964:	4b9a      	ldr	r3, [pc, #616]	; (8000bd0 <time_display+0x578>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f1a3 020c 	sub.w	r2, r3, #12
 800096c:	4b9b      	ldr	r3, [pc, #620]	; (8000bdc <time_display+0x584>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	499b      	ldr	r1, [pc, #620]	; (8000be0 <time_display+0x588>)
 8000972:	489c      	ldr	r0, [pc, #624]	; (8000be4 <time_display+0x58c>)
 8000974:	f004 fb9c 	bl	80050b0 <siprintf>
 8000978:	e00d      	b.n	8000996 <time_display+0x33e>
				}
				else
				{
				  strncpy(line[1],"AM ",3);
 800097a:	4b96      	ldr	r3, [pc, #600]	; (8000bd4 <time_display+0x57c>)
 800097c:	4a9a      	ldr	r2, [pc, #616]	; (8000be8 <time_display+0x590>)
 800097e:	8811      	ldrh	r1, [r2, #0]
 8000980:	7892      	ldrb	r2, [r2, #2]
 8000982:	8019      	strh	r1, [r3, #0]
 8000984:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:  :%02d\r\n",hour,second);
 8000986:	4b92      	ldr	r3, [pc, #584]	; (8000bd0 <time_display+0x578>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	4b94      	ldr	r3, [pc, #592]	; (8000bdc <time_display+0x584>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4994      	ldr	r1, [pc, #592]	; (8000be0 <time_display+0x588>)
 8000990:	4894      	ldr	r0, [pc, #592]	; (8000be4 <time_display+0x58c>)
 8000992:	f004 fb8d 	bl	80050b0 <siprintf>
				}
				strcat(line[1],time_str);
 8000996:	4993      	ldr	r1, [pc, #588]	; (8000be4 <time_display+0x58c>)
 8000998:	488e      	ldr	r0, [pc, #568]	; (8000bd4 <time_display+0x57c>)
 800099a:	f004 fba9 	bl	80050f0 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
				}
				strcat(line[1],time_str);

			}
			break;
 800099e:	e096      	b.n	8000ace <time_display+0x476>
				if(hour>=12)
 80009a0:	4b8b      	ldr	r3, [pc, #556]	; (8000bd0 <time_display+0x578>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b0b      	cmp	r3, #11
 80009a6:	dd14      	ble.n	80009d2 <time_display+0x37a>
				  strncpy(line[1],"PM ",3);
 80009a8:	4b8a      	ldr	r3, [pc, #552]	; (8000bd4 <time_display+0x57c>)
 80009aa:	4a8b      	ldr	r2, [pc, #556]	; (8000bd8 <time_display+0x580>)
 80009ac:	8811      	ldrh	r1, [r2, #0]
 80009ae:	7892      	ldrb	r2, [r2, #2]
 80009b0:	8019      	strh	r1, [r3, #0]
 80009b2:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour-12,minute,second);
 80009b4:	4b86      	ldr	r3, [pc, #536]	; (8000bd0 <time_display+0x578>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f1a3 020c 	sub.w	r2, r3, #12
 80009bc:	4b8b      	ldr	r3, [pc, #556]	; (8000bec <time_display+0x594>)
 80009be:	6819      	ldr	r1, [r3, #0]
 80009c0:	4b86      	ldr	r3, [pc, #536]	; (8000bdc <time_display+0x584>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	460b      	mov	r3, r1
 80009c8:	4989      	ldr	r1, [pc, #548]	; (8000bf0 <time_display+0x598>)
 80009ca:	4886      	ldr	r0, [pc, #536]	; (8000be4 <time_display+0x58c>)
 80009cc:	f004 fb70 	bl	80050b0 <siprintf>
 80009d0:	e011      	b.n	80009f6 <time_display+0x39e>
				  strncpy(line[1],"AM ",3);
 80009d2:	4b80      	ldr	r3, [pc, #512]	; (8000bd4 <time_display+0x57c>)
 80009d4:	4a84      	ldr	r2, [pc, #528]	; (8000be8 <time_display+0x590>)
 80009d6:	8811      	ldrh	r1, [r2, #0]
 80009d8:	7892      	ldrb	r2, [r2, #2]
 80009da:	8019      	strh	r1, [r3, #0]
 80009dc:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
 80009de:	4b7c      	ldr	r3, [pc, #496]	; (8000bd0 <time_display+0x578>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b82      	ldr	r3, [pc, #520]	; (8000bec <time_display+0x594>)
 80009e4:	6819      	ldr	r1, [r3, #0]
 80009e6:	4b7d      	ldr	r3, [pc, #500]	; (8000bdc <time_display+0x584>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	460b      	mov	r3, r1
 80009ee:	4980      	ldr	r1, [pc, #512]	; (8000bf0 <time_display+0x598>)
 80009f0:	487c      	ldr	r0, [pc, #496]	; (8000be4 <time_display+0x58c>)
 80009f2:	f004 fb5d 	bl	80050b0 <siprintf>
				strcat(line[1],time_str);
 80009f6:	497b      	ldr	r1, [pc, #492]	; (8000be4 <time_display+0x58c>)
 80009f8:	4876      	ldr	r0, [pc, #472]	; (8000bd4 <time_display+0x57c>)
 80009fa:	f004 fb79 	bl	80050f0 <strcat>
			break;
 80009fe:	e066      	b.n	8000ace <time_display+0x476>
		case SET_S:
			if(timer_count % 200 == 0)
 8000a00:	4b71      	ldr	r3, [pc, #452]	; (8000bc8 <time_display+0x570>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b71      	ldr	r3, [pc, #452]	; (8000bcc <time_display+0x574>)
 8000a06:	fb83 1302 	smull	r1, r3, r3, r2
 8000a0a:	1199      	asrs	r1, r3, #6
 8000a0c:	17d3      	asrs	r3, r2, #31
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	21c8      	movs	r1, #200	; 0xc8
 8000a12:	fb01 f303 	mul.w	r3, r1, r3
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d127      	bne.n	8000a6c <time_display+0x414>
			{
				if(hour>=12)
 8000a1c:	4b6c      	ldr	r3, [pc, #432]	; (8000bd0 <time_display+0x578>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b0b      	cmp	r3, #11
 8000a22:	dd10      	ble.n	8000a46 <time_display+0x3ee>
				{
				  strncpy(line[1],"PM ",3);
 8000a24:	4b6b      	ldr	r3, [pc, #428]	; (8000bd4 <time_display+0x57c>)
 8000a26:	4a6c      	ldr	r2, [pc, #432]	; (8000bd8 <time_display+0x580>)
 8000a28:	8811      	ldrh	r1, [r2, #0]
 8000a2a:	7892      	ldrb	r2, [r2, #2]
 8000a2c:	8019      	strh	r1, [r3, #0]
 8000a2e:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:  \r\n",hour-12,minute);
 8000a30:	4b67      	ldr	r3, [pc, #412]	; (8000bd0 <time_display+0x578>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f1a3 020c 	sub.w	r2, r3, #12
 8000a38:	4b6c      	ldr	r3, [pc, #432]	; (8000bec <time_display+0x594>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	496d      	ldr	r1, [pc, #436]	; (8000bf4 <time_display+0x59c>)
 8000a3e:	4869      	ldr	r0, [pc, #420]	; (8000be4 <time_display+0x58c>)
 8000a40:	f004 fb36 	bl	80050b0 <siprintf>
 8000a44:	e00d      	b.n	8000a62 <time_display+0x40a>
				}
				else
				{
				  strncpy(line[1],"AM ",3);
 8000a46:	4b63      	ldr	r3, [pc, #396]	; (8000bd4 <time_display+0x57c>)
 8000a48:	4a67      	ldr	r2, [pc, #412]	; (8000be8 <time_display+0x590>)
 8000a4a:	8811      	ldrh	r1, [r2, #0]
 8000a4c:	7892      	ldrb	r2, [r2, #2]
 8000a4e:	8019      	strh	r1, [r3, #0]
 8000a50:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:  \r\n",hour,minute);
 8000a52:	4b5f      	ldr	r3, [pc, #380]	; (8000bd0 <time_display+0x578>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4b65      	ldr	r3, [pc, #404]	; (8000bec <time_display+0x594>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4966      	ldr	r1, [pc, #408]	; (8000bf4 <time_display+0x59c>)
 8000a5c:	4861      	ldr	r0, [pc, #388]	; (8000be4 <time_display+0x58c>)
 8000a5e:	f004 fb27 	bl	80050b0 <siprintf>
				}
				strcat(line[1],time_str);
 8000a62:	4960      	ldr	r1, [pc, #384]	; (8000be4 <time_display+0x58c>)
 8000a64:	485b      	ldr	r0, [pc, #364]	; (8000bd4 <time_display+0x57c>)
 8000a66:	f004 fb43 	bl	80050f0 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
				}
				strcat(line[1],time_str);

			}
			break;
 8000a6a:	e030      	b.n	8000ace <time_display+0x476>
				if(hour>=12)
 8000a6c:	4b58      	ldr	r3, [pc, #352]	; (8000bd0 <time_display+0x578>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b0b      	cmp	r3, #11
 8000a72:	dd14      	ble.n	8000a9e <time_display+0x446>
				  strncpy(line[1],"PM ",3);
 8000a74:	4b57      	ldr	r3, [pc, #348]	; (8000bd4 <time_display+0x57c>)
 8000a76:	4a58      	ldr	r2, [pc, #352]	; (8000bd8 <time_display+0x580>)
 8000a78:	8811      	ldrh	r1, [r2, #0]
 8000a7a:	7892      	ldrb	r2, [r2, #2]
 8000a7c:	8019      	strh	r1, [r3, #0]
 8000a7e:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour-12,minute,second);
 8000a80:	4b53      	ldr	r3, [pc, #332]	; (8000bd0 <time_display+0x578>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f1a3 020c 	sub.w	r2, r3, #12
 8000a88:	4b58      	ldr	r3, [pc, #352]	; (8000bec <time_display+0x594>)
 8000a8a:	6819      	ldr	r1, [r3, #0]
 8000a8c:	4b53      	ldr	r3, [pc, #332]	; (8000bdc <time_display+0x584>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	460b      	mov	r3, r1
 8000a94:	4956      	ldr	r1, [pc, #344]	; (8000bf0 <time_display+0x598>)
 8000a96:	4853      	ldr	r0, [pc, #332]	; (8000be4 <time_display+0x58c>)
 8000a98:	f004 fb0a 	bl	80050b0 <siprintf>
 8000a9c:	e011      	b.n	8000ac2 <time_display+0x46a>
				  strncpy(line[1],"AM ",3);
 8000a9e:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <time_display+0x57c>)
 8000aa0:	4a51      	ldr	r2, [pc, #324]	; (8000be8 <time_display+0x590>)
 8000aa2:	8811      	ldrh	r1, [r2, #0]
 8000aa4:	7892      	ldrb	r2, [r2, #2]
 8000aa6:	8019      	strh	r1, [r3, #0]
 8000aa8:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
 8000aaa:	4b49      	ldr	r3, [pc, #292]	; (8000bd0 <time_display+0x578>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b4f      	ldr	r3, [pc, #316]	; (8000bec <time_display+0x594>)
 8000ab0:	6819      	ldr	r1, [r3, #0]
 8000ab2:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <time_display+0x584>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	494d      	ldr	r1, [pc, #308]	; (8000bf0 <time_display+0x598>)
 8000abc:	4849      	ldr	r0, [pc, #292]	; (8000be4 <time_display+0x58c>)
 8000abe:	f004 faf7 	bl	80050b0 <siprintf>
				strcat(line[1],time_str);
 8000ac2:	4948      	ldr	r1, [pc, #288]	; (8000be4 <time_display+0x58c>)
 8000ac4:	4843      	ldr	r0, [pc, #268]	; (8000bd4 <time_display+0x57c>)
 8000ac6:	f004 fb13 	bl	80050f0 <strcat>
			break;
 8000aca:	e000      	b.n	8000ace <time_display+0x476>
		default:
			break;
 8000acc:	bf00      	nop
		}
		break;
 8000ace:	e229      	b.n	8000f24 <time_display+0x8cc>
	case ALARM_TIME_SETTING:
		memset(line,0,sizeof(line));
 8000ad0:	2224      	movs	r2, #36	; 0x24
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4848      	ldr	r0, [pc, #288]	; (8000bf8 <time_display+0x5a0>)
 8000ad6:	f004 fae3 	bl	80050a0 <memset>
		sprintf(line[0],"Korea Polytech  \r\n");
 8000ada:	4a47      	ldr	r2, [pc, #284]	; (8000bf8 <time_display+0x5a0>)
 8000adc:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <time_display+0x5a4>)
 8000ade:	4615      	mov	r5, r2
 8000ae0:	461c      	mov	r4, r3
 8000ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae4:	6028      	str	r0, [r5, #0]
 8000ae6:	6069      	str	r1, [r5, #4]
 8000ae8:	60aa      	str	r2, [r5, #8]
 8000aea:	60eb      	str	r3, [r5, #12]
 8000aec:	8823      	ldrh	r3, [r4, #0]
 8000aee:	78a2      	ldrb	r2, [r4, #2]
 8000af0:	822b      	strh	r3, [r5, #16]
 8000af2:	4613      	mov	r3, r2
 8000af4:	74ab      	strb	r3, [r5, #18]
		//설정모드 자리가 어디 선택 되어 있는 가에 따라 깜빡임 다른 모습으로 출력
		switch(setting)
 8000af6:	4b42      	ldr	r3, [pc, #264]	; (8000c00 <time_display+0x5a8>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	f200 81ec 	bhi.w	8000eda <time_display+0x882>
 8000b02:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <time_display+0x4b0>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b19 	.word	0x08000b19
 8000b0c:	08000c47 	.word	0x08000c47
 8000b10:	08000d0f 	.word	0x08000d0f
 8000b14:	08000ddb 	.word	0x08000ddb
		{
		case AP:
			if(timer_count % 200 == 0)
 8000b18:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <time_display+0x570>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <time_display+0x574>)
 8000b1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b22:	1199      	asrs	r1, r3, #6
 8000b24:	17d3      	asrs	r3, r2, #31
 8000b26:	1acb      	subs	r3, r1, r3
 8000b28:	21c8      	movs	r1, #200	; 0xc8
 8000b2a:	fb01 f303 	mul.w	r3, r1, r3
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d12f      	bne.n	8000b94 <time_display+0x53c>
			{
				if(AL_hour>=12)
 8000b34:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <time_display+0x5ac>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b0b      	cmp	r3, #11
 8000b3a:	dd14      	ble.n	8000b66 <time_display+0x50e>
				{
				  strncpy(line[1],"   ",3);
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <time_display+0x57c>)
 8000b3e:	4a32      	ldr	r2, [pc, #200]	; (8000c08 <time_display+0x5b0>)
 8000b40:	8811      	ldrh	r1, [r2, #0]
 8000b42:	7892      	ldrb	r2, [r2, #2]
 8000b44:	8019      	strh	r1, [r3, #0]
 8000b46:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour-12,AL_minute,AL_second);
 8000b48:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <time_display+0x5ac>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f1a3 020c 	sub.w	r2, r3, #12
 8000b50:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <time_display+0x5b4>)
 8000b52:	6819      	ldr	r1, [r3, #0]
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <time_display+0x5b8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	492d      	ldr	r1, [pc, #180]	; (8000c14 <time_display+0x5bc>)
 8000b5e:	4821      	ldr	r0, [pc, #132]	; (8000be4 <time_display+0x58c>)
 8000b60:	f004 faa6 	bl	80050b0 <siprintf>
 8000b64:	e011      	b.n	8000b8a <time_display+0x532>
				}
				else
				{
				  strncpy(line[1],"   ",3);
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <time_display+0x57c>)
 8000b68:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <time_display+0x5b0>)
 8000b6a:	8811      	ldrh	r1, [r2, #0]
 8000b6c:	7892      	ldrb	r2, [r2, #2]
 8000b6e:	8019      	strh	r1, [r3, #0]
 8000b70:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
 8000b72:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <time_display+0x5ac>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <time_display+0x5b4>)
 8000b78:	6819      	ldr	r1, [r3, #0]
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <time_display+0x5b8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	460b      	mov	r3, r1
 8000b82:	4924      	ldr	r1, [pc, #144]	; (8000c14 <time_display+0x5bc>)
 8000b84:	4817      	ldr	r0, [pc, #92]	; (8000be4 <time_display+0x58c>)
 8000b86:	f004 fa93 	bl	80050b0 <siprintf>
				}
				strcat(line[1],time_str);
 8000b8a:	4916      	ldr	r1, [pc, #88]	; (8000be4 <time_display+0x58c>)
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <time_display+0x57c>)
 8000b8e:	f004 faaf 	bl	80050f0 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
				}
				strcat(line[1],time_str);

			}
			break;
 8000b92:	e1a3      	b.n	8000edc <time_display+0x884>
				if(AL_hour>=12)
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <time_display+0x5ac>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b0b      	cmp	r3, #11
 8000b9a:	dd3d      	ble.n	8000c18 <time_display+0x5c0>
				  strncpy(line[1],"PM ",3);
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <time_display+0x57c>)
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <time_display+0x580>)
 8000ba0:	8811      	ldrh	r1, [r2, #0]
 8000ba2:	7892      	ldrb	r2, [r2, #2]
 8000ba4:	8019      	strh	r1, [r3, #0]
 8000ba6:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour-12,AL_minute,AL_second);
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <time_display+0x5ac>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f1a3 020c 	sub.w	r2, r3, #12
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <time_display+0x5b4>)
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <time_display+0x5b8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4915      	ldr	r1, [pc, #84]	; (8000c14 <time_display+0x5bc>)
 8000bbe:	4809      	ldr	r0, [pc, #36]	; (8000be4 <time_display+0x58c>)
 8000bc0:	f004 fa76 	bl	80050b0 <siprintf>
 8000bc4:	e03a      	b.n	8000c3c <time_display+0x5e4>
 8000bc6:	bf00      	nop
 8000bc8:	200001f8 	.word	0x200001f8
 8000bcc:	51eb851f 	.word	0x51eb851f
 8000bd0:	20000174 	.word	0x20000174
 8000bd4:	20000122 	.word	0x20000122
 8000bd8:	08005908 	.word	0x08005908
 8000bdc:	20000134 	.word	0x20000134
 8000be0:	08005938 	.word	0x08005938
 8000be4:	200001e0 	.word	0x200001e0
 8000be8:	08005920 	.word	0x08005920
 8000bec:	2000016c 	.word	0x2000016c
 8000bf0:	0800590c 	.word	0x0800590c
 8000bf4:	08005948 	.word	0x08005948
 8000bf8:	20000110 	.word	0x20000110
 8000bfc:	080058f4 	.word	0x080058f4
 8000c00:	20000000 	.word	0x20000000
 8000c04:	200001f0 	.word	0x200001f0
 8000c08:	08005924 	.word	0x08005924
 8000c0c:	200000b8 	.word	0x200000b8
 8000c10:	20000140 	.word	0x20000140
 8000c14:	08005958 	.word	0x08005958
				  strncpy(line[1],"AM ",3);
 8000c18:	4b97      	ldr	r3, [pc, #604]	; (8000e78 <time_display+0x820>)
 8000c1a:	4a98      	ldr	r2, [pc, #608]	; (8000e7c <time_display+0x824>)
 8000c1c:	8811      	ldrh	r1, [r2, #0]
 8000c1e:	7892      	ldrb	r2, [r2, #2]
 8000c20:	8019      	strh	r1, [r3, #0]
 8000c22:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
 8000c24:	4b96      	ldr	r3, [pc, #600]	; (8000e80 <time_display+0x828>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b96      	ldr	r3, [pc, #600]	; (8000e84 <time_display+0x82c>)
 8000c2a:	6819      	ldr	r1, [r3, #0]
 8000c2c:	4b96      	ldr	r3, [pc, #600]	; (8000e88 <time_display+0x830>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	460b      	mov	r3, r1
 8000c34:	4995      	ldr	r1, [pc, #596]	; (8000e8c <time_display+0x834>)
 8000c36:	4896      	ldr	r0, [pc, #600]	; (8000e90 <time_display+0x838>)
 8000c38:	f004 fa3a 	bl	80050b0 <siprintf>
				strcat(line[1],time_str);
 8000c3c:	4994      	ldr	r1, [pc, #592]	; (8000e90 <time_display+0x838>)
 8000c3e:	488e      	ldr	r0, [pc, #568]	; (8000e78 <time_display+0x820>)
 8000c40:	f004 fa56 	bl	80050f0 <strcat>
			break;
 8000c44:	e14a      	b.n	8000edc <time_display+0x884>
		case SET_H:
			if(timer_count % 200 == 0)
 8000c46:	4b93      	ldr	r3, [pc, #588]	; (8000e94 <time_display+0x83c>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b93      	ldr	r3, [pc, #588]	; (8000e98 <time_display+0x840>)
 8000c4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c50:	1199      	asrs	r1, r3, #6
 8000c52:	17d3      	asrs	r3, r2, #31
 8000c54:	1acb      	subs	r3, r1, r3
 8000c56:	21c8      	movs	r1, #200	; 0xc8
 8000c58:	fb01 f303 	mul.w	r3, r1, r3
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d125      	bne.n	8000cae <time_display+0x656>
			{
				if(AL_hour>=12)
 8000c62:	4b87      	ldr	r3, [pc, #540]	; (8000e80 <time_display+0x828>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b0b      	cmp	r3, #11
 8000c68:	dd0e      	ble.n	8000c88 <time_display+0x630>
				{
				  strncpy(line[1],"PM ",3);
 8000c6a:	4b83      	ldr	r3, [pc, #524]	; (8000e78 <time_display+0x820>)
 8000c6c:	4a8b      	ldr	r2, [pc, #556]	; (8000e9c <time_display+0x844>)
 8000c6e:	8811      	ldrh	r1, [r2, #0]
 8000c70:	7892      	ldrb	r2, [r2, #2]
 8000c72:	8019      	strh	r1, [r3, #0]
 8000c74:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"  :%02d:%02d AL\r\n",AL_minute,AL_second);
 8000c76:	4b83      	ldr	r3, [pc, #524]	; (8000e84 <time_display+0x82c>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b83      	ldr	r3, [pc, #524]	; (8000e88 <time_display+0x830>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4988      	ldr	r1, [pc, #544]	; (8000ea0 <time_display+0x848>)
 8000c80:	4883      	ldr	r0, [pc, #524]	; (8000e90 <time_display+0x838>)
 8000c82:	f004 fa15 	bl	80050b0 <siprintf>
 8000c86:	e00d      	b.n	8000ca4 <time_display+0x64c>
				}
				else
				{
				  strncpy(line[1],"AM ",3);
 8000c88:	4b7b      	ldr	r3, [pc, #492]	; (8000e78 <time_display+0x820>)
 8000c8a:	4a7c      	ldr	r2, [pc, #496]	; (8000e7c <time_display+0x824>)
 8000c8c:	8811      	ldrh	r1, [r2, #0]
 8000c8e:	7892      	ldrb	r2, [r2, #2]
 8000c90:	8019      	strh	r1, [r3, #0]
 8000c92:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"  :%02d:%02d AL\r\n",AL_minute,AL_second);
 8000c94:	4b7b      	ldr	r3, [pc, #492]	; (8000e84 <time_display+0x82c>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b7b      	ldr	r3, [pc, #492]	; (8000e88 <time_display+0x830>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4980      	ldr	r1, [pc, #512]	; (8000ea0 <time_display+0x848>)
 8000c9e:	487c      	ldr	r0, [pc, #496]	; (8000e90 <time_display+0x838>)
 8000ca0:	f004 fa06 	bl	80050b0 <siprintf>
				}
				strcat(line[1],time_str);
 8000ca4:	497a      	ldr	r1, [pc, #488]	; (8000e90 <time_display+0x838>)
 8000ca6:	4874      	ldr	r0, [pc, #464]	; (8000e78 <time_display+0x820>)
 8000ca8:	f004 fa22 	bl	80050f0 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
				}
				strcat(line[1],time_str);

			}
			break;
 8000cac:	e116      	b.n	8000edc <time_display+0x884>
				if(AL_hour>=12)
 8000cae:	4b74      	ldr	r3, [pc, #464]	; (8000e80 <time_display+0x828>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b0b      	cmp	r3, #11
 8000cb4:	dd14      	ble.n	8000ce0 <time_display+0x688>
				  strncpy(line[1],"PM ",3);
 8000cb6:	4b70      	ldr	r3, [pc, #448]	; (8000e78 <time_display+0x820>)
 8000cb8:	4a78      	ldr	r2, [pc, #480]	; (8000e9c <time_display+0x844>)
 8000cba:	8811      	ldrh	r1, [r2, #0]
 8000cbc:	7892      	ldrb	r2, [r2, #2]
 8000cbe:	8019      	strh	r1, [r3, #0]
 8000cc0:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour-12,AL_minute,AL_second);
 8000cc2:	4b6f      	ldr	r3, [pc, #444]	; (8000e80 <time_display+0x828>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f1a3 020c 	sub.w	r2, r3, #12
 8000cca:	4b6e      	ldr	r3, [pc, #440]	; (8000e84 <time_display+0x82c>)
 8000ccc:	6819      	ldr	r1, [r3, #0]
 8000cce:	4b6e      	ldr	r3, [pc, #440]	; (8000e88 <time_display+0x830>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	496d      	ldr	r1, [pc, #436]	; (8000e8c <time_display+0x834>)
 8000cd8:	486d      	ldr	r0, [pc, #436]	; (8000e90 <time_display+0x838>)
 8000cda:	f004 f9e9 	bl	80050b0 <siprintf>
 8000cde:	e011      	b.n	8000d04 <time_display+0x6ac>
				  strncpy(line[1],"AM ",3);
 8000ce0:	4b65      	ldr	r3, [pc, #404]	; (8000e78 <time_display+0x820>)
 8000ce2:	4a66      	ldr	r2, [pc, #408]	; (8000e7c <time_display+0x824>)
 8000ce4:	8811      	ldrh	r1, [r2, #0]
 8000ce6:	7892      	ldrb	r2, [r2, #2]
 8000ce8:	8019      	strh	r1, [r3, #0]
 8000cea:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
 8000cec:	4b64      	ldr	r3, [pc, #400]	; (8000e80 <time_display+0x828>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b64      	ldr	r3, [pc, #400]	; (8000e84 <time_display+0x82c>)
 8000cf2:	6819      	ldr	r1, [r3, #0]
 8000cf4:	4b64      	ldr	r3, [pc, #400]	; (8000e88 <time_display+0x830>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4963      	ldr	r1, [pc, #396]	; (8000e8c <time_display+0x834>)
 8000cfe:	4864      	ldr	r0, [pc, #400]	; (8000e90 <time_display+0x838>)
 8000d00:	f004 f9d6 	bl	80050b0 <siprintf>
				strcat(line[1],time_str);
 8000d04:	4962      	ldr	r1, [pc, #392]	; (8000e90 <time_display+0x838>)
 8000d06:	485c      	ldr	r0, [pc, #368]	; (8000e78 <time_display+0x820>)
 8000d08:	f004 f9f2 	bl	80050f0 <strcat>
			break;
 8000d0c:	e0e6      	b.n	8000edc <time_display+0x884>
		case SET_M:
			if(timer_count % 200 == 0)
 8000d0e:	4b61      	ldr	r3, [pc, #388]	; (8000e94 <time_display+0x83c>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b61      	ldr	r3, [pc, #388]	; (8000e98 <time_display+0x840>)
 8000d14:	fb83 1302 	smull	r1, r3, r3, r2
 8000d18:	1199      	asrs	r1, r3, #6
 8000d1a:	17d3      	asrs	r3, r2, #31
 8000d1c:	1acb      	subs	r3, r1, r3
 8000d1e:	21c8      	movs	r1, #200	; 0xc8
 8000d20:	fb01 f303 	mul.w	r3, r1, r3
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d127      	bne.n	8000d7a <time_display+0x722>
			{
				if(AL_hour>=12)
 8000d2a:	4b55      	ldr	r3, [pc, #340]	; (8000e80 <time_display+0x828>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b0b      	cmp	r3, #11
 8000d30:	dd10      	ble.n	8000d54 <time_display+0x6fc>
				{
				  strncpy(line[1],"PM ",3);
 8000d32:	4b51      	ldr	r3, [pc, #324]	; (8000e78 <time_display+0x820>)
 8000d34:	4a59      	ldr	r2, [pc, #356]	; (8000e9c <time_display+0x844>)
 8000d36:	8811      	ldrh	r1, [r2, #0]
 8000d38:	7892      	ldrb	r2, [r2, #2]
 8000d3a:	8019      	strh	r1, [r3, #0]
 8000d3c:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:  :%02d AL\r\n",AL_hour-12,AL_second);
 8000d3e:	4b50      	ldr	r3, [pc, #320]	; (8000e80 <time_display+0x828>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f1a3 020c 	sub.w	r2, r3, #12
 8000d46:	4b50      	ldr	r3, [pc, #320]	; (8000e88 <time_display+0x830>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4956      	ldr	r1, [pc, #344]	; (8000ea4 <time_display+0x84c>)
 8000d4c:	4850      	ldr	r0, [pc, #320]	; (8000e90 <time_display+0x838>)
 8000d4e:	f004 f9af 	bl	80050b0 <siprintf>
 8000d52:	e00d      	b.n	8000d70 <time_display+0x718>
				}
				else
				{
				  strncpy(line[1],"AM ",3);
 8000d54:	4b48      	ldr	r3, [pc, #288]	; (8000e78 <time_display+0x820>)
 8000d56:	4a49      	ldr	r2, [pc, #292]	; (8000e7c <time_display+0x824>)
 8000d58:	8811      	ldrh	r1, [r2, #0]
 8000d5a:	7892      	ldrb	r2, [r2, #2]
 8000d5c:	8019      	strh	r1, [r3, #0]
 8000d5e:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:  :%02d AL\r\n",AL_hour,AL_second);
 8000d60:	4b47      	ldr	r3, [pc, #284]	; (8000e80 <time_display+0x828>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b48      	ldr	r3, [pc, #288]	; (8000e88 <time_display+0x830>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	494e      	ldr	r1, [pc, #312]	; (8000ea4 <time_display+0x84c>)
 8000d6a:	4849      	ldr	r0, [pc, #292]	; (8000e90 <time_display+0x838>)
 8000d6c:	f004 f9a0 	bl	80050b0 <siprintf>
				}
				strcat(line[1],time_str);
 8000d70:	4947      	ldr	r1, [pc, #284]	; (8000e90 <time_display+0x838>)
 8000d72:	4841      	ldr	r0, [pc, #260]	; (8000e78 <time_display+0x820>)
 8000d74:	f004 f9bc 	bl	80050f0 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
				}
				strcat(line[1],time_str);

			}
			break;
 8000d78:	e0b0      	b.n	8000edc <time_display+0x884>
				if(AL_hour>=12)
 8000d7a:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <time_display+0x828>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b0b      	cmp	r3, #11
 8000d80:	dd14      	ble.n	8000dac <time_display+0x754>
				  strncpy(line[1],"PM ",3);
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <time_display+0x820>)
 8000d84:	4a45      	ldr	r2, [pc, #276]	; (8000e9c <time_display+0x844>)
 8000d86:	8811      	ldrh	r1, [r2, #0]
 8000d88:	7892      	ldrb	r2, [r2, #2]
 8000d8a:	8019      	strh	r1, [r3, #0]
 8000d8c:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour-12,AL_minute,AL_second);
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <time_display+0x828>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f1a3 020c 	sub.w	r2, r3, #12
 8000d96:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <time_display+0x82c>)
 8000d98:	6819      	ldr	r1, [r3, #0]
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <time_display+0x830>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	460b      	mov	r3, r1
 8000da2:	493a      	ldr	r1, [pc, #232]	; (8000e8c <time_display+0x834>)
 8000da4:	483a      	ldr	r0, [pc, #232]	; (8000e90 <time_display+0x838>)
 8000da6:	f004 f983 	bl	80050b0 <siprintf>
 8000daa:	e011      	b.n	8000dd0 <time_display+0x778>
				  strncpy(line[1],"AM ",3);
 8000dac:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <time_display+0x820>)
 8000dae:	4a33      	ldr	r2, [pc, #204]	; (8000e7c <time_display+0x824>)
 8000db0:	8811      	ldrh	r1, [r2, #0]
 8000db2:	7892      	ldrb	r2, [r2, #2]
 8000db4:	8019      	strh	r1, [r3, #0]
 8000db6:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
 8000db8:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <time_display+0x828>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <time_display+0x82c>)
 8000dbe:	6819      	ldr	r1, [r3, #0]
 8000dc0:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <time_display+0x830>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4930      	ldr	r1, [pc, #192]	; (8000e8c <time_display+0x834>)
 8000dca:	4831      	ldr	r0, [pc, #196]	; (8000e90 <time_display+0x838>)
 8000dcc:	f004 f970 	bl	80050b0 <siprintf>
				strcat(line[1],time_str);
 8000dd0:	492f      	ldr	r1, [pc, #188]	; (8000e90 <time_display+0x838>)
 8000dd2:	4829      	ldr	r0, [pc, #164]	; (8000e78 <time_display+0x820>)
 8000dd4:	f004 f98c 	bl	80050f0 <strcat>
			break;
 8000dd8:	e080      	b.n	8000edc <time_display+0x884>
		case SET_S:
			if(timer_count % 200 == 0)
 8000dda:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <time_display+0x83c>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <time_display+0x840>)
 8000de0:	fb83 1302 	smull	r1, r3, r3, r2
 8000de4:	1199      	asrs	r1, r3, #6
 8000de6:	17d3      	asrs	r3, r2, #31
 8000de8:	1acb      	subs	r3, r1, r3
 8000dea:	21c8      	movs	r1, #200	; 0xc8
 8000dec:	fb01 f303 	mul.w	r3, r1, r3
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d127      	bne.n	8000e46 <time_display+0x7ee>
			{
				if(AL_hour>=12)
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <time_display+0x828>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b0b      	cmp	r3, #11
 8000dfc:	dd10      	ble.n	8000e20 <time_display+0x7c8>
				{
				  strncpy(line[1],"PM ",3);
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <time_display+0x820>)
 8000e00:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <time_display+0x844>)
 8000e02:	8811      	ldrh	r1, [r2, #0]
 8000e04:	7892      	ldrb	r2, [r2, #2]
 8000e06:	8019      	strh	r1, [r3, #0]
 8000e08:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:   AL\r\n",AL_hour-12,AL_minute);
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <time_display+0x828>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f1a3 020c 	sub.w	r2, r3, #12
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <time_display+0x82c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4924      	ldr	r1, [pc, #144]	; (8000ea8 <time_display+0x850>)
 8000e18:	481d      	ldr	r0, [pc, #116]	; (8000e90 <time_display+0x838>)
 8000e1a:	f004 f949 	bl	80050b0 <siprintf>
 8000e1e:	e00d      	b.n	8000e3c <time_display+0x7e4>
				}
				else
				{
				  strncpy(line[1],"AM ",3);
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <time_display+0x820>)
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <time_display+0x824>)
 8000e24:	8811      	ldrh	r1, [r2, #0]
 8000e26:	7892      	ldrb	r2, [r2, #2]
 8000e28:	8019      	strh	r1, [r3, #0]
 8000e2a:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:   AL\r\n",AL_hour,AL_minute);
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <time_display+0x828>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <time_display+0x82c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	491c      	ldr	r1, [pc, #112]	; (8000ea8 <time_display+0x850>)
 8000e36:	4816      	ldr	r0, [pc, #88]	; (8000e90 <time_display+0x838>)
 8000e38:	f004 f93a 	bl	80050b0 <siprintf>
				}
				strcat(line[1],time_str);
 8000e3c:	4914      	ldr	r1, [pc, #80]	; (8000e90 <time_display+0x838>)
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <time_display+0x820>)
 8000e40:	f004 f956 	bl	80050f0 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
				}
				strcat(line[1],time_str);

			}
			break;
 8000e44:	e04a      	b.n	8000edc <time_display+0x884>
				if(AL_hour>=12)
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <time_display+0x828>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b0b      	cmp	r3, #11
 8000e4c:	dd2e      	ble.n	8000eac <time_display+0x854>
				  strncpy(line[1],"PM ",3);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <time_display+0x820>)
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <time_display+0x844>)
 8000e52:	8811      	ldrh	r1, [r2, #0]
 8000e54:	7892      	ldrb	r2, [r2, #2]
 8000e56:	8019      	strh	r1, [r3, #0]
 8000e58:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour-12,AL_minute,AL_second);
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <time_display+0x828>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f1a3 020c 	sub.w	r2, r3, #12
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <time_display+0x82c>)
 8000e64:	6819      	ldr	r1, [r3, #0]
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <time_display+0x830>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4907      	ldr	r1, [pc, #28]	; (8000e8c <time_display+0x834>)
 8000e70:	4807      	ldr	r0, [pc, #28]	; (8000e90 <time_display+0x838>)
 8000e72:	f004 f91d 	bl	80050b0 <siprintf>
 8000e76:	e02b      	b.n	8000ed0 <time_display+0x878>
 8000e78:	20000122 	.word	0x20000122
 8000e7c:	08005920 	.word	0x08005920
 8000e80:	200001f0 	.word	0x200001f0
 8000e84:	200000b8 	.word	0x200000b8
 8000e88:	20000140 	.word	0x20000140
 8000e8c:	08005958 	.word	0x08005958
 8000e90:	200001e0 	.word	0x200001e0
 8000e94:	200001f8 	.word	0x200001f8
 8000e98:	51eb851f 	.word	0x51eb851f
 8000e9c:	08005908 	.word	0x08005908
 8000ea0:	0800596c 	.word	0x0800596c
 8000ea4:	08005980 	.word	0x08005980
 8000ea8:	08005994 	.word	0x08005994
				  strncpy(line[1],"AM ",3);
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <time_display+0x8dc>)
 8000eae:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <time_display+0x8e0>)
 8000eb0:	8811      	ldrh	r1, [r2, #0]
 8000eb2:	7892      	ldrb	r2, [r2, #2]
 8000eb4:	8019      	strh	r1, [r3, #0]
 8000eb6:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <time_display+0x8e4>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <time_display+0x8e8>)
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <time_display+0x8ec>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	491f      	ldr	r1, [pc, #124]	; (8000f48 <time_display+0x8f0>)
 8000eca:	4820      	ldr	r0, [pc, #128]	; (8000f4c <time_display+0x8f4>)
 8000ecc:	f004 f8f0 	bl	80050b0 <siprintf>
				strcat(line[1],time_str);
 8000ed0:	491e      	ldr	r1, [pc, #120]	; (8000f4c <time_display+0x8f4>)
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <time_display+0x8dc>)
 8000ed4:	f004 f90c 	bl	80050f0 <strcat>
			break;
 8000ed8:	e000      	b.n	8000edc <time_display+0x884>
		default:
			break;
 8000eda:	bf00      	nop
		}
		break;
 8000edc:	e022      	b.n	8000f24 <time_display+0x8cc>
	case MUSIC_SELECT:
		memset(line,0,sizeof(line));
 8000ede:	2224      	movs	r2, #36	; 0x24
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	481b      	ldr	r0, [pc, #108]	; (8000f50 <time_display+0x8f8>)
 8000ee4:	f004 f8dc 	bl	80050a0 <memset>
		sprintf(line[0],"Three Bears     \r\n");
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <time_display+0x8f8>)
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <time_display+0x8fc>)
 8000eec:	4615      	mov	r5, r2
 8000eee:	461c      	mov	r4, r3
 8000ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef2:	6028      	str	r0, [r5, #0]
 8000ef4:	6069      	str	r1, [r5, #4]
 8000ef6:	60aa      	str	r2, [r5, #8]
 8000ef8:	60eb      	str	r3, [r5, #12]
 8000efa:	8823      	ldrh	r3, [r4, #0]
 8000efc:	78a2      	ldrb	r2, [r4, #2]
 8000efe:	822b      	strh	r3, [r5, #16]
 8000f00:	4613      	mov	r3, r2
 8000f02:	74ab      	strb	r3, [r5, #18]
		sprintf(line[1],"Spring Water    \r\n");
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <time_display+0x8dc>)
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <time_display+0x900>)
 8000f08:	4615      	mov	r5, r2
 8000f0a:	461c      	mov	r4, r3
 8000f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f0e:	6028      	str	r0, [r5, #0]
 8000f10:	6069      	str	r1, [r5, #4]
 8000f12:	60aa      	str	r2, [r5, #8]
 8000f14:	60eb      	str	r3, [r5, #12]
 8000f16:	8823      	ldrh	r3, [r4, #0]
 8000f18:	78a2      	ldrb	r2, [r4, #2]
 8000f1a:	822b      	strh	r3, [r5, #16]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	74ab      	strb	r3, [r5, #18]
		break;
 8000f20:	e000      	b.n	8000f24 <time_display+0x8cc>
	default:
		break;
 8000f22:	bf00      	nop
	}


  HAL_UART_Transmit_IT(&huart3,(uint8_t *)line,sizeof(line));
 8000f24:	2224      	movs	r2, #36	; 0x24
 8000f26:	490a      	ldr	r1, [pc, #40]	; (8000f50 <time_display+0x8f8>)
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <time_display+0x904>)
 8000f2a:	f003 fa42 	bl	80043b2 <HAL_UART_Transmit_IT>
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bdb0      	pop	{r4, r5, r7, pc}
 8000f34:	20000122 	.word	0x20000122
 8000f38:	08005920 	.word	0x08005920
 8000f3c:	200001f0 	.word	0x200001f0
 8000f40:	200000b8 	.word	0x200000b8
 8000f44:	20000140 	.word	0x20000140
 8000f48:	08005958 	.word	0x08005958
 8000f4c:	200001e0 	.word	0x200001e0
 8000f50:	20000110 	.word	0x20000110
 8000f54:	080059a8 	.word	0x080059a8
 8000f58:	080059bc 	.word	0x080059bc
 8000f5c:	200000c0 	.word	0x200000c0

08000f60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a96      	ldr	r2, [pc, #600]	; (80011c8 <HAL_UART_RxCpltCallback+0x268>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	f040 8384 	bne.w	800167c <HAL_UART_RxCpltCallback+0x71c>
  {

	current_time = HAL_GetTick();
 8000f74:	f001 f872 	bl	800205c <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4b94      	ldr	r3, [pc, #592]	; (80011cc <HAL_UART_RxCpltCallback+0x26c>)
 8000f7c:	601a      	str	r2, [r3, #0]
    time_interval = current_time - last_time;
 8000f7e:	4b93      	ldr	r3, [pc, #588]	; (80011cc <HAL_UART_RxCpltCallback+0x26c>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b93      	ldr	r3, [pc, #588]	; (80011d0 <HAL_UART_RxCpltCallback+0x270>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	4a92      	ldr	r2, [pc, #584]	; (80011d4 <HAL_UART_RxCpltCallback+0x274>)
 8000f8a:	6013      	str	r3, [r2, #0]
    last_time = current_time;
 8000f8c:	4b8f      	ldr	r3, [pc, #572]	; (80011cc <HAL_UART_RxCpltCallback+0x26c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a8f      	ldr	r2, [pc, #572]	; (80011d0 <HAL_UART_RxCpltCallback+0x270>)
 8000f92:	6013      	str	r3, [r2, #0]

    switch(current_state.mode)
 8000f94:	4b90      	ldr	r3, [pc, #576]	; (80011d8 <HAL_UART_RxCpltCallback+0x278>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	f200 8369 	bhi.w	8001670 <HAL_UART_RxCpltCallback+0x710>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <HAL_UART_RxCpltCallback+0x44>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fb5 	.word	0x08000fb5
 8000fa8:	08000fcd 	.word	0x08000fcd
 8000fac:	08001139 	.word	0x08001139
 8000fb0:	080014bd 	.word	0x080014bd
    {
      case NORMAL_STATE:
    	  switch(key_value)
 8000fb4:	4b89      	ldr	r3, [pc, #548]	; (80011dc <HAL_UART_RxCpltCallback+0x27c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b0d      	cmp	r3, #13
 8000fba:	d000      	beq.n	8000fbe <HAL_UART_RxCpltCallback+0x5e>
    	  	  case SEL_KEY:
        		  current_state.button = SEL;
        		  mode_analysis();
    	  		  break;
    	  	  default:  // Arrow keys is Not valid in NORMAL state
    	  		  break;
 8000fbc:	e005      	b.n	8000fca <HAL_UART_RxCpltCallback+0x6a>
        		  current_state.button = SEL;
 8000fbe:	4b86      	ldr	r3, [pc, #536]	; (80011d8 <HAL_UART_RxCpltCallback+0x278>)
 8000fc0:	2205      	movs	r2, #5
 8000fc2:	705a      	strb	r2, [r3, #1]
        		  mode_analysis();
 8000fc4:	f000 fb82 	bl	80016cc <mode_analysis>
    	  		  break;
 8000fc8:	bf00      	nop
    	  }
    	  break;
 8000fca:	e352      	b.n	8001672 <HAL_UART_RxCpltCallback+0x712>
      case TIME_SETTING:
    	  switch(key_value)
 8000fcc:	4b83      	ldr	r3, [pc, #524]	; (80011dc <HAL_UART_RxCpltCallback+0x27c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b42      	cmp	r3, #66	; 0x42
 8000fd2:	d065      	beq.n	80010a0 <HAL_UART_RxCpltCallback+0x140>
 8000fd4:	2b42      	cmp	r3, #66	; 0x42
 8000fd6:	dc04      	bgt.n	8000fe2 <HAL_UART_RxCpltCallback+0x82>
 8000fd8:	2b0d      	cmp	r3, #13
 8000fda:	d009      	beq.n	8000ff0 <HAL_UART_RxCpltCallback+0x90>
 8000fdc:	2b41      	cmp	r3, #65	; 0x41
 8000fde:	d035      	beq.n	800104c <HAL_UART_RxCpltCallback+0xec>
    	  	  case LEFT_KEY:
    	  		  setting--;
    	  		  if(setting == NOT) setting = SET_S;
    	  		  break;
    	  	  default:  // Arrow keys is Not valid in NORMAL state
    	  		  break;
 8000fe0:	e0a9      	b.n	8001136 <HAL_UART_RxCpltCallback+0x1d6>
    	  switch(key_value)
 8000fe2:	2b43      	cmp	r3, #67	; 0x43
 8000fe4:	f000 8086 	beq.w	80010f4 <HAL_UART_RxCpltCallback+0x194>
 8000fe8:	2b44      	cmp	r3, #68	; 0x44
 8000fea:	f000 8091 	beq.w	8001110 <HAL_UART_RxCpltCallback+0x1b0>
    	  		  break;
 8000fee:	e0a2      	b.n	8001136 <HAL_UART_RxCpltCallback+0x1d6>
    	  		  if(time_interval>= NORMAL_CLICK_MIN)
 8000ff0:	4b78      	ldr	r3, [pc, #480]	; (80011d4 <HAL_UART_RxCpltCallback+0x274>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ff8:	d306      	bcc.n	8001008 <HAL_UART_RxCpltCallback+0xa8>
    	  			  setting = AP;
 8000ffa:	4b79      	ldr	r3, [pc, #484]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
    	  			  current_state.mode = NORMAL_STATE;
 8001000:	4b75      	ldr	r3, [pc, #468]	; (80011d8 <HAL_UART_RxCpltCallback+0x278>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
    	  		  break;
 8001006:	e091      	b.n	800112c <HAL_UART_RxCpltCallback+0x1cc>
    	  		  else if(time_interval>=DOUBLE_CLICK_MIN && time_interval <=DOUBLE_CLICK_MAX)
 8001008:	4b72      	ldr	r3, [pc, #456]	; (80011d4 <HAL_UART_RxCpltCallback+0x274>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b63      	cmp	r3, #99	; 0x63
 800100e:	f240 808d 	bls.w	800112c <HAL_UART_RxCpltCallback+0x1cc>
 8001012:	4b70      	ldr	r3, [pc, #448]	; (80011d4 <HAL_UART_RxCpltCallback+0x274>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2bc8      	cmp	r3, #200	; 0xc8
 8001018:	f200 8088 	bhi.w	800112c <HAL_UART_RxCpltCallback+0x1cc>
    	  			  current_state.mode = MUSIC_SELECT;
 800101c:	4b6e      	ldr	r3, [pc, #440]	; (80011d8 <HAL_UART_RxCpltCallback+0x278>)
 800101e:	2203      	movs	r2, #3
 8001020:	701a      	strb	r2, [r3, #0]
    	  			  long_key_count = 0;
 8001022:	4b70      	ldr	r3, [pc, #448]	; (80011e4 <HAL_UART_RxCpltCallback+0x284>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
    	  			  memset(uart_buf,0,sizeof(uart_buf));
 8001028:	2228      	movs	r2, #40	; 0x28
 800102a:	2100      	movs	r1, #0
 800102c:	486e      	ldr	r0, [pc, #440]	; (80011e8 <HAL_UART_RxCpltCallback+0x288>)
 800102e:	f004 f837 	bl	80050a0 <memset>
    	  			  sprintf(uart_buf,"MUSIC_SELECT %d\r\n",time_interval);
 8001032:	4b68      	ldr	r3, [pc, #416]	; (80011d4 <HAL_UART_RxCpltCallback+0x274>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	496c      	ldr	r1, [pc, #432]	; (80011ec <HAL_UART_RxCpltCallback+0x28c>)
 800103a:	486b      	ldr	r0, [pc, #428]	; (80011e8 <HAL_UART_RxCpltCallback+0x288>)
 800103c:	f004 f838 	bl	80050b0 <siprintf>
    	  			  HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 8001040:	2228      	movs	r2, #40	; 0x28
 8001042:	4969      	ldr	r1, [pc, #420]	; (80011e8 <HAL_UART_RxCpltCallback+0x288>)
 8001044:	486a      	ldr	r0, [pc, #424]	; (80011f0 <HAL_UART_RxCpltCallback+0x290>)
 8001046:	f003 f9b4 	bl	80043b2 <HAL_UART_Transmit_IT>
    	  		  break;
 800104a:	e06f      	b.n	800112c <HAL_UART_RxCpltCallback+0x1cc>
    	  		  switch(setting)
 800104c:	4b64      	ldr	r3, [pc, #400]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	3b01      	subs	r3, #1
 8001052:	2b03      	cmp	r3, #3
 8001054:	d822      	bhi.n	800109c <HAL_UART_RxCpltCallback+0x13c>
 8001056:	a201      	add	r2, pc, #4	; (adr r2, 800105c <HAL_UART_RxCpltCallback+0xfc>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	0800106d 	.word	0x0800106d
 8001060:	08001079 	.word	0x08001079
 8001064:	08001085 	.word	0x08001085
 8001068:	08001091 	.word	0x08001091
    	  			  hour += 12;
 800106c:	4b61      	ldr	r3, [pc, #388]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	330c      	adds	r3, #12
 8001072:	4a60      	ldr	r2, [pc, #384]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 8001074:	6013      	str	r3, [r2, #0]
    	  			  break;
 8001076:	e012      	b.n	800109e <HAL_UART_RxCpltCallback+0x13e>
    	  			  hour++;
 8001078:	4b5e      	ldr	r3, [pc, #376]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4a5d      	ldr	r2, [pc, #372]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 8001080:	6013      	str	r3, [r2, #0]
    	  			  break;
 8001082:	e00c      	b.n	800109e <HAL_UART_RxCpltCallback+0x13e>
    	  			  minute++;
 8001084:	4b5c      	ldr	r3, [pc, #368]	; (80011f8 <HAL_UART_RxCpltCallback+0x298>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a5b      	ldr	r2, [pc, #364]	; (80011f8 <HAL_UART_RxCpltCallback+0x298>)
 800108c:	6013      	str	r3, [r2, #0]
    	  			  break;
 800108e:	e006      	b.n	800109e <HAL_UART_RxCpltCallback+0x13e>
    	  			  second++;
 8001090:	4b5a      	ldr	r3, [pc, #360]	; (80011fc <HAL_UART_RxCpltCallback+0x29c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4a59      	ldr	r2, [pc, #356]	; (80011fc <HAL_UART_RxCpltCallback+0x29c>)
 8001098:	6013      	str	r3, [r2, #0]
    	  			  break;
 800109a:	e000      	b.n	800109e <HAL_UART_RxCpltCallback+0x13e>
    	  			  break;
 800109c:	bf00      	nop
    	  		  break;
 800109e:	e04a      	b.n	8001136 <HAL_UART_RxCpltCallback+0x1d6>
    	  		  switch(setting)
 80010a0:	4b4f      	ldr	r3, [pc, #316]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d822      	bhi.n	80010f0 <HAL_UART_RxCpltCallback+0x190>
 80010aa:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <HAL_UART_RxCpltCallback+0x150>)
 80010ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b0:	080010c1 	.word	0x080010c1
 80010b4:	080010cd 	.word	0x080010cd
 80010b8:	080010d9 	.word	0x080010d9
 80010bc:	080010e5 	.word	0x080010e5
    	  			  hour -= 12;
 80010c0:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b0c      	subs	r3, #12
 80010c6:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 80010c8:	6013      	str	r3, [r2, #0]
    	  			  break;
 80010ca:	e012      	b.n	80010f2 <HAL_UART_RxCpltCallback+0x192>
    	  			  hour--;
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	4a48      	ldr	r2, [pc, #288]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 80010d4:	6013      	str	r3, [r2, #0]
    	  			  break;
 80010d6:	e00c      	b.n	80010f2 <HAL_UART_RxCpltCallback+0x192>
    	  			  minute--;
 80010d8:	4b47      	ldr	r3, [pc, #284]	; (80011f8 <HAL_UART_RxCpltCallback+0x298>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3b01      	subs	r3, #1
 80010de:	4a46      	ldr	r2, [pc, #280]	; (80011f8 <HAL_UART_RxCpltCallback+0x298>)
 80010e0:	6013      	str	r3, [r2, #0]
    	  			  break;
 80010e2:	e006      	b.n	80010f2 <HAL_UART_RxCpltCallback+0x192>
    	  			  second--;
 80010e4:	4b45      	ldr	r3, [pc, #276]	; (80011fc <HAL_UART_RxCpltCallback+0x29c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	4a44      	ldr	r2, [pc, #272]	; (80011fc <HAL_UART_RxCpltCallback+0x29c>)
 80010ec:	6013      	str	r3, [r2, #0]
    	  			  break;
 80010ee:	e000      	b.n	80010f2 <HAL_UART_RxCpltCallback+0x192>
    	  			  break;
 80010f0:	bf00      	nop
    	  		  break;
 80010f2:	e020      	b.n	8001136 <HAL_UART_RxCpltCallback+0x1d6>
    	  		  setting++;
 80010f4:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 80010fe:	701a      	strb	r2, [r3, #0]
    	  		  if(setting == 5) setting = AP;
 8001100:	4b37      	ldr	r3, [pc, #220]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b05      	cmp	r3, #5
 8001106:	d113      	bne.n	8001130 <HAL_UART_RxCpltCallback+0x1d0>
 8001108:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
    	  		  break;
 800110e:	e00f      	b.n	8001130 <HAL_UART_RxCpltCallback+0x1d0>
    	  		  setting--;
 8001110:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 800111a:	701a      	strb	r2, [r3, #0]
    	  		  if(setting == NOT) setting = SET_S;
 800111c:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d107      	bne.n	8001134 <HAL_UART_RxCpltCallback+0x1d4>
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 8001126:	2204      	movs	r2, #4
 8001128:	701a      	strb	r2, [r3, #0]
    	  		  break;
 800112a:	e003      	b.n	8001134 <HAL_UART_RxCpltCallback+0x1d4>
    	  		  break;
 800112c:	bf00      	nop
 800112e:	e2a0      	b.n	8001672 <HAL_UART_RxCpltCallback+0x712>
    	  		  break;
 8001130:	bf00      	nop
 8001132:	e29e      	b.n	8001672 <HAL_UART_RxCpltCallback+0x712>
    	  		  break;
 8001134:	bf00      	nop
    	  }
    	  break;
 8001136:	e29c      	b.n	8001672 <HAL_UART_RxCpltCallback+0x712>
      case ALARM_TIME_SETTING:
    	  switch(key_value)
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_UART_RxCpltCallback+0x27c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b42      	cmp	r3, #66	; 0x42
 800113e:	f000 8129 	beq.w	8001394 <HAL_UART_RxCpltCallback+0x434>
 8001142:	2b42      	cmp	r3, #66	; 0x42
 8001144:	dc05      	bgt.n	8001152 <HAL_UART_RxCpltCallback+0x1f2>
 8001146:	2b0d      	cmp	r3, #13
 8001148:	d00a      	beq.n	8001160 <HAL_UART_RxCpltCallback+0x200>
 800114a:	2b41      	cmp	r3, #65	; 0x41
 800114c:	f000 80c3 	beq.w	80012d6 <HAL_UART_RxCpltCallback+0x376>
    	  	  case LEFT_KEY:
    	  		  setting--;
    	  		  if(setting == NOT) setting = SET_S;
    	  		  break;
    	  	  default:  // Arrow keys is Not valid in NORMAL state
    	  		  break;
 8001150:	e19f      	b.n	8001492 <HAL_UART_RxCpltCallback+0x532>
    	  switch(key_value)
 8001152:	2b43      	cmp	r3, #67	; 0x43
 8001154:	f000 817c 	beq.w	8001450 <HAL_UART_RxCpltCallback+0x4f0>
 8001158:	2b44      	cmp	r3, #68	; 0x44
 800115a:	f000 8187 	beq.w	800146c <HAL_UART_RxCpltCallback+0x50c>
    	  		  break;
 800115e:	e198      	b.n	8001492 <HAL_UART_RxCpltCallback+0x532>
    	  		  if(time_interval>= NORMAL_CLICK_MIN)
 8001160:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <HAL_UART_RxCpltCallback+0x274>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001168:	f0c0 818e 	bcc.w	8001488 <HAL_UART_RxCpltCallback+0x528>
    	  			  HAL_FLASH_Unlock();
 800116c:	f001 f90a 	bl	8002384 <HAL_FLASH_Unlock>
    	  			  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <HAL_UART_RxCpltCallback+0x2a0>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
    	  			  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <HAL_UART_RxCpltCallback+0x2a0>)
 8001178:	2202      	movs	r2, #2
 800117a:	611a      	str	r2, [r3, #16]
    	  			  EraseInitStruct.Sector        = FLASH_SECTOR_12;
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_UART_RxCpltCallback+0x2a0>)
 800117e:	220c      	movs	r2, #12
 8001180:	609a      	str	r2, [r3, #8]
    	  			  EraseInitStruct.NbSectors     = FLASH_SECTOR_12;
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <HAL_UART_RxCpltCallback+0x2a0>)
 8001184:	220c      	movs	r2, #12
 8001186:	60da      	str	r2, [r3, #12]
    	  			  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001188:	491e      	ldr	r1, [pc, #120]	; (8001204 <HAL_UART_RxCpltCallback+0x2a4>)
 800118a:	481d      	ldr	r0, [pc, #116]	; (8001200 <HAL_UART_RxCpltCallback+0x2a0>)
 800118c:	f001 fa6a 	bl	8002664 <HAL_FLASHEx_Erase>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d03a      	beq.n	800120c <HAL_UART_RxCpltCallback+0x2ac>
    	  				memset(uart_buf,0,sizeof(uart_buf));
 8001196:	2228      	movs	r2, #40	; 0x28
 8001198:	2100      	movs	r1, #0
 800119a:	4813      	ldr	r0, [pc, #76]	; (80011e8 <HAL_UART_RxCpltCallback+0x288>)
 800119c:	f003 ff80 	bl	80050a0 <memset>
    	  				sprintf(uart_buf,"HAL_FLASHEx_Erase ERROR\r\n");
 80011a0:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <HAL_UART_RxCpltCallback+0x288>)
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_UART_RxCpltCallback+0x2a8>)
 80011a4:	4615      	mov	r5, r2
 80011a6:	461c      	mov	r4, r3
 80011a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011aa:	6028      	str	r0, [r5, #0]
 80011ac:	6069      	str	r1, [r5, #4]
 80011ae:	60aa      	str	r2, [r5, #8]
 80011b0:	60eb      	str	r3, [r5, #12]
 80011b2:	cc03      	ldmia	r4!, {r0, r1}
 80011b4:	6128      	str	r0, [r5, #16]
 80011b6:	6169      	str	r1, [r5, #20]
 80011b8:	8823      	ldrh	r3, [r4, #0]
 80011ba:	832b      	strh	r3, [r5, #24]
    	  				HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 80011bc:	2228      	movs	r2, #40	; 0x28
 80011be:	490a      	ldr	r1, [pc, #40]	; (80011e8 <HAL_UART_RxCpltCallback+0x288>)
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <HAL_UART_RxCpltCallback+0x290>)
 80011c2:	f003 f8f6 	bl	80043b2 <HAL_UART_Transmit_IT>
    	  				return -1;
 80011c6:	e259      	b.n	800167c <HAL_UART_RxCpltCallback+0x71c>
 80011c8:	40004800 	.word	0x40004800
 80011cc:	20000100 	.word	0x20000100
 80011d0:	20000198 	.word	0x20000198
 80011d4:	20000138 	.word	0x20000138
 80011d8:	20000104 	.word	0x20000104
 80011dc:	20000106 	.word	0x20000106
 80011e0:	20000000 	.word	0x20000000
 80011e4:	2000019c 	.word	0x2000019c
 80011e8:	20000144 	.word	0x20000144
 80011ec:	080059d0 	.word	0x080059d0
 80011f0:	200000c0 	.word	0x200000c0
 80011f4:	20000174 	.word	0x20000174
 80011f8:	2000016c 	.word	0x2000016c
 80011fc:	20000134 	.word	0x20000134
 8001200:	20000098 	.word	0x20000098
 8001204:	20000094 	.word	0x20000094
 8001208:	080059e4 	.word	0x080059e4
    	  			  Address = (0x08100000);
 800120c:	4ba1      	ldr	r3, [pc, #644]	; (8001494 <HAL_UART_RxCpltCallback+0x534>)
 800120e:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8001212:	601a      	str	r2, [r3, #0]
    	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, second);
 8001214:	4b9f      	ldr	r3, [pc, #636]	; (8001494 <HAL_UART_RxCpltCallback+0x534>)
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	4b9f      	ldr	r3, [pc, #636]	; (8001498 <HAL_UART_RxCpltCallback+0x538>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001220:	461a      	mov	r2, r3
 8001222:	4623      	mov	r3, r4
 8001224:	2002      	movs	r0, #2
 8001226:	f001 f859 	bl	80022dc <HAL_FLASH_Program>
    	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 4, minute);
 800122a:	4b9a      	ldr	r3, [pc, #616]	; (8001494 <HAL_UART_RxCpltCallback+0x534>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1d19      	adds	r1, r3, #4
 8001230:	4b9a      	ldr	r3, [pc, #616]	; (800149c <HAL_UART_RxCpltCallback+0x53c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001238:	461a      	mov	r2, r3
 800123a:	4623      	mov	r3, r4
 800123c:	2002      	movs	r0, #2
 800123e:	f001 f84d 	bl	80022dc <HAL_FLASH_Program>
    	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 8, hour);
 8001242:	4b94      	ldr	r3, [pc, #592]	; (8001494 <HAL_UART_RxCpltCallback+0x534>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f103 0108 	add.w	r1, r3, #8
 800124a:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <HAL_UART_RxCpltCallback+0x540>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001252:	461a      	mov	r2, r3
 8001254:	4623      	mov	r3, r4
 8001256:	2002      	movs	r0, #2
 8001258:	f001 f840 	bl	80022dc <HAL_FLASH_Program>
    	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 12, AL_second);
 800125c:	4b8d      	ldr	r3, [pc, #564]	; (8001494 <HAL_UART_RxCpltCallback+0x534>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f103 010c 	add.w	r1, r3, #12
 8001264:	4b8f      	ldr	r3, [pc, #572]	; (80014a4 <HAL_UART_RxCpltCallback+0x544>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800126c:	461a      	mov	r2, r3
 800126e:	4623      	mov	r3, r4
 8001270:	2002      	movs	r0, #2
 8001272:	f001 f833 	bl	80022dc <HAL_FLASH_Program>
    	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 16, AL_minute);
 8001276:	4b87      	ldr	r3, [pc, #540]	; (8001494 <HAL_UART_RxCpltCallback+0x534>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f103 0110 	add.w	r1, r3, #16
 800127e:	4b8a      	ldr	r3, [pc, #552]	; (80014a8 <HAL_UART_RxCpltCallback+0x548>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001286:	461a      	mov	r2, r3
 8001288:	4623      	mov	r3, r4
 800128a:	2002      	movs	r0, #2
 800128c:	f001 f826 	bl	80022dc <HAL_FLASH_Program>
    	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 20, AL_hour);
 8001290:	4b80      	ldr	r3, [pc, #512]	; (8001494 <HAL_UART_RxCpltCallback+0x534>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f103 0114 	add.w	r1, r3, #20
 8001298:	4b84      	ldr	r3, [pc, #528]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80012a0:	461a      	mov	r2, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	2002      	movs	r0, #2
 80012a6:	f001 f819 	bl	80022dc <HAL_FLASH_Program>
    	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 24, selected_music);
 80012aa:	4b7a      	ldr	r3, [pc, #488]	; (8001494 <HAL_UART_RxCpltCallback+0x534>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f103 0118 	add.w	r1, r3, #24
 80012b2:	4b7f      	ldr	r3, [pc, #508]	; (80014b0 <HAL_UART_RxCpltCallback+0x550>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f04f 0400 	mov.w	r4, #0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4623      	mov	r3, r4
 80012be:	2002      	movs	r0, #2
 80012c0:	f001 f80c 	bl	80022dc <HAL_FLASH_Program>
    	  			  HAL_FLASH_Lock();
 80012c4:	f001 f880 	bl	80023c8 <HAL_FLASH_Lock>
    	  			  setting = AP;
 80012c8:	4b7a      	ldr	r3, [pc, #488]	; (80014b4 <HAL_UART_RxCpltCallback+0x554>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
    	  			  current_state.mode = NORMAL_STATE;
 80012ce:	4b7a      	ldr	r3, [pc, #488]	; (80014b8 <HAL_UART_RxCpltCallback+0x558>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
    	  		  break;
 80012d4:	e0d8      	b.n	8001488 <HAL_UART_RxCpltCallback+0x528>
    	  		  switch(setting)
 80012d6:	4b77      	ldr	r3, [pc, #476]	; (80014b4 <HAL_UART_RxCpltCallback+0x554>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	3b01      	subs	r3, #1
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d84f      	bhi.n	8001380 <HAL_UART_RxCpltCallback+0x420>
 80012e0:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <HAL_UART_RxCpltCallback+0x388>)
 80012e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e6:	bf00      	nop
 80012e8:	080012f9 	.word	0x080012f9
 80012ec:	0800131b 	.word	0x0800131b
 80012f0:	0800133d 	.word	0x0800133d
 80012f4:	0800135f 	.word	0x0800135f
    	  			  AL_hour += 12;
 80012f8:	4b6c      	ldr	r3, [pc, #432]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	330c      	adds	r3, #12
 80012fe:	4a6b      	ldr	r2, [pc, #428]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 8001300:	6013      	str	r3, [r2, #0]
    	  			  if(AL_hour > 12 || AL_hour <= 0) AL_hour = 0;
 8001302:	4b6a      	ldr	r3, [pc, #424]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b0c      	cmp	r3, #12
 8001308:	dc03      	bgt.n	8001312 <HAL_UART_RxCpltCallback+0x3b2>
 800130a:	4b68      	ldr	r3, [pc, #416]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	dc38      	bgt.n	8001384 <HAL_UART_RxCpltCallback+0x424>
 8001312:	4b66      	ldr	r3, [pc, #408]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
    	  			  break;
 8001318:	e034      	b.n	8001384 <HAL_UART_RxCpltCallback+0x424>
    	  			  AL_hour++;
 800131a:	4b64      	ldr	r3, [pc, #400]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	4a62      	ldr	r2, [pc, #392]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 8001322:	6013      	str	r3, [r2, #0]
    	  			  if(AL_hour > 12 || AL_hour <= 0) AL_hour = 0;
 8001324:	4b61      	ldr	r3, [pc, #388]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	dc03      	bgt.n	8001334 <HAL_UART_RxCpltCallback+0x3d4>
 800132c:	4b5f      	ldr	r3, [pc, #380]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	dc29      	bgt.n	8001388 <HAL_UART_RxCpltCallback+0x428>
 8001334:	4b5d      	ldr	r3, [pc, #372]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
    	  			  break;
 800133a:	e025      	b.n	8001388 <HAL_UART_RxCpltCallback+0x428>
    	  			  AL_minute++;
 800133c:	4b5a      	ldr	r3, [pc, #360]	; (80014a8 <HAL_UART_RxCpltCallback+0x548>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	4a59      	ldr	r2, [pc, #356]	; (80014a8 <HAL_UART_RxCpltCallback+0x548>)
 8001344:	6013      	str	r3, [r2, #0]
    	  			  if(AL_minute > 60 || AL_minute <= 0) AL_minute = 0;
 8001346:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <HAL_UART_RxCpltCallback+0x548>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b3c      	cmp	r3, #60	; 0x3c
 800134c:	dc03      	bgt.n	8001356 <HAL_UART_RxCpltCallback+0x3f6>
 800134e:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <HAL_UART_RxCpltCallback+0x548>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	dc1a      	bgt.n	800138c <HAL_UART_RxCpltCallback+0x42c>
 8001356:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <HAL_UART_RxCpltCallback+0x548>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
    	  			  break;
 800135c:	e016      	b.n	800138c <HAL_UART_RxCpltCallback+0x42c>
    	  			  AL_second++;
 800135e:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <HAL_UART_RxCpltCallback+0x544>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <HAL_UART_RxCpltCallback+0x544>)
 8001366:	6013      	str	r3, [r2, #0]
    	  			  if(AL_second > 60 || AL_second <= 0) AL_second = 0;
 8001368:	4b4e      	ldr	r3, [pc, #312]	; (80014a4 <HAL_UART_RxCpltCallback+0x544>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b3c      	cmp	r3, #60	; 0x3c
 800136e:	dc03      	bgt.n	8001378 <HAL_UART_RxCpltCallback+0x418>
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <HAL_UART_RxCpltCallback+0x544>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	dc0b      	bgt.n	8001390 <HAL_UART_RxCpltCallback+0x430>
 8001378:	4b4a      	ldr	r3, [pc, #296]	; (80014a4 <HAL_UART_RxCpltCallback+0x544>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
    	  			  break;
 800137e:	e007      	b.n	8001390 <HAL_UART_RxCpltCallback+0x430>
    	  			  break;
 8001380:	bf00      	nop
 8001382:	e086      	b.n	8001492 <HAL_UART_RxCpltCallback+0x532>
    	  			  break;
 8001384:	bf00      	nop
 8001386:	e084      	b.n	8001492 <HAL_UART_RxCpltCallback+0x532>
    	  			  break;
 8001388:	bf00      	nop
 800138a:	e082      	b.n	8001492 <HAL_UART_RxCpltCallback+0x532>
    	  			  break;
 800138c:	bf00      	nop
 800138e:	e080      	b.n	8001492 <HAL_UART_RxCpltCallback+0x532>
    	  			  break;
 8001390:	bf00      	nop
    	  		  break;
 8001392:	e07e      	b.n	8001492 <HAL_UART_RxCpltCallback+0x532>
    	  		  switch(setting)
 8001394:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <HAL_UART_RxCpltCallback+0x554>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	2b03      	cmp	r3, #3
 800139c:	d84e      	bhi.n	800143c <HAL_UART_RxCpltCallback+0x4dc>
 800139e:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <HAL_UART_RxCpltCallback+0x444>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	080013b5 	.word	0x080013b5
 80013a8:	080013d7 	.word	0x080013d7
 80013ac:	080013f9 	.word	0x080013f9
 80013b0:	0800141b 	.word	0x0800141b
    	  			  AL_hour -= 12;
 80013b4:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3b0c      	subs	r3, #12
 80013ba:	4a3c      	ldr	r2, [pc, #240]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 80013bc:	6013      	str	r3, [r2, #0]
    	  			  if(AL_hour > 12 || AL_hour <= 0) AL_hour = 0;
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	dc03      	bgt.n	80013ce <HAL_UART_RxCpltCallback+0x46e>
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	dc38      	bgt.n	8001440 <HAL_UART_RxCpltCallback+0x4e0>
 80013ce:	4b37      	ldr	r3, [pc, #220]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
    	  			  break;
 80013d4:	e034      	b.n	8001440 <HAL_UART_RxCpltCallback+0x4e0>
    	  			  AL_hour--;
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3b01      	subs	r3, #1
 80013dc:	4a33      	ldr	r2, [pc, #204]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 80013de:	6013      	str	r3, [r2, #0]
    	  			  if(AL_hour > 12 || AL_hour <= 0) AL_hour = 0;
 80013e0:	4b32      	ldr	r3, [pc, #200]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b0c      	cmp	r3, #12
 80013e6:	dc03      	bgt.n	80013f0 <HAL_UART_RxCpltCallback+0x490>
 80013e8:	4b30      	ldr	r3, [pc, #192]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dc29      	bgt.n	8001444 <HAL_UART_RxCpltCallback+0x4e4>
 80013f0:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_UART_RxCpltCallback+0x54c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
    	  			  break;
 80013f6:	e025      	b.n	8001444 <HAL_UART_RxCpltCallback+0x4e4>
    	  			  AL_minute--;
 80013f8:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <HAL_UART_RxCpltCallback+0x548>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <HAL_UART_RxCpltCallback+0x548>)
 8001400:	6013      	str	r3, [r2, #0]
    	  			  if(AL_minute > 60 || AL_minute <= 0) AL_minute = 0;
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <HAL_UART_RxCpltCallback+0x548>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b3c      	cmp	r3, #60	; 0x3c
 8001408:	dc03      	bgt.n	8001412 <HAL_UART_RxCpltCallback+0x4b2>
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <HAL_UART_RxCpltCallback+0x548>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	dc1a      	bgt.n	8001448 <HAL_UART_RxCpltCallback+0x4e8>
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <HAL_UART_RxCpltCallback+0x548>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
    	  			  break;
 8001418:	e016      	b.n	8001448 <HAL_UART_RxCpltCallback+0x4e8>
    	  			  AL_second--;
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_UART_RxCpltCallback+0x544>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3b01      	subs	r3, #1
 8001420:	4a20      	ldr	r2, [pc, #128]	; (80014a4 <HAL_UART_RxCpltCallback+0x544>)
 8001422:	6013      	str	r3, [r2, #0]
    	  			  if(AL_second > 60 || AL_second <= 0) AL_second = 0;
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <HAL_UART_RxCpltCallback+0x544>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b3c      	cmp	r3, #60	; 0x3c
 800142a:	dc03      	bgt.n	8001434 <HAL_UART_RxCpltCallback+0x4d4>
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_UART_RxCpltCallback+0x544>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	dc0b      	bgt.n	800144c <HAL_UART_RxCpltCallback+0x4ec>
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_UART_RxCpltCallback+0x544>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
    	  			  break;
 800143a:	e007      	b.n	800144c <HAL_UART_RxCpltCallback+0x4ec>
    	  			  break;
 800143c:	bf00      	nop
 800143e:	e028      	b.n	8001492 <HAL_UART_RxCpltCallback+0x532>
    	  			  break;
 8001440:	bf00      	nop
 8001442:	e026      	b.n	8001492 <HAL_UART_RxCpltCallback+0x532>
    	  			  break;
 8001444:	bf00      	nop
 8001446:	e024      	b.n	8001492 <HAL_UART_RxCpltCallback+0x532>
    	  			  break;
 8001448:	bf00      	nop
 800144a:	e022      	b.n	8001492 <HAL_UART_RxCpltCallback+0x532>
    	  			  break;
 800144c:	bf00      	nop
    	  		  break;
 800144e:	e020      	b.n	8001492 <HAL_UART_RxCpltCallback+0x532>
    	  		  setting++;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_UART_RxCpltCallback+0x554>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_UART_RxCpltCallback+0x554>)
 800145a:	701a      	strb	r2, [r3, #0]
    	  		  if(setting == 5) setting = AP;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_UART_RxCpltCallback+0x554>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b05      	cmp	r3, #5
 8001462:	d113      	bne.n	800148c <HAL_UART_RxCpltCallback+0x52c>
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_UART_RxCpltCallback+0x554>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
    	  		  break;
 800146a:	e00f      	b.n	800148c <HAL_UART_RxCpltCallback+0x52c>
    	  		  setting--;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_UART_RxCpltCallback+0x554>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_UART_RxCpltCallback+0x554>)
 8001476:	701a      	strb	r2, [r3, #0]
    	  		  if(setting == NOT) setting = SET_S;
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_UART_RxCpltCallback+0x554>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d107      	bne.n	8001490 <HAL_UART_RxCpltCallback+0x530>
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_UART_RxCpltCallback+0x554>)
 8001482:	2204      	movs	r2, #4
 8001484:	701a      	strb	r2, [r3, #0]
    	  		  break;
 8001486:	e003      	b.n	8001490 <HAL_UART_RxCpltCallback+0x530>
    	  		  break;
 8001488:	bf00      	nop
 800148a:	e0f2      	b.n	8001672 <HAL_UART_RxCpltCallback+0x712>
    	  		  break;
 800148c:	bf00      	nop
 800148e:	e0f0      	b.n	8001672 <HAL_UART_RxCpltCallback+0x712>
    	  		  break;
 8001490:	bf00      	nop
    	  }
    	  break;
 8001492:	e0ee      	b.n	8001672 <HAL_UART_RxCpltCallback+0x712>
 8001494:	20000090 	.word	0x20000090
 8001498:	20000134 	.word	0x20000134
 800149c:	2000016c 	.word	0x2000016c
 80014a0:	20000174 	.word	0x20000174
 80014a4:	20000140 	.word	0x20000140
 80014a8:	200000b8 	.word	0x200000b8
 80014ac:	200001f0 	.word	0x200001f0
 80014b0:	200001f4 	.word	0x200001f4
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000104 	.word	0x20000104
      case MUSIC_SELECT:
    	  switch(key_value)
 80014bc:	4b71      	ldr	r3, [pc, #452]	; (8001684 <HAL_UART_RxCpltCallback+0x724>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b41      	cmp	r3, #65	; 0x41
 80014c2:	f000 809b 	beq.w	80015fc <HAL_UART_RxCpltCallback+0x69c>
 80014c6:	2b42      	cmp	r3, #66	; 0x42
 80014c8:	f000 80b6 	beq.w	8001638 <HAL_UART_RxCpltCallback+0x6d8>
 80014cc:	2b0d      	cmp	r3, #13
 80014ce:	d000      	beq.n	80014d2 <HAL_UART_RxCpltCallback+0x572>
	  	  		  memset(uart_buf,0,sizeof(uart_buf));
	  	  		  sprintf(uart_buf,"Spring Water selected\r\n");
	  	  		  HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
	  	  		  break;
    	  }
    	  break;
 80014d0:	e0cf      	b.n	8001672 <HAL_UART_RxCpltCallback+0x712>
	  			  HAL_FLASH_Unlock();
 80014d2:	f000 ff57 	bl	8002384 <HAL_FLASH_Unlock>
	  			  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80014d6:	4b6c      	ldr	r3, [pc, #432]	; (8001688 <HAL_UART_RxCpltCallback+0x728>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
	  			  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80014dc:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <HAL_UART_RxCpltCallback+0x728>)
 80014de:	2202      	movs	r2, #2
 80014e0:	611a      	str	r2, [r3, #16]
	  			  EraseInitStruct.Sector        = FLASH_SECTOR_12;
 80014e2:	4b69      	ldr	r3, [pc, #420]	; (8001688 <HAL_UART_RxCpltCallback+0x728>)
 80014e4:	220c      	movs	r2, #12
 80014e6:	609a      	str	r2, [r3, #8]
	  			  EraseInitStruct.NbSectors     = FLASH_SECTOR_12;
 80014e8:	4b67      	ldr	r3, [pc, #412]	; (8001688 <HAL_UART_RxCpltCallback+0x728>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	60da      	str	r2, [r3, #12]
	  			  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80014ee:	4967      	ldr	r1, [pc, #412]	; (800168c <HAL_UART_RxCpltCallback+0x72c>)
 80014f0:	4865      	ldr	r0, [pc, #404]	; (8001688 <HAL_UART_RxCpltCallback+0x728>)
 80014f2:	f001 f8b7 	bl	8002664 <HAL_FLASHEx_Erase>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d018      	beq.n	800152e <HAL_UART_RxCpltCallback+0x5ce>
	  				memset(uart_buf,0,sizeof(uart_buf));
 80014fc:	2228      	movs	r2, #40	; 0x28
 80014fe:	2100      	movs	r1, #0
 8001500:	4863      	ldr	r0, [pc, #396]	; (8001690 <HAL_UART_RxCpltCallback+0x730>)
 8001502:	f003 fdcd 	bl	80050a0 <memset>
	  				sprintf(uart_buf,"HAL_FLASHEx_Erase ERROR\r\n");
 8001506:	4a62      	ldr	r2, [pc, #392]	; (8001690 <HAL_UART_RxCpltCallback+0x730>)
 8001508:	4b62      	ldr	r3, [pc, #392]	; (8001694 <HAL_UART_RxCpltCallback+0x734>)
 800150a:	4615      	mov	r5, r2
 800150c:	461c      	mov	r4, r3
 800150e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001510:	6028      	str	r0, [r5, #0]
 8001512:	6069      	str	r1, [r5, #4]
 8001514:	60aa      	str	r2, [r5, #8]
 8001516:	60eb      	str	r3, [r5, #12]
 8001518:	cc03      	ldmia	r4!, {r0, r1}
 800151a:	6128      	str	r0, [r5, #16]
 800151c:	6169      	str	r1, [r5, #20]
 800151e:	8823      	ldrh	r3, [r4, #0]
 8001520:	832b      	strh	r3, [r5, #24]
	  				HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 8001522:	2228      	movs	r2, #40	; 0x28
 8001524:	495a      	ldr	r1, [pc, #360]	; (8001690 <HAL_UART_RxCpltCallback+0x730>)
 8001526:	485c      	ldr	r0, [pc, #368]	; (8001698 <HAL_UART_RxCpltCallback+0x738>)
 8001528:	f002 ff43 	bl	80043b2 <HAL_UART_Transmit_IT>
	  				return -1;
 800152c:	e0a6      	b.n	800167c <HAL_UART_RxCpltCallback+0x71c>
	  			  Address = (0x08100000);
 800152e:	4b5b      	ldr	r3, [pc, #364]	; (800169c <HAL_UART_RxCpltCallback+0x73c>)
 8001530:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8001534:	601a      	str	r2, [r3, #0]
	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, second);
 8001536:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_UART_RxCpltCallback+0x73c>)
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	4b59      	ldr	r3, [pc, #356]	; (80016a0 <HAL_UART_RxCpltCallback+0x740>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001542:	461a      	mov	r2, r3
 8001544:	4623      	mov	r3, r4
 8001546:	2002      	movs	r0, #2
 8001548:	f000 fec8 	bl	80022dc <HAL_FLASH_Program>
	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 4, minute);
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <HAL_UART_RxCpltCallback+0x73c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1d19      	adds	r1, r3, #4
 8001552:	4b54      	ldr	r3, [pc, #336]	; (80016a4 <HAL_UART_RxCpltCallback+0x744>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800155a:	461a      	mov	r2, r3
 800155c:	4623      	mov	r3, r4
 800155e:	2002      	movs	r0, #2
 8001560:	f000 febc 	bl	80022dc <HAL_FLASH_Program>
	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 8, hour);
 8001564:	4b4d      	ldr	r3, [pc, #308]	; (800169c <HAL_UART_RxCpltCallback+0x73c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f103 0108 	add.w	r1, r3, #8
 800156c:	4b4e      	ldr	r3, [pc, #312]	; (80016a8 <HAL_UART_RxCpltCallback+0x748>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001574:	461a      	mov	r2, r3
 8001576:	4623      	mov	r3, r4
 8001578:	2002      	movs	r0, #2
 800157a:	f000 feaf 	bl	80022dc <HAL_FLASH_Program>
	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 12, AL_second);
 800157e:	4b47      	ldr	r3, [pc, #284]	; (800169c <HAL_UART_RxCpltCallback+0x73c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f103 010c 	add.w	r1, r3, #12
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_UART_RxCpltCallback+0x74c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800158e:	461a      	mov	r2, r3
 8001590:	4623      	mov	r3, r4
 8001592:	2002      	movs	r0, #2
 8001594:	f000 fea2 	bl	80022dc <HAL_FLASH_Program>
	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 16, AL_minute);
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <HAL_UART_RxCpltCallback+0x73c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f103 0110 	add.w	r1, r3, #16
 80015a0:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <HAL_UART_RxCpltCallback+0x750>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80015a8:	461a      	mov	r2, r3
 80015aa:	4623      	mov	r3, r4
 80015ac:	2002      	movs	r0, #2
 80015ae:	f000 fe95 	bl	80022dc <HAL_FLASH_Program>
	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 20, AL_hour);
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_UART_RxCpltCallback+0x73c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f103 0114 	add.w	r1, r3, #20
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <HAL_UART_RxCpltCallback+0x754>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80015c2:	461a      	mov	r2, r3
 80015c4:	4623      	mov	r3, r4
 80015c6:	2002      	movs	r0, #2
 80015c8:	f000 fe88 	bl	80022dc <HAL_FLASH_Program>
	  			  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address + 24, selected_music);
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_UART_RxCpltCallback+0x73c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f103 0118 	add.w	r1, r3, #24
 80015d4:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <HAL_UART_RxCpltCallback+0x758>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f04f 0400 	mov.w	r4, #0
 80015dc:	461a      	mov	r2, r3
 80015de:	4623      	mov	r3, r4
 80015e0:	2002      	movs	r0, #2
 80015e2:	f000 fe7b 	bl	80022dc <HAL_FLASH_Program>
	  			  HAL_FLASH_Lock();
 80015e6:	f000 feef 	bl	80023c8 <HAL_FLASH_Lock>
	  	  		  if(time_interval>= NORMAL_CLICK_MIN) current_state.mode = NORMAL_STATE;
 80015ea:	4b34      	ldr	r3, [pc, #208]	; (80016bc <HAL_UART_RxCpltCallback+0x75c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015f2:	d33b      	bcc.n	800166c <HAL_UART_RxCpltCallback+0x70c>
 80015f4:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <HAL_UART_RxCpltCallback+0x760>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
	  	  		  break;
 80015fa:	e037      	b.n	800166c <HAL_UART_RxCpltCallback+0x70c>
	  	  		  selected_music = 0;	//Three Bears
 80015fc:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <HAL_UART_RxCpltCallback+0x758>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
	  	  		  memset(uart_buf,0,sizeof(uart_buf));
 8001602:	2228      	movs	r2, #40	; 0x28
 8001604:	2100      	movs	r1, #0
 8001606:	4822      	ldr	r0, [pc, #136]	; (8001690 <HAL_UART_RxCpltCallback+0x730>)
 8001608:	f003 fd4a 	bl	80050a0 <memset>
	  	  		  sprintf(uart_buf,"Three Bears selected\r\n");
 800160c:	4a20      	ldr	r2, [pc, #128]	; (8001690 <HAL_UART_RxCpltCallback+0x730>)
 800160e:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <HAL_UART_RxCpltCallback+0x764>)
 8001610:	4614      	mov	r4, r2
 8001612:	461d      	mov	r5, r3
 8001614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001616:	6020      	str	r0, [r4, #0]
 8001618:	6061      	str	r1, [r4, #4]
 800161a:	60a2      	str	r2, [r4, #8]
 800161c:	60e3      	str	r3, [r4, #12]
 800161e:	6828      	ldr	r0, [r5, #0]
 8001620:	6120      	str	r0, [r4, #16]
 8001622:	88ab      	ldrh	r3, [r5, #4]
 8001624:	79aa      	ldrb	r2, [r5, #6]
 8001626:	82a3      	strh	r3, [r4, #20]
 8001628:	4613      	mov	r3, r2
 800162a:	75a3      	strb	r3, [r4, #22]
	  	  		  HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 800162c:	2228      	movs	r2, #40	; 0x28
 800162e:	4918      	ldr	r1, [pc, #96]	; (8001690 <HAL_UART_RxCpltCallback+0x730>)
 8001630:	4819      	ldr	r0, [pc, #100]	; (8001698 <HAL_UART_RxCpltCallback+0x738>)
 8001632:	f002 febe 	bl	80043b2 <HAL_UART_Transmit_IT>
	  	  		  break;
 8001636:	e01a      	b.n	800166e <HAL_UART_RxCpltCallback+0x70e>
	  	  		  selected_music = 1;	//Spring Water
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <HAL_UART_RxCpltCallback+0x758>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]
	  	  		  memset(uart_buf,0,sizeof(uart_buf));
 800163e:	2228      	movs	r2, #40	; 0x28
 8001640:	2100      	movs	r1, #0
 8001642:	4813      	ldr	r0, [pc, #76]	; (8001690 <HAL_UART_RxCpltCallback+0x730>)
 8001644:	f003 fd2c 	bl	80050a0 <memset>
	  	  		  sprintf(uart_buf,"Spring Water selected\r\n");
 8001648:	4a11      	ldr	r2, [pc, #68]	; (8001690 <HAL_UART_RxCpltCallback+0x730>)
 800164a:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <HAL_UART_RxCpltCallback+0x768>)
 800164c:	4615      	mov	r5, r2
 800164e:	461c      	mov	r4, r3
 8001650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001652:	6028      	str	r0, [r5, #0]
 8001654:	6069      	str	r1, [r5, #4]
 8001656:	60aa      	str	r2, [r5, #8]
 8001658:	60eb      	str	r3, [r5, #12]
 800165a:	cc03      	ldmia	r4!, {r0, r1}
 800165c:	6128      	str	r0, [r5, #16]
 800165e:	6169      	str	r1, [r5, #20]
	  	  		  HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 8001660:	2228      	movs	r2, #40	; 0x28
 8001662:	490b      	ldr	r1, [pc, #44]	; (8001690 <HAL_UART_RxCpltCallback+0x730>)
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <HAL_UART_RxCpltCallback+0x738>)
 8001666:	f002 fea4 	bl	80043b2 <HAL_UART_Transmit_IT>
	  	  		  break;
 800166a:	e000      	b.n	800166e <HAL_UART_RxCpltCallback+0x70e>
	  	  		  break;
 800166c:	bf00      	nop
    	  break;
 800166e:	e000      	b.n	8001672 <HAL_UART_RxCpltCallback+0x712>
      default:
    	  break;
 8001670:	bf00      	nop
    }


	/* Receive one byte in interrupt mode */
	HAL_UART_Receive_IT(&huart3, &key_value, 1);
 8001672:	2201      	movs	r2, #1
 8001674:	4903      	ldr	r1, [pc, #12]	; (8001684 <HAL_UART_RxCpltCallback+0x724>)
 8001676:	4808      	ldr	r0, [pc, #32]	; (8001698 <HAL_UART_RxCpltCallback+0x738>)
 8001678:	f002 fee0 	bl	800443c <HAL_UART_Receive_IT>
  }
}
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bdb0      	pop	{r4, r5, r7, pc}
 8001682:	bf00      	nop
 8001684:	20000106 	.word	0x20000106
 8001688:	20000098 	.word	0x20000098
 800168c:	20000094 	.word	0x20000094
 8001690:	20000144 	.word	0x20000144
 8001694:	080059e4 	.word	0x080059e4
 8001698:	200000c0 	.word	0x200000c0
 800169c:	20000090 	.word	0x20000090
 80016a0:	20000134 	.word	0x20000134
 80016a4:	2000016c 	.word	0x2000016c
 80016a8:	20000174 	.word	0x20000174
 80016ac:	20000140 	.word	0x20000140
 80016b0:	200000b8 	.word	0x200000b8
 80016b4:	200001f0 	.word	0x200001f0
 80016b8:	200001f4 	.word	0x200001f4
 80016bc:	20000138 	.word	0x20000138
 80016c0:	20000104 	.word	0x20000104
 80016c4:	08005a00 	.word	0x08005a00
 80016c8:	08005a18 	.word	0x08005a18

080016cc <mode_analysis>:

//타임세팅, 알람세팅으로 넘어가는 여부 판별 함수 (음악선택은 제외)
void mode_analysis(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    if(time_interval>=LONG_CLICK_MIN && time_interval <=LONG_CLICK_MAX)
 80016d0:	4b23      	ldr	r3, [pc, #140]	; (8001760 <mode_analysis+0x94>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b13      	cmp	r3, #19
 80016d6:	d909      	bls.n	80016ec <mode_analysis+0x20>
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <mode_analysis+0x94>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b32      	cmp	r3, #50	; 0x32
 80016de:	d805      	bhi.n	80016ec <mode_analysis+0x20>
    {
    	long_key_count++;
 80016e0:	4b20      	ldr	r3, [pc, #128]	; (8001764 <mode_analysis+0x98>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <mode_analysis+0x98>)
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e01b      	b.n	8001724 <mode_analysis+0x58>
    }
    else if(time_interval>= NORMAL_CLICK_MIN)
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <mode_analysis+0x94>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016f4:	d316      	bcc.n	8001724 <mode_analysis+0x58>
    {
      current_state.mode = TIME_SETTING;
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <mode_analysis+0x9c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
      long_key_count = 0;
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <mode_analysis+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]

      memset(uart_buf,0,sizeof(uart_buf));
 8001702:	2228      	movs	r2, #40	; 0x28
 8001704:	2100      	movs	r1, #0
 8001706:	4819      	ldr	r0, [pc, #100]	; (800176c <mode_analysis+0xa0>)
 8001708:	f003 fcca 	bl	80050a0 <memset>
      sprintf(uart_buf,"TIME_SETTING  %d\r\n",time_interval);
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <mode_analysis+0x94>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4917      	ldr	r1, [pc, #92]	; (8001770 <mode_analysis+0xa4>)
 8001714:	4815      	ldr	r0, [pc, #84]	; (800176c <mode_analysis+0xa0>)
 8001716:	f003 fccb 	bl	80050b0 <siprintf>
      HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 800171a:	2228      	movs	r2, #40	; 0x28
 800171c:	4913      	ldr	r1, [pc, #76]	; (800176c <mode_analysis+0xa0>)
 800171e:	4815      	ldr	r0, [pc, #84]	; (8001774 <mode_analysis+0xa8>)
 8001720:	f002 fe47 	bl	80043b2 <HAL_UART_Transmit_IT>

    }

    if(long_key_count>=LONG_CLICK_COUNT)
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <mode_analysis+0x98>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b1d      	cmp	r3, #29
 800172a:	d916      	bls.n	800175a <mode_analysis+0x8e>
    {
      current_state.mode  = ALARM_TIME_SETTING;
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <mode_analysis+0x9c>)
 800172e:	2202      	movs	r2, #2
 8001730:	701a      	strb	r2, [r3, #0]
      long_key_count = 0;
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <mode_analysis+0x98>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

      memset(uart_buf,0,sizeof(uart_buf));
 8001738:	2228      	movs	r2, #40	; 0x28
 800173a:	2100      	movs	r1, #0
 800173c:	480b      	ldr	r0, [pc, #44]	; (800176c <mode_analysis+0xa0>)
 800173e:	f003 fcaf 	bl	80050a0 <memset>
      sprintf(uart_buf,"ALARM_TIME_SETTING  %d\r\n",time_interval);
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <mode_analysis+0x94>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	490b      	ldr	r1, [pc, #44]	; (8001778 <mode_analysis+0xac>)
 800174a:	4808      	ldr	r0, [pc, #32]	; (800176c <mode_analysis+0xa0>)
 800174c:	f003 fcb0 	bl	80050b0 <siprintf>
      HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 8001750:	2228      	movs	r2, #40	; 0x28
 8001752:	4906      	ldr	r1, [pc, #24]	; (800176c <mode_analysis+0xa0>)
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <mode_analysis+0xa8>)
 8001756:	f002 fe2c 	bl	80043b2 <HAL_UART_Transmit_IT>
    }
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000138 	.word	0x20000138
 8001764:	2000019c 	.word	0x2000019c
 8001768:	20000104 	.word	0x20000104
 800176c:	20000144 	.word	0x20000144
 8001770:	08005a30 	.word	0x08005a30
 8001774:	200000c0 	.word	0x200000c0
 8001778:	08005a44 	.word	0x08005a44

0800177c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001780:	f000 fc06 	bl	8001f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001784:	f000 f864 	bl	8001850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001788:	f000 f988 	bl	8001a9c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800178c:	f000 f95c 	bl	8001a48 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001790:	f000 f8e6 	bl	8001960 <MX_RTC_Init>
  MX_TIM2_Init();
 8001794:	f000 f90a 	bl	80019ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim2);
 8001798:	4821      	ldr	r0, [pc, #132]	; (8001820 <main+0xa4>)
 800179a:	f002 f9bc 	bl	8003b16 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800179e:	4820      	ldr	r0, [pc, #128]	; (8001820 <main+0xa4>)
 80017a0:	f002 f9e4 	bl	8003b6c <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart3,&rcv_byte,1);	//UART 수신 인터럽트 초기설정 이거 없으면 인터럽트 시작 안함
 80017a4:	2201      	movs	r2, #1
 80017a6:	491f      	ldr	r1, [pc, #124]	; (8001824 <main+0xa8>)
 80017a8:	481f      	ldr	r0, [pc, #124]	; (8001828 <main+0xac>)
 80017aa:	f002 fe47 	bl	800443c <HAL_UART_Receive_IT>
  
  current_state.mode = NORMAL_STATE;
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <main+0xb0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
  current_state.button = NO_KEY;
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <main+0xb0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	705a      	strb	r2, [r3, #1]

  flash_addr = (uint32_t *)START_ADDR;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <main+0xb4>)
 80017bc:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 80017c0:	601a      	str	r2, [r3, #0]

  second = *(flash_addr);
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <main+0xb4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <main+0xb8>)
 80017cc:	601a      	str	r2, [r3, #0]
  minute = *(flash_addr + 1);
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <main+0xb4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3304      	adds	r3, #4
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <main+0xbc>)
 80017da:	601a      	str	r2, [r3, #0]
  hour = *(flash_addr + 2);
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <main+0xb4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3308      	adds	r3, #8
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <main+0xc0>)
 80017e8:	601a      	str	r2, [r3, #0]
  AL_second = *(flash_addr + 3);
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <main+0xb4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	330c      	adds	r3, #12
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <main+0xc4>)
 80017f6:	601a      	str	r2, [r3, #0]
  AL_minute = *(flash_addr + 4);
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <main+0xb4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3310      	adds	r3, #16
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <main+0xc8>)
 8001804:	601a      	str	r2, [r3, #0]
  AL_hour = *(flash_addr + 5);
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <main+0xb4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3314      	adds	r3, #20
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <main+0xcc>)
 8001812:	601a      	str	r2, [r3, #0]
  selected_music = *(flash_addr + 6);
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <main+0xb4>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <main+0xd0>)
 800181c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800181e:	e7fe      	b.n	800181e <main+0xa2>
 8001820:	200001a0 	.word	0x200001a0
 8001824:	2000010c 	.word	0x2000010c
 8001828:	200000c0 	.word	0x200000c0
 800182c:	20000104 	.word	0x20000104
 8001830:	20000108 	.word	0x20000108
 8001834:	20000134 	.word	0x20000134
 8001838:	2000016c 	.word	0x2000016c
 800183c:	20000174 	.word	0x20000174
 8001840:	20000140 	.word	0x20000140
 8001844:	200000b8 	.word	0x200000b8
 8001848:	200001f0 	.word	0x200001f0
 800184c:	200001f4 	.word	0x200001f4

08001850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0a0      	sub	sp, #128	; 0x80
 8001854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001856:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800185a:	2230      	movs	r2, #48	; 0x30
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fc1e 	bl	80050a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001864:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2230      	movs	r2, #48	; 0x30
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fc0f 	bl	80050a0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b34      	ldr	r3, [pc, #208]	; (8001958 <SystemClock_Config+0x108>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a33      	ldr	r2, [pc, #204]	; (8001958 <SystemClock_Config+0x108>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b31      	ldr	r3, [pc, #196]	; (8001958 <SystemClock_Config+0x108>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <SystemClock_Config+0x10c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a2d      	ldr	r2, [pc, #180]	; (800195c <SystemClock_Config+0x10c>)
 80018a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <SystemClock_Config+0x10c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80018ba:	2306      	movs	r3, #6
 80018bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80018be:	2301      	movs	r3, #1
 80018c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c2:	2301      	movs	r3, #1
 80018c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c6:	2310      	movs	r3, #16
 80018c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ca:	2302      	movs	r3, #2
 80018cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ce:	2300      	movs	r3, #0
 80018d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018d2:	2308      	movs	r3, #8
 80018d4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018d6:	23b4      	movs	r3, #180	; 0xb4
 80018d8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018da:	2302      	movs	r3, #2
 80018dc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018de:	2307      	movs	r3, #7
 80018e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fa10 	bl	8002d0c <HAL_RCC_OscConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018f2:	f000 f9e3 	bl	8001cbc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018f6:	f001 f9b9 	bl	8002c6c <HAL_PWREx_EnableOverDrive>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001900:	f000 f9dc 	bl	8001cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001904:	230f      	movs	r3, #15
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001908:	2302      	movs	r3, #2
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800190c:	2300      	movs	r3, #0
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001910:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800191c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001920:	2105      	movs	r1, #5
 8001922:	4618      	mov	r0, r3
 8001924:	f001 fc62 	bl	80031ec <HAL_RCC_ClockConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800192e:	f000 f9c5 	bl	8001cbc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001932:	2320      	movs	r3, #32
 8001934:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	4618      	mov	r0, r3
 8001942:	f001 fe45 	bl	80035d0 <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <SystemClock_Config+0x100>
  {
    Error_Handler();
 800194c:	f000 f9b6 	bl	8001cbc <Error_Handler>
  }
}
 8001950:	bf00      	nop
 8001952:	3780      	adds	r7, #128	; 0x80
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	40007000 	.word	0x40007000

08001960 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_RTC_Init+0x44>)
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <MX_RTC_Init+0x48>)
 8001968:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_RTC_Init+0x44>)
 800196c:	2200      	movs	r2, #0
 800196e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_RTC_Init+0x44>)
 8001972:	227f      	movs	r2, #127	; 0x7f
 8001974:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_RTC_Init+0x44>)
 8001978:	22ff      	movs	r2, #255	; 0xff
 800197a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_RTC_Init+0x44>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_RTC_Init+0x44>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_RTC_Init+0x44>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_RTC_Init+0x44>)
 8001990:	f001 ffdc 	bl	800394c <HAL_RTC_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800199a:	f000 f98f 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000178 	.word	0x20000178
 80019a8:	40002800 	.word	0x40002800

080019ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	463b      	mov	r3, r7
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <MX_TIM2_Init+0x98>)
 80019ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <MX_TIM2_Init+0x98>)
 80019d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_TIM2_Init+0x98>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900;
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <MX_TIM2_Init+0x98>)
 80019e0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80019e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <MX_TIM2_Init+0x98>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <MX_TIM2_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019f2:	4814      	ldr	r0, [pc, #80]	; (8001a44 <MX_TIM2_Init+0x98>)
 80019f4:	f002 f88f 	bl	8003b16 <HAL_TIM_Base_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019fe:	f000 f95d 	bl	8001cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480d      	ldr	r0, [pc, #52]	; (8001a44 <MX_TIM2_Init+0x98>)
 8001a10:	f002 f9d8 	bl	8003dc4 <HAL_TIM_ConfigClockSource>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a1a:	f000 f94f 	bl	8001cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <MX_TIM2_Init+0x98>)
 8001a2c:	f002 fbe4 	bl	80041f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a36:	f000 f941 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200001a0 	.word	0x200001a0

08001a48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_USART3_UART_Init+0x4c>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <MX_USART3_UART_Init+0x50>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <MX_USART3_UART_Init+0x4c>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_USART3_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_USART3_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_USART3_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_USART3_UART_Init+0x4c>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_USART3_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_USART3_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_USART3_UART_Init+0x4c>)
 8001a80:	f002 fc4a 	bl	8004318 <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a8a:	f000 f917 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200000c0 	.word	0x200000c0
 8001a98:	40004800 	.word	0x40004800

08001a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	4b7b      	ldr	r3, [pc, #492]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a7a      	ldr	r2, [pc, #488]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b78      	ldr	r3, [pc, #480]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	61bb      	str	r3, [r7, #24]
 8001acc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	4b74      	ldr	r3, [pc, #464]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a73      	ldr	r2, [pc, #460]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b71      	ldr	r3, [pc, #452]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b6d      	ldr	r3, [pc, #436]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a6c      	ldr	r2, [pc, #432]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a65      	ldr	r2, [pc, #404]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a5e      	ldr	r2, [pc, #376]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b5c      	ldr	r3, [pc, #368]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a57      	ldr	r2, [pc, #348]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b55      	ldr	r3, [pc, #340]	; (8001ca4 <MX_GPIO_Init+0x208>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b60:	4851      	ldr	r0, [pc, #324]	; (8001ca8 <MX_GPIO_Init+0x20c>)
 8001b62:	f001 f869 	bl	8002c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2140      	movs	r1, #64	; 0x40
 8001b6a:	4850      	ldr	r0, [pc, #320]	; (8001cac <MX_GPIO_Init+0x210>)
 8001b6c:	f001 f864 	bl	8002c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b76:	4b4e      	ldr	r3, [pc, #312]	; (8001cb0 <MX_GPIO_Init+0x214>)
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 031c 	add.w	r3, r7, #28
 8001b82:	4619      	mov	r1, r3
 8001b84:	484b      	ldr	r0, [pc, #300]	; (8001cb4 <MX_GPIO_Init+0x218>)
 8001b86:	f000 fead 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b8a:	2332      	movs	r3, #50	; 0x32
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b9a:	230b      	movs	r3, #11
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4843      	ldr	r0, [pc, #268]	; (8001cb4 <MX_GPIO_Init+0x218>)
 8001ba6:	f000 fe9d 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001baa:	2386      	movs	r3, #134	; 0x86
 8001bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bba:	230b      	movs	r3, #11
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	483c      	ldr	r0, [pc, #240]	; (8001cb8 <MX_GPIO_Init+0x21c>)
 8001bc6:	f000 fe8d 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001bca:	f244 0381 	movw	r3, #16513	; 0x4081
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4831      	ldr	r0, [pc, #196]	; (8001ca8 <MX_GPIO_Init+0x20c>)
 8001be4:	f000 fe7e 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bfa:	230b      	movs	r3, #11
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4828      	ldr	r0, [pc, #160]	; (8001ca8 <MX_GPIO_Init+0x20c>)
 8001c06:	f000 fe6d 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c0a:	2340      	movs	r3, #64	; 0x40
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4822      	ldr	r0, [pc, #136]	; (8001cac <MX_GPIO_Init+0x210>)
 8001c22:	f000 fe5f 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	481c      	ldr	r0, [pc, #112]	; (8001cac <MX_GPIO_Init+0x210>)
 8001c3a:	f000 fe53 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c3e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c50:	230a      	movs	r3, #10
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4817      	ldr	r0, [pc, #92]	; (8001cb8 <MX_GPIO_Init+0x21c>)
 8001c5c:	f000 fe42 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	4810      	ldr	r0, [pc, #64]	; (8001cb8 <MX_GPIO_Init+0x21c>)
 8001c76:	f000 fe35 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001c7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c8c:	230b      	movs	r3, #11
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_GPIO_Init+0x210>)
 8001c98:	f000 fe24 	bl	80028e4 <HAL_GPIO_Init>

}
 8001c9c:	bf00      	nop
 8001c9e:	3730      	adds	r7, #48	; 0x30
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020400 	.word	0x40020400
 8001cac:	40021800 	.word	0x40021800
 8001cb0:	10110000 	.word	0x10110000
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020000 	.word	0x40020000

08001cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_MspInit+0x4c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <HAL_MspInit+0x4c>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_MspInit+0x4c>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <HAL_RTC_MspInit+0x24>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d102      	bne.n	8001d34 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RTC_MspInit+0x28>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40002800 	.word	0x40002800
 8001d44:	42470e3c 	.word	0x42470e3c

08001d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d58:	d115      	bne.n	8001d86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_TIM_Base_MspInit+0x48>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <HAL_TIM_Base_MspInit+0x48>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_TIM_Base_MspInit+0x48>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	201c      	movs	r0, #28
 8001d7c:	f000 fa55 	bl	800222a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d80:	201c      	movs	r0, #28
 8001d82:	f000 fa6e 	bl	8002262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800

08001d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_UART_MspInit+0x94>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d134      	bne.n	8001e20 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_UART_MspInit+0x98>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_UART_MspInit+0x98>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_UART_MspInit+0x98>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_UART_MspInit+0x98>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <HAL_UART_MspInit+0x98>)
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_UART_MspInit+0x98>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001dee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e00:	2307      	movs	r3, #7
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4809      	ldr	r0, [pc, #36]	; (8001e30 <HAL_UART_MspInit+0x9c>)
 8001e0c:	f000 fd6a 	bl	80028e4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	2027      	movs	r0, #39	; 0x27
 8001e16:	f000 fa08 	bl	800222a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e1a:	2027      	movs	r0, #39	; 0x27
 8001e1c:	f000 fa21 	bl	8002262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e20:	bf00      	nop
 8001e22:	3728      	adds	r7, #40	; 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40004800 	.word	0x40004800
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020c00 	.word	0x40020c00

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <MemManage_Handler+0x4>

08001e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <BusFault_Handler+0x4>

08001e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <UsageFault_Handler+0x4>

08001e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e88:	f000 f8d4 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <TIM2_IRQHandler+0x10>)
 8001e96:	f001 fe8d 	bl	8003bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200001a0 	.word	0x200001a0

08001ea4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <USART3_IRQHandler+0x10>)
 8001eaa:	f002 fb1d 	bl	80044e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200000c0 	.word	0x200000c0

08001eb8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <_sbrk+0x50>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <_sbrk+0x16>
		heap_end = &end;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <_sbrk+0x50>)
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <_sbrk+0x54>)
 8001ecc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <_sbrk+0x50>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <_sbrk+0x50>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	466a      	mov	r2, sp
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d907      	bls.n	8001ef2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ee2:	f003 f8b3 	bl	800504c <__errno>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	230c      	movs	r3, #12
 8001eea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	e006      	b.n	8001f00 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ef2:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <_sbrk+0x50>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a03      	ldr	r2, [pc, #12]	; (8001f08 <_sbrk+0x50>)
 8001efc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200000ac 	.word	0x200000ac
 8001f0c:	20000228 	.word	0x20000228

08001f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <SystemInit+0x28>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <SystemInit+0x28>)
 8001f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SystemInit+0x28>)
 8001f26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f2a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f74 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f42:	e003      	b.n	8001f4c <LoopCopyDataInit>

08001f44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f4a:	3104      	adds	r1, #4

08001f4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f4c:	480b      	ldr	r0, [pc, #44]	; (8001f7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f54:	d3f6      	bcc.n	8001f44 <CopyDataInit>
  ldr  r2, =_sbss
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f58:	e002      	b.n	8001f60 <LoopFillZerobss>

08001f5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f5c:	f842 3b04 	str.w	r3, [r2], #4

08001f60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f64:	d3f9      	bcc.n	8001f5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f66:	f7ff ffd3 	bl	8001f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6a:	f003 f875 	bl	8005058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f6e:	f7ff fc05 	bl	800177c <main>
  bx  lr    
 8001f72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f74:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001f78:	08005abc 	.word	0x08005abc
  ldr  r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f80:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001f84:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001f88:	20000224 	.word	0x20000224

08001f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC_IRQHandler>
	...

08001f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <HAL_Init+0x40>)
 8001f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_Init+0x40>)
 8001fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <HAL_Init+0x40>)
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f000 f92b 	bl	8002214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f808 	bl	8001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc4:	f7ff fe82 	bl	8001ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023c00 	.word	0x40023c00

08001fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_InitTick+0x54>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x58>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f943 	bl	800227e <HAL_SYSTICK_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00e      	b.n	8002020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d80a      	bhi.n	800201e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f000 f90b 	bl	800222a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4a06      	ldr	r2, [pc, #24]	; (8002030 <HAL_InitTick+0x5c>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000004 	.word	0x20000004
 800202c:	2000000c 	.word	0x2000000c
 8002030:	20000008 	.word	0x20000008

08002034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_IncTick+0x20>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a04      	ldr	r2, [pc, #16]	; (8002058 <HAL_IncTick+0x24>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	2000000c 	.word	0x2000000c
 8002058:	200001fc 	.word	0x200001fc

0800205c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_GetTick+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	200001fc 	.word	0x200001fc

08002074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002090:	4013      	ands	r3, r2
 8002092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800209c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a6:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	60d3      	str	r3, [r2, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <__NVIC_GetPriorityGrouping+0x18>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	f003 0307 	and.w	r3, r3, #7
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	db0b      	blt.n	8002102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	4907      	ldr	r1, [pc, #28]	; (8002110 <__NVIC_EnableIRQ+0x38>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	2001      	movs	r0, #1
 80020fa:	fa00 f202 	lsl.w	r2, r0, r2
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000e100 	.word	0xe000e100

08002114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	6039      	str	r1, [r7, #0]
 800211e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	2b00      	cmp	r3, #0
 8002126:	db0a      	blt.n	800213e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	490c      	ldr	r1, [pc, #48]	; (8002160 <__NVIC_SetPriority+0x4c>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	0112      	lsls	r2, r2, #4
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	440b      	add	r3, r1
 8002138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800213c:	e00a      	b.n	8002154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4908      	ldr	r1, [pc, #32]	; (8002164 <__NVIC_SetPriority+0x50>)
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	3b04      	subs	r3, #4
 800214c:	0112      	lsls	r2, r2, #4
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	440b      	add	r3, r1
 8002152:	761a      	strb	r2, [r3, #24]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000e100 	.word	0xe000e100
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f1c3 0307 	rsb	r3, r3, #7
 8002182:	2b04      	cmp	r3, #4
 8002184:	bf28      	it	cs
 8002186:	2304      	movcs	r3, #4
 8002188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3304      	adds	r3, #4
 800218e:	2b06      	cmp	r3, #6
 8002190:	d902      	bls.n	8002198 <NVIC_EncodePriority+0x30>
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3b03      	subs	r3, #3
 8002196:	e000      	b.n	800219a <NVIC_EncodePriority+0x32>
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	f04f 32ff 	mov.w	r2, #4294967295
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43da      	mvns	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	401a      	ands	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b0:	f04f 31ff 	mov.w	r1, #4294967295
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	43d9      	mvns	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	4313      	orrs	r3, r2
         );
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3724      	adds	r7, #36	; 0x24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e0:	d301      	bcc.n	80021e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00f      	b.n	8002206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e6:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <SysTick_Config+0x40>)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ee:	210f      	movs	r1, #15
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f7ff ff8e 	bl	8002114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <SysTick_Config+0x40>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <SysTick_Config+0x40>)
 8002200:	2207      	movs	r2, #7
 8002202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	e000e010 	.word	0xe000e010

08002214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff29 	bl	8002074 <__NVIC_SetPriorityGrouping>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222a:	b580      	push	{r7, lr}
 800222c:	b086      	sub	sp, #24
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
 8002236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800223c:	f7ff ff3e 	bl	80020bc <__NVIC_GetPriorityGrouping>
 8002240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	6978      	ldr	r0, [r7, #20]
 8002248:	f7ff ff8e 	bl	8002168 <NVIC_EncodePriority>
 800224c:	4602      	mov	r2, r0
 800224e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002252:	4611      	mov	r1, r2
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff5d 	bl	8002114 <__NVIC_SetPriority>
}
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff31 	bl	80020d8 <__NVIC_EnableIRQ>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ffa2 	bl	80021d0 <SysTick_Config>
 800228c:	4603      	mov	r3, r0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d004      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2280      	movs	r2, #128	; 0x80
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e00c      	b.n	80022ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2205      	movs	r2, #5
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022ee:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_FLASH_Program+0xa0>)
 80022f0:	7e1b      	ldrb	r3, [r3, #24]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_FLASH_Program+0x1e>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e03b      	b.n	8002372 <HAL_FLASH_Program+0x96>
 80022fa:	4b20      	ldr	r3, [pc, #128]	; (800237c <HAL_FLASH_Program+0xa0>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002300:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002304:	f000 f870 	bl	80023e8 <FLASH_WaitForLastOperation>
 8002308:	4603      	mov	r3, r0
 800230a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d12b      	bne.n	800236a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002318:	783b      	ldrb	r3, [r7, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	68b8      	ldr	r0, [r7, #8]
 800231e:	f000 f919 	bl	8002554 <FLASH_Program_Byte>
 8002322:	e016      	b.n	8002352 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d105      	bne.n	8002336 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800232a:	883b      	ldrh	r3, [r7, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	68b8      	ldr	r0, [r7, #8]
 8002330:	f000 f8ec 	bl	800250c <FLASH_Program_HalfWord>
 8002334:	e00d      	b.n	8002352 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d105      	bne.n	8002348 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	68b8      	ldr	r0, [r7, #8]
 8002342:	f000 f8c1 	bl	80024c8 <FLASH_Program_Word>
 8002346:	e004      	b.n	8002352 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800234c:	68b8      	ldr	r0, [r7, #8]
 800234e:	f000 f88b 	bl	8002468 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002352:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002356:	f000 f847 	bl	80023e8 <FLASH_WaitForLastOperation>
 800235a:	4603      	mov	r3, r0
 800235c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_FLASH_Program+0xa4>)
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <HAL_FLASH_Program+0xa4>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <HAL_FLASH_Program+0xa0>)
 800236c:	2200      	movs	r2, #0
 800236e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002370:	7dfb      	ldrb	r3, [r7, #23]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000200 	.word	0x20000200
 8002380:	40023c00 	.word	0x40023c00

08002384 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_FLASH_Unlock+0x38>)
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	da0b      	bge.n	80023ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_FLASH_Unlock+0x38>)
 8002398:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <HAL_FLASH_Unlock+0x3c>)
 800239a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <HAL_FLASH_Unlock+0x38>)
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_FLASH_Unlock+0x40>)
 80023a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_FLASH_Unlock+0x38>)
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	da01      	bge.n	80023ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80023ae:	79fb      	ldrb	r3, [r7, #7]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	40023c00 	.word	0x40023c00
 80023c0:	45670123 	.word	0x45670123
 80023c4:	cdef89ab 	.word	0xcdef89ab

080023c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_FLASH_Lock+0x1c>)
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <HAL_FLASH_Lock+0x1c>)
 80023d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40023c00 	.word	0x40023c00

080023e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <FLASH_WaitForLastOperation+0x78>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80023fa:	f7ff fe2f 	bl	800205c <HAL_GetTick>
 80023fe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002400:	e010      	b.n	8002424 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d00c      	beq.n	8002424 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d007      	beq.n	8002420 <FLASH_WaitForLastOperation+0x38>
 8002410:	f7ff fe24 	bl	800205c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	d201      	bcs.n	8002424 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e019      	b.n	8002458 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <FLASH_WaitForLastOperation+0x7c>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e8      	bne.n	8002402 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <FLASH_WaitForLastOperation+0x7c>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <FLASH_WaitForLastOperation+0x7c>)
 800243e:	2201      	movs	r2, #1
 8002440:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <FLASH_WaitForLastOperation+0x7c>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800244e:	f000 f8a3 	bl	8002598 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
  
}  
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000200 	.word	0x20000200
 8002464:	40023c00 	.word	0x40023c00

08002468 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002468:	b490      	push	{r4, r7}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <FLASH_Program_DoubleWord+0x5c>)
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <FLASH_Program_DoubleWord+0x5c>)
 800247a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <FLASH_Program_DoubleWord+0x5c>)
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <FLASH_Program_DoubleWord+0x5c>)
 8002486:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800248a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <FLASH_Program_DoubleWord+0x5c>)
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <FLASH_Program_DoubleWord+0x5c>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800249e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80024a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	f04f 0400 	mov.w	r4, #0
 80024ae:	0013      	movs	r3, r2
 80024b0:	2400      	movs	r4, #0
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	3204      	adds	r2, #4
 80024b6:	6013      	str	r3, [r2, #0]
}
 80024b8:	bf00      	nop
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc90      	pop	{r4, r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00

080024c8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <FLASH_Program_Word+0x40>)
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <FLASH_Program_Word+0x40>)
 80024d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <FLASH_Program_Word+0x40>)
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	4a09      	ldr	r2, [pc, #36]	; (8002508 <FLASH_Program_Word+0x40>)
 80024e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <FLASH_Program_Word+0x40>)
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	4a06      	ldr	r2, [pc, #24]	; (8002508 <FLASH_Program_Word+0x40>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	601a      	str	r2, [r3, #0]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40023c00 	.word	0x40023c00

0800250c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <FLASH_Program_HalfWord+0x44>)
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	4a0c      	ldr	r2, [pc, #48]	; (8002550 <FLASH_Program_HalfWord+0x44>)
 800251e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002522:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <FLASH_Program_HalfWord+0x44>)
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	4a09      	ldr	r2, [pc, #36]	; (8002550 <FLASH_Program_HalfWord+0x44>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <FLASH_Program_HalfWord+0x44>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <FLASH_Program_HalfWord+0x44>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	801a      	strh	r2, [r3, #0]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40023c00 	.word	0x40023c00

08002554 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <FLASH_Program_Byte+0x40>)
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	4a0b      	ldr	r2, [pc, #44]	; (8002594 <FLASH_Program_Byte+0x40>)
 8002566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800256a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <FLASH_Program_Byte+0x40>)
 800256e:	4a09      	ldr	r2, [pc, #36]	; (8002594 <FLASH_Program_Byte+0x40>)
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <FLASH_Program_Byte+0x40>)
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <FLASH_Program_Byte+0x40>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	701a      	strb	r2, [r3, #0]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00

08002598 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800259c:	4b2f      	ldr	r3, [pc, #188]	; (800265c <FLASH_SetErrorCode+0xc4>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <FLASH_SetErrorCode+0xc8>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	f043 0310 	orr.w	r3, r3, #16
 80025b0:	4a2b      	ldr	r2, [pc, #172]	; (8002660 <FLASH_SetErrorCode+0xc8>)
 80025b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <FLASH_SetErrorCode+0xc4>)
 80025b6:	2210      	movs	r2, #16
 80025b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80025ba:	4b28      	ldr	r3, [pc, #160]	; (800265c <FLASH_SetErrorCode+0xc4>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80025c6:	4b26      	ldr	r3, [pc, #152]	; (8002660 <FLASH_SetErrorCode+0xc8>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f043 0308 	orr.w	r3, r3, #8
 80025ce:	4a24      	ldr	r2, [pc, #144]	; (8002660 <FLASH_SetErrorCode+0xc8>)
 80025d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <FLASH_SetErrorCode+0xc4>)
 80025d4:	2220      	movs	r2, #32
 80025d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <FLASH_SetErrorCode+0xc4>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80025e4:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <FLASH_SetErrorCode+0xc8>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <FLASH_SetErrorCode+0xc8>)
 80025ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <FLASH_SetErrorCode+0xc4>)
 80025f2:	2240      	movs	r2, #64	; 0x40
 80025f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <FLASH_SetErrorCode+0xc4>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002602:	4b17      	ldr	r3, [pc, #92]	; (8002660 <FLASH_SetErrorCode+0xc8>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	4a15      	ldr	r2, [pc, #84]	; (8002660 <FLASH_SetErrorCode+0xc8>)
 800260c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <FLASH_SetErrorCode+0xc4>)
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <FLASH_SetErrorCode+0xc4>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <FLASH_SetErrorCode+0xc8>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <FLASH_SetErrorCode+0xc8>)
 800262a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <FLASH_SetErrorCode+0xc4>)
 800262e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002632:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <FLASH_SetErrorCode+0xc4>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002640:	4b07      	ldr	r3, [pc, #28]	; (8002660 <FLASH_SetErrorCode+0xc8>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f043 0320 	orr.w	r3, r3, #32
 8002648:	4a05      	ldr	r2, [pc, #20]	; (8002660 <FLASH_SetErrorCode+0xc8>)
 800264a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <FLASH_SetErrorCode+0xc4>)
 800264e:	2202      	movs	r2, #2
 8002650:	60da      	str	r2, [r3, #12]
  }
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40023c00 	.word	0x40023c00
 8002660:	20000200 	.word	0x20000200

08002664 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_FLASHEx_Erase+0xdc>)
 8002678:	7e1b      	ldrb	r3, [r3, #24]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_FLASHEx_Erase+0x1e>
 800267e:	2302      	movs	r3, #2
 8002680:	e05a      	b.n	8002738 <HAL_FLASHEx_Erase+0xd4>
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_FLASHEx_Erase+0xdc>)
 8002684:	2201      	movs	r2, #1
 8002686:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002688:	f24c 3050 	movw	r0, #50000	; 0xc350
 800268c:	f7ff feac 	bl	80023e8 <FLASH_WaitForLastOperation>
 8002690:	4603      	mov	r3, r0
 8002692:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d14a      	bne.n	8002730 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f04f 32ff 	mov.w	r2, #4294967295
 80026a0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d117      	bne.n	80026da <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4619      	mov	r1, r3
 80026b6:	4610      	mov	r0, r2
 80026b8:	f000 f846 	bl	8002748 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026c0:	f7ff fe92 	bl	80023e8 <FLASH_WaitForLastOperation>
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <HAL_FLASHEx_Erase+0xe0>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4a1d      	ldr	r2, [pc, #116]	; (8002744 <HAL_FLASHEx_Erase+0xe0>)
 80026ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026d2:	f023 0304 	bic.w	r3, r3, #4
 80026d6:	6113      	str	r3, [r2, #16]
 80026d8:	e028      	b.n	800272c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	e01c      	b.n	800271c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	4619      	mov	r1, r3
 80026ea:	68b8      	ldr	r0, [r7, #8]
 80026ec:	f000 f866 	bl	80027bc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026f4:	f7ff fe78 	bl	80023e8 <FLASH_WaitForLastOperation>
 80026f8:	4603      	mov	r3, r0
 80026fa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_FLASHEx_Erase+0xe0>)
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	4a10      	ldr	r2, [pc, #64]	; (8002744 <HAL_FLASHEx_Erase+0xe0>)
 8002702:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002706:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	601a      	str	r2, [r3, #0]
          break;
 8002714:	e00a      	b.n	800272c <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	3301      	adds	r3, #1
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4413      	add	r3, r2
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	429a      	cmp	r2, r3
 800272a:	d3da      	bcc.n	80026e2 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800272c:	f000 f894 	bl	8002858 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_FLASHEx_Erase+0xdc>)
 8002732:	2200      	movs	r2, #0
 8002734:	761a      	strb	r2, [r3, #24]

  return status;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000200 	.word	0x20000200
 8002744:	40023c00 	.word	0x40023c00

08002748 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002754:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <FLASH_MassErase+0x70>)
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <FLASH_MassErase+0x70>)
 800275a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275e:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d108      	bne.n	8002778 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002766:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <FLASH_MassErase+0x70>)
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <FLASH_MassErase+0x70>)
 800276c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002770:	f043 0304 	orr.w	r3, r3, #4
 8002774:	6113      	str	r3, [r2, #16]
 8002776:	e00f      	b.n	8002798 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d106      	bne.n	800278c <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 800277e:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <FLASH_MassErase+0x70>)
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <FLASH_MassErase+0x70>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6113      	str	r3, [r2, #16]
 800278a:	e005      	b.n	8002798 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <FLASH_MassErase+0x70>)
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <FLASH_MassErase+0x70>)
 8002792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002796:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002798:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <FLASH_MassErase+0x70>)
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	4313      	orrs	r3, r2
 80027a2:	4a05      	ldr	r2, [pc, #20]	; (80027b8 <FLASH_MassErase+0x70>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a8:	6113      	str	r3, [r2, #16]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40023c00 	.word	0x40023c00

080027bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	e010      	b.n	80027fa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d103      	bne.n	80027e6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80027de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e009      	b.n	80027fa <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d103      	bne.n	80027f4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80027ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	e002      	b.n	80027fa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80027f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b0b      	cmp	r3, #11
 80027fe:	d902      	bls.n	8002806 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <FLASH_Erase_Sector+0x98>)
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <FLASH_Erase_Sector+0x98>)
 800280c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002810:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <FLASH_Erase_Sector+0x98>)
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	490f      	ldr	r1, [pc, #60]	; (8002854 <FLASH_Erase_Sector+0x98>)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <FLASH_Erase_Sector+0x98>)
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <FLASH_Erase_Sector+0x98>)
 8002824:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002828:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <FLASH_Erase_Sector+0x98>)
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4313      	orrs	r3, r2
 8002834:	4a07      	ldr	r2, [pc, #28]	; (8002854 <FLASH_Erase_Sector+0x98>)
 8002836:	f043 0302 	orr.w	r3, r3, #2
 800283a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <FLASH_Erase_Sector+0x98>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <FLASH_Erase_Sector+0x98>)
 8002842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002846:	6113      	str	r3, [r2, #16]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40023c00 	.word	0x40023c00

08002858 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800285c:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <FLASH_FlushCaches+0x88>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002864:	2b00      	cmp	r3, #0
 8002866:	d017      	beq.n	8002898 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <FLASH_FlushCaches+0x88>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <FLASH_FlushCaches+0x88>)
 800286e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002872:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <FLASH_FlushCaches+0x88>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <FLASH_FlushCaches+0x88>)
 800287a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <FLASH_FlushCaches+0x88>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a16      	ldr	r2, [pc, #88]	; (80028e0 <FLASH_FlushCaches+0x88>)
 8002886:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800288a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800288c:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <FLASH_FlushCaches+0x88>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <FLASH_FlushCaches+0x88>)
 8002892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002896:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <FLASH_FlushCaches+0x88>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d017      	beq.n	80028d4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <FLASH_FlushCaches+0x88>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	; (80028e0 <FLASH_FlushCaches+0x88>)
 80028aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028ae:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <FLASH_FlushCaches+0x88>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <FLASH_FlushCaches+0x88>)
 80028b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <FLASH_FlushCaches+0x88>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <FLASH_FlushCaches+0x88>)
 80028c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028c6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <FLASH_FlushCaches+0x88>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <FLASH_FlushCaches+0x88>)
 80028ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d2:	6013      	str	r3, [r2, #0]
  }
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00

080028e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	e177      	b.n	8002bf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002900:	2201      	movs	r2, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	429a      	cmp	r2, r3
 800291a:	f040 8166 	bne.w	8002bea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d00b      	beq.n	800293e <HAL_GPIO_Init+0x5a>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002932:	2b11      	cmp	r3, #17
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b12      	cmp	r3, #18
 800293c:	d130      	bne.n	80029a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002974:	2201      	movs	r2, #1
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 0201 	and.w	r2, r3, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0xfc>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b12      	cmp	r3, #18
 80029de:	d123      	bne.n	8002a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	08da      	lsrs	r2, r3, #3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3208      	adds	r2, #8
 80029e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	220f      	movs	r2, #15
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	08da      	lsrs	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3208      	adds	r2, #8
 8002a22:	69b9      	ldr	r1, [r7, #24]
 8002a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0203 	and.w	r2, r3, #3
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80c0 	beq.w	8002bea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	4b65      	ldr	r3, [pc, #404]	; (8002c04 <HAL_GPIO_Init+0x320>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a64      	ldr	r2, [pc, #400]	; (8002c04 <HAL_GPIO_Init+0x320>)
 8002a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b62      	ldr	r3, [pc, #392]	; (8002c04 <HAL_GPIO_Init+0x320>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a86:	4a60      	ldr	r2, [pc, #384]	; (8002c08 <HAL_GPIO_Init+0x324>)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a57      	ldr	r2, [pc, #348]	; (8002c0c <HAL_GPIO_Init+0x328>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d037      	beq.n	8002b22 <HAL_GPIO_Init+0x23e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a56      	ldr	r2, [pc, #344]	; (8002c10 <HAL_GPIO_Init+0x32c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d031      	beq.n	8002b1e <HAL_GPIO_Init+0x23a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a55      	ldr	r2, [pc, #340]	; (8002c14 <HAL_GPIO_Init+0x330>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d02b      	beq.n	8002b1a <HAL_GPIO_Init+0x236>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a54      	ldr	r2, [pc, #336]	; (8002c18 <HAL_GPIO_Init+0x334>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d025      	beq.n	8002b16 <HAL_GPIO_Init+0x232>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a53      	ldr	r2, [pc, #332]	; (8002c1c <HAL_GPIO_Init+0x338>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01f      	beq.n	8002b12 <HAL_GPIO_Init+0x22e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_GPIO_Init+0x33c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d019      	beq.n	8002b0e <HAL_GPIO_Init+0x22a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a51      	ldr	r2, [pc, #324]	; (8002c24 <HAL_GPIO_Init+0x340>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d013      	beq.n	8002b0a <HAL_GPIO_Init+0x226>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a50      	ldr	r2, [pc, #320]	; (8002c28 <HAL_GPIO_Init+0x344>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00d      	beq.n	8002b06 <HAL_GPIO_Init+0x222>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4f      	ldr	r2, [pc, #316]	; (8002c2c <HAL_GPIO_Init+0x348>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <HAL_GPIO_Init+0x21e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4e      	ldr	r2, [pc, #312]	; (8002c30 <HAL_GPIO_Init+0x34c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d101      	bne.n	8002afe <HAL_GPIO_Init+0x21a>
 8002afa:	2309      	movs	r3, #9
 8002afc:	e012      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002afe:	230a      	movs	r3, #10
 8002b00:	e010      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b02:	2308      	movs	r3, #8
 8002b04:	e00e      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b06:	2307      	movs	r3, #7
 8002b08:	e00c      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b0a:	2306      	movs	r3, #6
 8002b0c:	e00a      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b0e:	2305      	movs	r3, #5
 8002b10:	e008      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b12:	2304      	movs	r3, #4
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b16:	2303      	movs	r3, #3
 8002b18:	e004      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e002      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_GPIO_Init+0x240>
 8002b22:	2300      	movs	r3, #0
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	f002 0203 	and.w	r2, r2, #3
 8002b2a:	0092      	lsls	r2, r2, #2
 8002b2c:	4093      	lsls	r3, r2
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b34:	4934      	ldr	r1, [pc, #208]	; (8002c08 <HAL_GPIO_Init+0x324>)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b42:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b66:	4a33      	ldr	r2, [pc, #204]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b6c:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b90:	4a28      	ldr	r2, [pc, #160]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b96:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be4:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <HAL_GPIO_Init+0x350>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3301      	adds	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b0f      	cmp	r3, #15
 8002bf4:	f67f ae84 	bls.w	8002900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3724      	adds	r7, #36	; 0x24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40013800 	.word	0x40013800
 8002c0c:	40020000 	.word	0x40020000
 8002c10:	40020400 	.word	0x40020400
 8002c14:	40020800 	.word	0x40020800
 8002c18:	40020c00 	.word	0x40020c00
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40021400 	.word	0x40021400
 8002c24:	40021800 	.word	0x40021800
 8002c28:	40021c00 	.word	0x40021c00
 8002c2c:	40022000 	.word	0x40022000
 8002c30:	40022400 	.word	0x40022400
 8002c34:	40013c00 	.word	0x40013c00

08002c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
 8002c44:	4613      	mov	r3, r2
 8002c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c48:	787b      	ldrb	r3, [r7, #1]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c54:	e003      	b.n	8002c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c56:	887b      	ldrh	r3, [r7, #2]
 8002c58:	041a      	lsls	r2, r3, #16
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	619a      	str	r2, [r3, #24]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_PWREx_EnableOverDrive+0x90>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a1f      	ldr	r2, [pc, #124]	; (8002cfc <HAL_PWREx_EnableOverDrive+0x90>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
 8002c86:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_PWREx_EnableOverDrive+0x90>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c98:	f7ff f9e0 	bl	800205c <HAL_GetTick>
 8002c9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c9e:	e009      	b.n	8002cb4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ca0:	f7ff f9dc 	bl	800205c <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cae:	d901      	bls.n	8002cb4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e01f      	b.n	8002cf4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc0:	d1ee      	bne.n	8002ca0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc8:	f7ff f9c8 	bl	800205c <HAL_GetTick>
 8002ccc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cce:	e009      	b.n	8002ce4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cd0:	f7ff f9c4 	bl	800205c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cde:	d901      	bls.n	8002ce4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e007      	b.n	8002cf4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cf0:	d1ee      	bne.n	8002cd0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	420e0040 	.word	0x420e0040
 8002d04:	40007000 	.word	0x40007000
 8002d08:	420e0044 	.word	0x420e0044

08002d0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e25b      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d075      	beq.n	8002e16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d2a:	4ba3      	ldr	r3, [pc, #652]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d00c      	beq.n	8002d50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d36:	4ba0      	ldr	r3, [pc, #640]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d112      	bne.n	8002d68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d42:	4b9d      	ldr	r3, [pc, #628]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d4e:	d10b      	bne.n	8002d68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d50:	4b99      	ldr	r3, [pc, #612]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d05b      	beq.n	8002e14 <HAL_RCC_OscConfig+0x108>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d157      	bne.n	8002e14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e236      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d70:	d106      	bne.n	8002d80 <HAL_RCC_OscConfig+0x74>
 8002d72:	4b91      	ldr	r3, [pc, #580]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a90      	ldr	r2, [pc, #576]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e01d      	b.n	8002dbc <HAL_RCC_OscConfig+0xb0>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x98>
 8002d8a:	4b8b      	ldr	r3, [pc, #556]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a8a      	ldr	r2, [pc, #552]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b88      	ldr	r3, [pc, #544]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a87      	ldr	r2, [pc, #540]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_OscConfig+0xb0>
 8002da4:	4b84      	ldr	r3, [pc, #528]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a83      	ldr	r2, [pc, #524]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	4b81      	ldr	r3, [pc, #516]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a80      	ldr	r2, [pc, #512]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d013      	beq.n	8002dec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7ff f94a 	bl	800205c <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7ff f946 	bl	800205c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1fb      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0xc0>
 8002dea:	e014      	b.n	8002e16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7ff f936 	bl	800205c <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df4:	f7ff f932 	bl	800205c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e1e7      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	4b6c      	ldr	r3, [pc, #432]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0xe8>
 8002e12:	e000      	b.n	8002e16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d063      	beq.n	8002eea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e22:	4b65      	ldr	r3, [pc, #404]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2e:	4b62      	ldr	r3, [pc, #392]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d11c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e3a:	4b5f      	ldr	r3, [pc, #380]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d116      	bne.n	8002e74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	4b5c      	ldr	r3, [pc, #368]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_RCC_OscConfig+0x152>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e1bb      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5e:	4b56      	ldr	r3, [pc, #344]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4952      	ldr	r1, [pc, #328]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	e03a      	b.n	8002eea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d020      	beq.n	8002ebe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e7c:	4b4f      	ldr	r3, [pc, #316]	; (8002fbc <HAL_RCC_OscConfig+0x2b0>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e82:	f7ff f8eb 	bl	800205c <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e8a:	f7ff f8e7 	bl	800205c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e19c      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9c:	4b46      	ldr	r3, [pc, #280]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea8:	4b43      	ldr	r3, [pc, #268]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4940      	ldr	r1, [pc, #256]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]
 8002ebc:	e015      	b.n	8002eea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ebe:	4b3f      	ldr	r3, [pc, #252]	; (8002fbc <HAL_RCC_OscConfig+0x2b0>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7ff f8ca 	bl	800205c <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ecc:	f7ff f8c6 	bl	800205c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e17b      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ede:	4b36      	ldr	r3, [pc, #216]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d030      	beq.n	8002f58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efe:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <HAL_RCC_OscConfig+0x2b4>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7ff f8aa 	bl	800205c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f0c:	f7ff f8a6 	bl	800205c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e15b      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1e:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x200>
 8002f2a:	e015      	b.n	8002f58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f2c:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <HAL_RCC_OscConfig+0x2b4>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f32:	f7ff f893 	bl	800205c <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f3a:	f7ff f88f 	bl	800205c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e144      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a0 	beq.w	80030a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10f      	bne.n	8002f96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f84:	6413      	str	r3, [r2, #64]	; 0x40
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f92:	2301      	movs	r3, #1
 8002f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f96:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_RCC_OscConfig+0x2b8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d121      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <HAL_RCC_OscConfig+0x2b8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <HAL_RCC_OscConfig+0x2b8>)
 8002fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fae:	f7ff f855 	bl	800205c <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	e011      	b.n	8002fda <HAL_RCC_OscConfig+0x2ce>
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	42470000 	.word	0x42470000
 8002fc0:	42470e80 	.word	0x42470e80
 8002fc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc8:	f7ff f848 	bl	800205c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e0fd      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	4b81      	ldr	r3, [pc, #516]	; (80031e0 <HAL_RCC_OscConfig+0x4d4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d106      	bne.n	8002ffc <HAL_RCC_OscConfig+0x2f0>
 8002fee:	4b7d      	ldr	r3, [pc, #500]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a7c      	ldr	r2, [pc, #496]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	e01c      	b.n	8003036 <HAL_RCC_OscConfig+0x32a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b05      	cmp	r3, #5
 8003002:	d10c      	bne.n	800301e <HAL_RCC_OscConfig+0x312>
 8003004:	4b77      	ldr	r3, [pc, #476]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	4a76      	ldr	r2, [pc, #472]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	6713      	str	r3, [r2, #112]	; 0x70
 8003010:	4b74      	ldr	r3, [pc, #464]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	4a73      	ldr	r2, [pc, #460]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6713      	str	r3, [r2, #112]	; 0x70
 800301c:	e00b      	b.n	8003036 <HAL_RCC_OscConfig+0x32a>
 800301e:	4b71      	ldr	r3, [pc, #452]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a70      	ldr	r2, [pc, #448]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
 800302a:	4b6e      	ldr	r3, [pc, #440]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	4a6d      	ldr	r2, [pc, #436]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d015      	beq.n	800306a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303e:	f7ff f80d 	bl	800205c <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7ff f809 	bl	800205c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0bc      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	4b61      	ldr	r3, [pc, #388]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ee      	beq.n	8003046 <HAL_RCC_OscConfig+0x33a>
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306a:	f7fe fff7 	bl	800205c <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fe fff3 	bl	800205c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0a6      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003088:	4b56      	ldr	r3, [pc, #344]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ee      	bne.n	8003072 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309a:	4b52      	ldr	r3, [pc, #328]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a51      	ldr	r2, [pc, #324]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 80030a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8092 	beq.w	80031d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030b0:	4b4c      	ldr	r3, [pc, #304]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d05c      	beq.n	8003176 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d141      	bne.n	8003148 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c4:	4b48      	ldr	r3, [pc, #288]	; (80031e8 <HAL_RCC_OscConfig+0x4dc>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fe ffc7 	bl	800205c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe ffc3 	bl	800205c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e078      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e4:	4b3f      	ldr	r3, [pc, #252]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	019b      	lsls	r3, r3, #6
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	3b01      	subs	r3, #1
 800310a:	041b      	lsls	r3, r3, #16
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	061b      	lsls	r3, r3, #24
 8003114:	4933      	ldr	r1, [pc, #204]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800311a:	4b33      	ldr	r3, [pc, #204]	; (80031e8 <HAL_RCC_OscConfig+0x4dc>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe ff9c 	bl	800205c <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe ff98 	bl	800205c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e04d      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313a:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x41c>
 8003146:	e045      	b.n	80031d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003148:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_RCC_OscConfig+0x4dc>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fe ff85 	bl	800205c <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003156:	f7fe ff81 	bl	800205c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e036      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003168:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f0      	bne.n	8003156 <HAL_RCC_OscConfig+0x44a>
 8003174:	e02e      	b.n	80031d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e029      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003182:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <HAL_RCC_OscConfig+0x4d8>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	429a      	cmp	r2, r3
 8003194:	d11c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d115      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031aa:	4013      	ands	r3, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d10d      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40007000 	.word	0x40007000
 80031e4:	40023800 	.word	0x40023800
 80031e8:	42470060 	.word	0x42470060

080031ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0cc      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b68      	ldr	r3, [pc, #416]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d90c      	bls.n	8003228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b65      	ldr	r3, [pc, #404]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b63      	ldr	r3, [pc, #396]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b8      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003240:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a58      	ldr	r2, [pc, #352]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800324a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003258:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a52      	ldr	r2, [pc, #328]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003264:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	494d      	ldr	r1, [pc, #308]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d044      	beq.n	800330c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d119      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b3f      	ldr	r3, [pc, #252]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e067      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4934      	ldr	r1, [pc, #208]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7fe febe 	bl	800205c <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fe feba 	bl	800205c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e04f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d20c      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e032      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4916      	ldr	r1, [pc, #88]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	490e      	ldr	r1, [pc, #56]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003372:	f000 f821 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8003376:	4601      	mov	r1, r0
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	5cd3      	ldrb	r3, [r2, r3]
 8003386:	fa21 f303 	lsr.w	r3, r1, r3
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fe1e 	bl	8001fd4 <HAL_InitTick>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023c00 	.word	0x40023c00
 80033a8:	40023800 	.word	0x40023800
 80033ac:	08005a60 	.word	0x08005a60
 80033b0:	20000004 	.word	0x20000004
 80033b4:	20000008 	.word	0x20000008

080033b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	2300      	movs	r3, #0
 80033c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d007      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x32>
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d008      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x38>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 80b4 	bne.w	800354c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e4:	4b5e      	ldr	r3, [pc, #376]	; (8003560 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033e6:	60bb      	str	r3, [r7, #8]
       break;
 80033e8:	e0b3      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ea:	4b5e      	ldr	r3, [pc, #376]	; (8003564 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80033ec:	60bb      	str	r3, [r7, #8]
      break;
 80033ee:	e0b0      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f0:	4b5a      	ldr	r3, [pc, #360]	; (800355c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033fa:	4b58      	ldr	r3, [pc, #352]	; (800355c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d04a      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003406:	4b55      	ldr	r3, [pc, #340]	; (800355c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	099b      	lsrs	r3, r3, #6
 800340c:	f04f 0400 	mov.w	r4, #0
 8003410:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	ea03 0501 	and.w	r5, r3, r1
 800341c:	ea04 0602 	and.w	r6, r4, r2
 8003420:	4629      	mov	r1, r5
 8003422:	4632      	mov	r2, r6
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	f04f 0400 	mov.w	r4, #0
 800342c:	0154      	lsls	r4, r2, #5
 800342e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003432:	014b      	lsls	r3, r1, #5
 8003434:	4619      	mov	r1, r3
 8003436:	4622      	mov	r2, r4
 8003438:	1b49      	subs	r1, r1, r5
 800343a:	eb62 0206 	sbc.w	r2, r2, r6
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	f04f 0400 	mov.w	r4, #0
 8003446:	0194      	lsls	r4, r2, #6
 8003448:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800344c:	018b      	lsls	r3, r1, #6
 800344e:	1a5b      	subs	r3, r3, r1
 8003450:	eb64 0402 	sbc.w	r4, r4, r2
 8003454:	f04f 0100 	mov.w	r1, #0
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	00e2      	lsls	r2, r4, #3
 800345e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003462:	00d9      	lsls	r1, r3, #3
 8003464:	460b      	mov	r3, r1
 8003466:	4614      	mov	r4, r2
 8003468:	195b      	adds	r3, r3, r5
 800346a:	eb44 0406 	adc.w	r4, r4, r6
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	0262      	lsls	r2, r4, #9
 8003478:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800347c:	0259      	lsls	r1, r3, #9
 800347e:	460b      	mov	r3, r1
 8003480:	4614      	mov	r4, r2
 8003482:	4618      	mov	r0, r3
 8003484:	4621      	mov	r1, r4
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f04f 0400 	mov.w	r4, #0
 800348c:	461a      	mov	r2, r3
 800348e:	4623      	mov	r3, r4
 8003490:	f7fc fefe 	bl	8000290 <__aeabi_uldivmod>
 8003494:	4603      	mov	r3, r0
 8003496:	460c      	mov	r4, r1
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e049      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800349c:	4b2f      	ldr	r3, [pc, #188]	; (800355c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	099b      	lsrs	r3, r3, #6
 80034a2:	f04f 0400 	mov.w	r4, #0
 80034a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	ea03 0501 	and.w	r5, r3, r1
 80034b2:	ea04 0602 	and.w	r6, r4, r2
 80034b6:	4629      	mov	r1, r5
 80034b8:	4632      	mov	r2, r6
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	f04f 0400 	mov.w	r4, #0
 80034c2:	0154      	lsls	r4, r2, #5
 80034c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034c8:	014b      	lsls	r3, r1, #5
 80034ca:	4619      	mov	r1, r3
 80034cc:	4622      	mov	r2, r4
 80034ce:	1b49      	subs	r1, r1, r5
 80034d0:	eb62 0206 	sbc.w	r2, r2, r6
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	f04f 0400 	mov.w	r4, #0
 80034dc:	0194      	lsls	r4, r2, #6
 80034de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034e2:	018b      	lsls	r3, r1, #6
 80034e4:	1a5b      	subs	r3, r3, r1
 80034e6:	eb64 0402 	sbc.w	r4, r4, r2
 80034ea:	f04f 0100 	mov.w	r1, #0
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	00e2      	lsls	r2, r4, #3
 80034f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034f8:	00d9      	lsls	r1, r3, #3
 80034fa:	460b      	mov	r3, r1
 80034fc:	4614      	mov	r4, r2
 80034fe:	195b      	adds	r3, r3, r5
 8003500:	eb44 0406 	adc.w	r4, r4, r6
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	02a2      	lsls	r2, r4, #10
 800350e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003512:	0299      	lsls	r1, r3, #10
 8003514:	460b      	mov	r3, r1
 8003516:	4614      	mov	r4, r2
 8003518:	4618      	mov	r0, r3
 800351a:	4621      	mov	r1, r4
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f04f 0400 	mov.w	r4, #0
 8003522:	461a      	mov	r2, r3
 8003524:	4623      	mov	r3, r4
 8003526:	f7fc feb3 	bl	8000290 <__aeabi_uldivmod>
 800352a:	4603      	mov	r3, r0
 800352c:	460c      	mov	r4, r1
 800352e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	3301      	adds	r3, #1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	60bb      	str	r3, [r7, #8]
      break;
 800354a:	e002      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800354e:	60bb      	str	r3, [r7, #8]
      break;
 8003550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003552:	68bb      	ldr	r3, [r7, #8]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800355c:	40023800 	.word	0x40023800
 8003560:	00f42400 	.word	0x00f42400
 8003564:	007a1200 	.word	0x007a1200

08003568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <HAL_RCC_GetHCLKFreq+0x14>)
 800356e:	681b      	ldr	r3, [r3, #0]
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000004 	.word	0x20000004

08003580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003584:	f7ff fff0 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 8003588:	4601      	mov	r1, r0
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	0a9b      	lsrs	r3, r3, #10
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4a03      	ldr	r2, [pc, #12]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003596:	5cd3      	ldrb	r3, [r2, r3]
 8003598:	fa21 f303 	lsr.w	r3, r1, r3
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40023800 	.word	0x40023800
 80035a4:	08005a70 	.word	0x08005a70

080035a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035ac:	f7ff ffdc 	bl	8003568 <HAL_RCC_GetHCLKFreq>
 80035b0:	4601      	mov	r1, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0b5b      	lsrs	r3, r3, #13
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4a03      	ldr	r2, [pc, #12]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035be:	5cd3      	ldrb	r3, [r2, r3]
 80035c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	08005a70 	.word	0x08005a70

080035d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d105      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003600:	2b00      	cmp	r3, #0
 8003602:	d075      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003604:	4bad      	ldr	r3, [pc, #692]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800360a:	f7fe fd27 	bl	800205c <HAL_GetTick>
 800360e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003612:	f7fe fd23 	bl	800205c <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e18b      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003624:	4ba6      	ldr	r3, [pc, #664]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f0      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	019a      	lsls	r2, r3, #6
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	071b      	lsls	r3, r3, #28
 8003648:	499d      	ldr	r1, [pc, #628]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01f      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800365c:	4b98      	ldr	r3, [pc, #608]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800365e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003662:	0f1b      	lsrs	r3, r3, #28
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	019a      	lsls	r2, r3, #6
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	061b      	lsls	r3, r3, #24
 8003676:	431a      	orrs	r2, r3
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	071b      	lsls	r3, r3, #28
 800367c:	4990      	ldr	r1, [pc, #576]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003684:	4b8e      	ldr	r3, [pc, #568]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800368a:	f023 021f 	bic.w	r2, r3, #31
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	3b01      	subs	r3, #1
 8003694:	498a      	ldr	r1, [pc, #552]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00d      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	019a      	lsls	r2, r3, #6
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	061b      	lsls	r3, r3, #24
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	071b      	lsls	r3, r3, #28
 80036bc:	4980      	ldr	r1, [pc, #512]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036c4:	4b7d      	ldr	r3, [pc, #500]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036ca:	f7fe fcc7 	bl	800205c <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036d2:	f7fe fcc3 	bl	800205c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e12b      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036e4:	4b76      	ldr	r3, [pc, #472]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d105      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003704:	2b00      	cmp	r3, #0
 8003706:	d079      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003708:	4b6e      	ldr	r3, [pc, #440]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800370e:	f7fe fca5 	bl	800205c <HAL_GetTick>
 8003712:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003716:	f7fe fca1 	bl	800205c <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e109      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003728:	4b65      	ldr	r3, [pc, #404]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003734:	d0ef      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	d020      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003742:	4b5f      	ldr	r3, [pc, #380]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	0f1b      	lsrs	r3, r3, #28
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	019a      	lsls	r2, r3, #6
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	061b      	lsls	r3, r3, #24
 800375c:	431a      	orrs	r2, r3
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	071b      	lsls	r3, r3, #28
 8003762:	4957      	ldr	r1, [pc, #348]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800376a:	4b55      	ldr	r3, [pc, #340]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800376c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003770:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	3b01      	subs	r3, #1
 800377a:	021b      	lsls	r3, r3, #8
 800377c:	4950      	ldr	r1, [pc, #320]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01e      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003790:	4b4b      	ldr	r3, [pc, #300]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	0e1b      	lsrs	r3, r3, #24
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	019a      	lsls	r2, r3, #6
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	061b      	lsls	r3, r3, #24
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	071b      	lsls	r3, r3, #28
 80037b0:	4943      	ldr	r1, [pc, #268]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037b8:	4b41      	ldr	r3, [pc, #260]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	493e      	ldr	r1, [pc, #248]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037ce:	4b3d      	ldr	r3, [pc, #244]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037d4:	f7fe fc42 	bl	800205c <HAL_GetTick>
 80037d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80037dc:	f7fe fc3e 	bl	800205c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e0a6      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037ee:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037fa:	d1ef      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 808d 	beq.w	8003924 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	4b2c      	ldr	r3, [pc, #176]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	4a2b      	ldr	r2, [pc, #172]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003818:	6413      	str	r3, [r2, #64]	; 0x40
 800381a:	4b29      	ldr	r3, [pc, #164]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003826:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a27      	ldr	r2, [pc, #156]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003830:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003832:	f7fe fc13 	bl	800205c <HAL_GetTick>
 8003836:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800383a:	f7fe fc0f 	bl	800205c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e077      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800384c:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003860:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d039      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	429a      	cmp	r2, r3
 8003874:	d032      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800388c:	4a0c      	ldr	r2, [pc, #48]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b01      	cmp	r3, #1
 800389c:	d11e      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800389e:	f7fe fbdd 	bl	800205c <HAL_GetTick>
 80038a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	e014      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fe fbd9 	bl	800205c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d90b      	bls.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e03f      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80038bc:	42470068 	.word	0x42470068
 80038c0:	40023800 	.word	0x40023800
 80038c4:	42470070 	.word	0x42470070
 80038c8:	40007000 	.word	0x40007000
 80038cc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d0:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0e4      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e8:	d10d      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80038ea:	4b16      	ldr	r3, [pc, #88]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80038fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fe:	4911      	ldr	r1, [pc, #68]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003900:	4313      	orrs	r3, r2
 8003902:	608b      	str	r3, [r1, #8]
 8003904:	e005      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800390c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003910:	6093      	str	r3, [r2, #8]
 8003912:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003914:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391e:	4909      	ldr	r1, [pc, #36]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003920:	4313      	orrs	r3, r2
 8003922:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d004      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003936:	4b04      	ldr	r3, [pc, #16]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003938:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	424711e0 	.word	0x424711e0

0800394c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e083      	b.n	8003a66 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	7f5b      	ldrb	r3, [r3, #29]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fe f9d4 	bl	8001d1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	22ca      	movs	r2, #202	; 0xca
 8003980:	625a      	str	r2, [r3, #36]	; 0x24
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2253      	movs	r2, #83	; 0x53
 8003988:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f897 	bl	8003abe <RTC_EnterInitMode>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	22ff      	movs	r2, #255	; 0xff
 800399c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2204      	movs	r2, #4
 80039a2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e05e      	b.n	8003a66 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80039b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ba:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6899      	ldr	r1, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68d2      	ldr	r2, [r2, #12]
 80039e2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6919      	ldr	r1, [r3, #16]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	041a      	lsls	r2, r3, #16
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a06:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10e      	bne.n	8003a34 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f829 	bl	8003a6e <HAL_RTC_WaitForSynchro>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	22ff      	movs	r2, #255	; 0xff
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e018      	b.n	8003a66 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	22ff      	movs	r2, #255	; 0xff
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
  }
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a88:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a8a:	f7fe fae7 	bl	800205c <HAL_GetTick>
 8003a8e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a90:	e009      	b.n	8003aa6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a92:	f7fe fae3 	bl	800205c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e007      	b.n	8003ab6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0ee      	beq.n	8003a92 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d119      	bne.n	8003b0c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ae2:	f7fe fabb 	bl	800205c <HAL_GetTick>
 8003ae6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003ae8:	e009      	b.n	8003afe <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003aea:	f7fe fab7 	bl	800205c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003af8:	d901      	bls.n	8003afe <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e007      	b.n	8003b0e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0ee      	beq.n	8003aea <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e01d      	b.n	8003b64 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fe f903 	bl	8001d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4619      	mov	r1, r3
 8003b54:	4610      	mov	r0, r2
 8003b56:	f000 fa15 	bl	8003f84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b06      	cmp	r3, #6
 8003b94:	d007      	beq.n	8003ba6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0201 	orr.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d122      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d11b      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0202 	mvn.w	r2, #2
 8003be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f9a5 	bl	8003f46 <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f997 	bl	8003f32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f9a8 	bl	8003f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d122      	bne.n	8003c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d11b      	bne.n	8003c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0204 	mvn.w	r2, #4
 8003c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f97b 	bl	8003f46 <HAL_TIM_IC_CaptureCallback>
 8003c50:	e005      	b.n	8003c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f96d 	bl	8003f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f97e 	bl	8003f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d122      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0208 	mvn.w	r2, #8
 8003c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f951 	bl	8003f46 <HAL_TIM_IC_CaptureCallback>
 8003ca4:	e005      	b.n	8003cb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f943 	bl	8003f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f954 	bl	8003f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d122      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d11b      	bne.n	8003d0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0210 	mvn.w	r2, #16
 8003cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f927 	bl	8003f46 <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f919 	bl	8003f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f92a 	bl	8003f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d10e      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f06f 0201 	mvn.w	r2, #1
 8003d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fc fc2c 	bl	8000590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	d10e      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d107      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fad0 	bl	8004304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d6e:	2b40      	cmp	r3, #64	; 0x40
 8003d70:	d10e      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d107      	bne.n	8003d90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f8ef 	bl	8003f6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d10e      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d107      	bne.n	8003dbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0220 	mvn.w	r2, #32
 8003db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fa9a 	bl	80042f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIM_ConfigClockSource+0x18>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e0a6      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x166>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b40      	cmp	r3, #64	; 0x40
 8003e12:	d067      	beq.n	8003ee4 <HAL_TIM_ConfigClockSource+0x120>
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	d80b      	bhi.n	8003e30 <HAL_TIM_ConfigClockSource+0x6c>
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d073      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0x140>
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d802      	bhi.n	8003e26 <HAL_TIM_ConfigClockSource+0x62>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d06f      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003e24:	e078      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d06c      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0x140>
 8003e2a:	2b30      	cmp	r3, #48	; 0x30
 8003e2c:	d06a      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003e2e:	e073      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e30:	2b70      	cmp	r3, #112	; 0x70
 8003e32:	d00d      	beq.n	8003e50 <HAL_TIM_ConfigClockSource+0x8c>
 8003e34:	2b70      	cmp	r3, #112	; 0x70
 8003e36:	d804      	bhi.n	8003e42 <HAL_TIM_ConfigClockSource+0x7e>
 8003e38:	2b50      	cmp	r3, #80	; 0x50
 8003e3a:	d033      	beq.n	8003ea4 <HAL_TIM_ConfigClockSource+0xe0>
 8003e3c:	2b60      	cmp	r3, #96	; 0x60
 8003e3e:	d041      	beq.n	8003ec4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003e40:	e06a      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d066      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x152>
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4c:	d017      	beq.n	8003e7e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003e4e:	e063      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	6899      	ldr	r1, [r3, #8]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f000 f9aa 	bl	80041b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e72:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]
      break;
 8003e7c:	e04c      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6899      	ldr	r1, [r3, #8]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f000 f993 	bl	80041b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ea0:	609a      	str	r2, [r3, #8]
      break;
 8003ea2:	e039      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	6859      	ldr	r1, [r3, #4]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f000 f907 	bl	80040c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2150      	movs	r1, #80	; 0x50
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f960 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003ec2:	e029      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f000 f926 	bl	8004122 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2160      	movs	r1, #96	; 0x60
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f950 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003ee2:	e019      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f000 f8e7 	bl	80040c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2140      	movs	r1, #64	; 0x40
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f940 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003f02:	e009      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f000 f937 	bl	8004182 <TIM_ITRx_SetConfig>
      break;
 8003f14:	e000      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a40      	ldr	r2, [pc, #256]	; (8004098 <TIM_Base_SetConfig+0x114>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa2:	d00f      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a3d      	ldr	r2, [pc, #244]	; (800409c <TIM_Base_SetConfig+0x118>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a3c      	ldr	r2, [pc, #240]	; (80040a0 <TIM_Base_SetConfig+0x11c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a3b      	ldr	r2, [pc, #236]	; (80040a4 <TIM_Base_SetConfig+0x120>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a3a      	ldr	r2, [pc, #232]	; (80040a8 <TIM_Base_SetConfig+0x124>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d108      	bne.n	8003fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2f      	ldr	r2, [pc, #188]	; (8004098 <TIM_Base_SetConfig+0x114>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02b      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe4:	d027      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2c      	ldr	r2, [pc, #176]	; (800409c <TIM_Base_SetConfig+0x118>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d023      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a2b      	ldr	r2, [pc, #172]	; (80040a0 <TIM_Base_SetConfig+0x11c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01f      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a2a      	ldr	r2, [pc, #168]	; (80040a4 <TIM_Base_SetConfig+0x120>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01b      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a29      	ldr	r2, [pc, #164]	; (80040a8 <TIM_Base_SetConfig+0x124>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d017      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a28      	ldr	r2, [pc, #160]	; (80040ac <TIM_Base_SetConfig+0x128>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <TIM_Base_SetConfig+0x12c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00f      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a26      	ldr	r2, [pc, #152]	; (80040b4 <TIM_Base_SetConfig+0x130>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00b      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a25      	ldr	r2, [pc, #148]	; (80040b8 <TIM_Base_SetConfig+0x134>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a24      	ldr	r2, [pc, #144]	; (80040bc <TIM_Base_SetConfig+0x138>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a23      	ldr	r2, [pc, #140]	; (80040c0 <TIM_Base_SetConfig+0x13c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d108      	bne.n	8004048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <TIM_Base_SetConfig+0x114>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_Base_SetConfig+0xf8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <TIM_Base_SetConfig+0x124>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d103      	bne.n	8004084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	615a      	str	r2, [r3, #20]
}
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40010000 	.word	0x40010000
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800
 80040a4:	40000c00 	.word	0x40000c00
 80040a8:	40010400 	.word	0x40010400
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40014400 	.word	0x40014400
 80040b4:	40014800 	.word	0x40014800
 80040b8:	40001800 	.word	0x40001800
 80040bc:	40001c00 	.word	0x40001c00
 80040c0:	40002000 	.word	0x40002000

080040c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f023 0201 	bic.w	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 030a 	bic.w	r3, r3, #10
 8004100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	621a      	str	r2, [r3, #32]
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004122:	b480      	push	{r7}
 8004124:	b087      	sub	sp, #28
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f023 0210 	bic.w	r2, r3, #16
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800414c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	031b      	lsls	r3, r3, #12
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800415e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	621a      	str	r2, [r3, #32]
}
 8004176:	bf00      	nop
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004182:	b480      	push	{r7}
 8004184:	b085      	sub	sp, #20
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	f043 0307 	orr.w	r3, r3, #7
 80041a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	021a      	lsls	r2, r3, #8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	431a      	orrs	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4313      	orrs	r3, r2
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800420c:	2302      	movs	r3, #2
 800420e:	e05a      	b.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a21      	ldr	r2, [pc, #132]	; (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d022      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425c:	d01d      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d018      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00e      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a15      	ldr	r2, [pc, #84]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10c      	bne.n	80042b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40010000 	.word	0x40010000
 80042d8:	40000400 	.word	0x40000400
 80042dc:	40000800 	.word	0x40000800
 80042e0:	40000c00 	.word	0x40000c00
 80042e4:	40010400 	.word	0x40010400
 80042e8:	40014000 	.word	0x40014000
 80042ec:	40001800 	.word	0x40001800

080042f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e03f      	b.n	80043aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fd fd28 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2224      	movs	r2, #36	; 0x24
 8004348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800435a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 faf9 	bl	8004954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	4613      	mov	r3, r2
 80043be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d130      	bne.n	800442e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_UART_Transmit_IT+0x26>
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e029      	b.n	8004430 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_UART_Transmit_IT+0x38>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e022      	b.n	8004430 <HAL_UART_Transmit_IT+0x7e>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2221      	movs	r2, #33	; 0x21
 800440e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004428:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e000      	b.n	8004430 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800442e:	2302      	movs	r3, #2
  }
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b20      	cmp	r3, #32
 8004454:	d140      	bne.n	80044d8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <HAL_UART_Receive_IT+0x26>
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e039      	b.n	80044da <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_UART_Receive_IT+0x38>
 8004470:	2302      	movs	r3, #2
 8004472:	e032      	b.n	80044da <HAL_UART_Receive_IT+0x9e>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	88fa      	ldrh	r2, [r7, #6]
 8004486:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2222      	movs	r2, #34	; 0x22
 8004498:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0220 	orr.w	r2, r2, #32
 80044d2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	e000      	b.n	80044da <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
  }
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10d      	bne.n	800453a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_UART_IRQHandler+0x52>
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f98c 	bl	8004850 <UART_Receive_IT>
      return;
 8004538:	e0d1      	b.n	80046de <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80b0 	beq.w	80046a2 <HAL_UART_IRQHandler+0x1ba>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <HAL_UART_IRQHandler+0x70>
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80a5 	beq.w	80046a2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_UART_IRQHandler+0x90>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004570:	f043 0201 	orr.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_UART_IRQHandler+0xb0>
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	f043 0202 	orr.w	r2, r3, #2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <HAL_UART_IRQHandler+0xd0>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	f043 0204 	orr.w	r2, r3, #4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00f      	beq.n	80045e2 <HAL_UART_IRQHandler+0xfa>
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d104      	bne.n	80045d6 <HAL_UART_IRQHandler+0xee>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	f043 0208 	orr.w	r2, r3, #8
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d078      	beq.n	80046dc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <HAL_UART_IRQHandler+0x11c>
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f926 	bl	8004850 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	bf0c      	ite	eq
 8004612:	2301      	moveq	r3, #1
 8004614:	2300      	movne	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <HAL_UART_IRQHandler+0x144>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d031      	beq.n	8004690 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f86f 	bl	8004710 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b40      	cmp	r3, #64	; 0x40
 800463e:	d123      	bne.n	8004688 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800464e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	2b00      	cmp	r3, #0
 8004656:	d013      	beq.n	8004680 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	4a21      	ldr	r2, [pc, #132]	; (80046e4 <HAL_UART_IRQHandler+0x1fc>)
 800465e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	4618      	mov	r0, r3
 8004666:	f7fd fe16 	bl	8002296 <HAL_DMA_Abort_IT>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d016      	beq.n	800469e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800467a:	4610      	mov	r0, r2
 800467c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467e:	e00e      	b.n	800469e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f83b 	bl	80046fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004686:	e00a      	b.n	800469e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f837 	bl	80046fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800468e:	e006      	b.n	800469e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f833 	bl	80046fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800469c:	e01e      	b.n	80046dc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469e:	bf00      	nop
    return;
 80046a0:	e01c      	b.n	80046dc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_UART_IRQHandler+0x1d6>
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f85c 	bl	8004774 <UART_Transmit_IT>
    return;
 80046bc:	e00f      	b.n	80046de <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_UART_IRQHandler+0x1f6>
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f8a4 	bl	8004820 <UART_EndTransmit_IT>
    return;
 80046d8:	bf00      	nop
 80046da:	e000      	b.n	80046de <HAL_UART_IRQHandler+0x1f6>
    return;
 80046dc:	bf00      	nop
  }
}
 80046de:	3720      	adds	r7, #32
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	0800474d 	.word	0x0800474d

080046e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004726:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff ffc8 	bl	80046fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b21      	cmp	r3, #33	; 0x21
 8004786:	d144      	bne.n	8004812 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004790:	d11a      	bne.n	80047c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	1c9a      	adds	r2, r3, #2
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]
 80047ba:	e00e      	b.n	80047da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	621a      	str	r2, [r3, #32]
 80047c6:	e008      	b.n	80047da <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	1c59      	adds	r1, r3, #1
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6211      	str	r1, [r2, #32]
 80047d2:	781a      	ldrb	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4619      	mov	r1, r3
 80047e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10f      	bne.n	800480e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800480c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004836:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ff51 	bl	80046e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b22      	cmp	r3, #34	; 0x22
 8004862:	d171      	bne.n	8004948 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486c:	d123      	bne.n	80048b6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10e      	bne.n	800489a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28
 8004898:	e029      	b.n	80048ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28
 80048b4:	e01b      	b.n	80048ee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6858      	ldr	r0, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c8:	1c59      	adds	r1, r3, #1
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6291      	str	r1, [r2, #40]	; 0x28
 80048ce:	b2c2      	uxtb	r2, r0
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e00c      	b.n	80048ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	1c58      	adds	r0, r3, #1
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	6288      	str	r0, [r1, #40]	; 0x28
 80048e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	4619      	mov	r1, r3
 80048fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d120      	bne.n	8004944 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0220 	bic.w	r2, r2, #32
 8004910:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004920:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fc fb10 	bl	8000f60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	e002      	b.n	800494a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e000      	b.n	800494a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004948:	2302      	movs	r3, #2
  }
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004996:	f023 030c 	bic.w	r3, r3, #12
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	430b      	orrs	r3, r1
 80049a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c2:	f040 818b 	bne.w	8004cdc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4ac1      	ldr	r2, [pc, #772]	; (8004cd0 <UART_SetConfig+0x37c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d005      	beq.n	80049dc <UART_SetConfig+0x88>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4abf      	ldr	r2, [pc, #764]	; (8004cd4 <UART_SetConfig+0x380>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	f040 80bd 	bne.w	8004b56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049dc:	f7fe fde4 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 80049e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	461d      	mov	r5, r3
 80049e6:	f04f 0600 	mov.w	r6, #0
 80049ea:	46a8      	mov	r8, r5
 80049ec:	46b1      	mov	r9, r6
 80049ee:	eb18 0308 	adds.w	r3, r8, r8
 80049f2:	eb49 0409 	adc.w	r4, r9, r9
 80049f6:	4698      	mov	r8, r3
 80049f8:	46a1      	mov	r9, r4
 80049fa:	eb18 0805 	adds.w	r8, r8, r5
 80049fe:	eb49 0906 	adc.w	r9, r9, r6
 8004a02:	f04f 0100 	mov.w	r1, #0
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a16:	4688      	mov	r8, r1
 8004a18:	4691      	mov	r9, r2
 8004a1a:	eb18 0005 	adds.w	r0, r8, r5
 8004a1e:	eb49 0106 	adc.w	r1, r9, r6
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	461d      	mov	r5, r3
 8004a28:	f04f 0600 	mov.w	r6, #0
 8004a2c:	196b      	adds	r3, r5, r5
 8004a2e:	eb46 0406 	adc.w	r4, r6, r6
 8004a32:	461a      	mov	r2, r3
 8004a34:	4623      	mov	r3, r4
 8004a36:	f7fb fc2b 	bl	8000290 <__aeabi_uldivmod>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	461a      	mov	r2, r3
 8004a40:	4ba5      	ldr	r3, [pc, #660]	; (8004cd8 <UART_SetConfig+0x384>)
 8004a42:	fba3 2302 	umull	r2, r3, r3, r2
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	461d      	mov	r5, r3
 8004a50:	f04f 0600 	mov.w	r6, #0
 8004a54:	46a9      	mov	r9, r5
 8004a56:	46b2      	mov	sl, r6
 8004a58:	eb19 0309 	adds.w	r3, r9, r9
 8004a5c:	eb4a 040a 	adc.w	r4, sl, sl
 8004a60:	4699      	mov	r9, r3
 8004a62:	46a2      	mov	sl, r4
 8004a64:	eb19 0905 	adds.w	r9, r9, r5
 8004a68:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a6c:	f04f 0100 	mov.w	r1, #0
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a80:	4689      	mov	r9, r1
 8004a82:	4692      	mov	sl, r2
 8004a84:	eb19 0005 	adds.w	r0, r9, r5
 8004a88:	eb4a 0106 	adc.w	r1, sl, r6
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	461d      	mov	r5, r3
 8004a92:	f04f 0600 	mov.w	r6, #0
 8004a96:	196b      	adds	r3, r5, r5
 8004a98:	eb46 0406 	adc.w	r4, r6, r6
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	f7fb fbf6 	bl	8000290 <__aeabi_uldivmod>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4b8b      	ldr	r3, [pc, #556]	; (8004cd8 <UART_SetConfig+0x384>)
 8004aac:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	2164      	movs	r1, #100	; 0x64
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	3332      	adds	r3, #50	; 0x32
 8004abe:	4a86      	ldr	r2, [pc, #536]	; (8004cd8 <UART_SetConfig+0x384>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004acc:	4498      	add	r8, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	461d      	mov	r5, r3
 8004ad2:	f04f 0600 	mov.w	r6, #0
 8004ad6:	46a9      	mov	r9, r5
 8004ad8:	46b2      	mov	sl, r6
 8004ada:	eb19 0309 	adds.w	r3, r9, r9
 8004ade:	eb4a 040a 	adc.w	r4, sl, sl
 8004ae2:	4699      	mov	r9, r3
 8004ae4:	46a2      	mov	sl, r4
 8004ae6:	eb19 0905 	adds.w	r9, r9, r5
 8004aea:	eb4a 0a06 	adc.w	sl, sl, r6
 8004aee:	f04f 0100 	mov.w	r1, #0
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004afa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004afe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b02:	4689      	mov	r9, r1
 8004b04:	4692      	mov	sl, r2
 8004b06:	eb19 0005 	adds.w	r0, r9, r5
 8004b0a:	eb4a 0106 	adc.w	r1, sl, r6
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	461d      	mov	r5, r3
 8004b14:	f04f 0600 	mov.w	r6, #0
 8004b18:	196b      	adds	r3, r5, r5
 8004b1a:	eb46 0406 	adc.w	r4, r6, r6
 8004b1e:	461a      	mov	r2, r3
 8004b20:	4623      	mov	r3, r4
 8004b22:	f7fb fbb5 	bl	8000290 <__aeabi_uldivmod>
 8004b26:	4603      	mov	r3, r0
 8004b28:	460c      	mov	r4, r1
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	4b6a      	ldr	r3, [pc, #424]	; (8004cd8 <UART_SetConfig+0x384>)
 8004b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	2164      	movs	r1, #100	; 0x64
 8004b36:	fb01 f303 	mul.w	r3, r1, r3
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	3332      	adds	r3, #50	; 0x32
 8004b40:	4a65      	ldr	r2, [pc, #404]	; (8004cd8 <UART_SetConfig+0x384>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	f003 0207 	and.w	r2, r3, #7
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4442      	add	r2, r8
 8004b52:	609a      	str	r2, [r3, #8]
 8004b54:	e26f      	b.n	8005036 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b56:	f7fe fd13 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8004b5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	461d      	mov	r5, r3
 8004b60:	f04f 0600 	mov.w	r6, #0
 8004b64:	46a8      	mov	r8, r5
 8004b66:	46b1      	mov	r9, r6
 8004b68:	eb18 0308 	adds.w	r3, r8, r8
 8004b6c:	eb49 0409 	adc.w	r4, r9, r9
 8004b70:	4698      	mov	r8, r3
 8004b72:	46a1      	mov	r9, r4
 8004b74:	eb18 0805 	adds.w	r8, r8, r5
 8004b78:	eb49 0906 	adc.w	r9, r9, r6
 8004b7c:	f04f 0100 	mov.w	r1, #0
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b90:	4688      	mov	r8, r1
 8004b92:	4691      	mov	r9, r2
 8004b94:	eb18 0005 	adds.w	r0, r8, r5
 8004b98:	eb49 0106 	adc.w	r1, r9, r6
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	461d      	mov	r5, r3
 8004ba2:	f04f 0600 	mov.w	r6, #0
 8004ba6:	196b      	adds	r3, r5, r5
 8004ba8:	eb46 0406 	adc.w	r4, r6, r6
 8004bac:	461a      	mov	r2, r3
 8004bae:	4623      	mov	r3, r4
 8004bb0:	f7fb fb6e 	bl	8000290 <__aeabi_uldivmod>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <UART_SetConfig+0x384>)
 8004bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	461d      	mov	r5, r3
 8004bca:	f04f 0600 	mov.w	r6, #0
 8004bce:	46a9      	mov	r9, r5
 8004bd0:	46b2      	mov	sl, r6
 8004bd2:	eb19 0309 	adds.w	r3, r9, r9
 8004bd6:	eb4a 040a 	adc.w	r4, sl, sl
 8004bda:	4699      	mov	r9, r3
 8004bdc:	46a2      	mov	sl, r4
 8004bde:	eb19 0905 	adds.w	r9, r9, r5
 8004be2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bfa:	4689      	mov	r9, r1
 8004bfc:	4692      	mov	sl, r2
 8004bfe:	eb19 0005 	adds.w	r0, r9, r5
 8004c02:	eb4a 0106 	adc.w	r1, sl, r6
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	f04f 0600 	mov.w	r6, #0
 8004c10:	196b      	adds	r3, r5, r5
 8004c12:	eb46 0406 	adc.w	r4, r6, r6
 8004c16:	461a      	mov	r2, r3
 8004c18:	4623      	mov	r3, r4
 8004c1a:	f7fb fb39 	bl	8000290 <__aeabi_uldivmod>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	460c      	mov	r4, r1
 8004c22:	461a      	mov	r2, r3
 8004c24:	4b2c      	ldr	r3, [pc, #176]	; (8004cd8 <UART_SetConfig+0x384>)
 8004c26:	fba3 1302 	umull	r1, r3, r3, r2
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	2164      	movs	r1, #100	; 0x64
 8004c2e:	fb01 f303 	mul.w	r3, r1, r3
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	3332      	adds	r3, #50	; 0x32
 8004c38:	4a27      	ldr	r2, [pc, #156]	; (8004cd8 <UART_SetConfig+0x384>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c46:	4498      	add	r8, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	461d      	mov	r5, r3
 8004c4c:	f04f 0600 	mov.w	r6, #0
 8004c50:	46a9      	mov	r9, r5
 8004c52:	46b2      	mov	sl, r6
 8004c54:	eb19 0309 	adds.w	r3, r9, r9
 8004c58:	eb4a 040a 	adc.w	r4, sl, sl
 8004c5c:	4699      	mov	r9, r3
 8004c5e:	46a2      	mov	sl, r4
 8004c60:	eb19 0905 	adds.w	r9, r9, r5
 8004c64:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c68:	f04f 0100 	mov.w	r1, #0
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c7c:	4689      	mov	r9, r1
 8004c7e:	4692      	mov	sl, r2
 8004c80:	eb19 0005 	adds.w	r0, r9, r5
 8004c84:	eb4a 0106 	adc.w	r1, sl, r6
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	461d      	mov	r5, r3
 8004c8e:	f04f 0600 	mov.w	r6, #0
 8004c92:	196b      	adds	r3, r5, r5
 8004c94:	eb46 0406 	adc.w	r4, r6, r6
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4623      	mov	r3, r4
 8004c9c:	f7fb faf8 	bl	8000290 <__aeabi_uldivmod>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <UART_SetConfig+0x384>)
 8004ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cac:	095b      	lsrs	r3, r3, #5
 8004cae:	2164      	movs	r1, #100	; 0x64
 8004cb0:	fb01 f303 	mul.w	r3, r1, r3
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	3332      	adds	r3, #50	; 0x32
 8004cba:	4a07      	ldr	r2, [pc, #28]	; (8004cd8 <UART_SetConfig+0x384>)
 8004cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	f003 0207 	and.w	r2, r3, #7
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4442      	add	r2, r8
 8004ccc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004cce:	e1b2      	b.n	8005036 <UART_SetConfig+0x6e2>
 8004cd0:	40011000 	.word	0x40011000
 8004cd4:	40011400 	.word	0x40011400
 8004cd8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4ad7      	ldr	r2, [pc, #860]	; (8005040 <UART_SetConfig+0x6ec>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d005      	beq.n	8004cf2 <UART_SetConfig+0x39e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4ad6      	ldr	r2, [pc, #856]	; (8005044 <UART_SetConfig+0x6f0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	f040 80d1 	bne.w	8004e94 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cf2:	f7fe fc59 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 8004cf6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	469a      	mov	sl, r3
 8004cfc:	f04f 0b00 	mov.w	fp, #0
 8004d00:	46d0      	mov	r8, sl
 8004d02:	46d9      	mov	r9, fp
 8004d04:	eb18 0308 	adds.w	r3, r8, r8
 8004d08:	eb49 0409 	adc.w	r4, r9, r9
 8004d0c:	4698      	mov	r8, r3
 8004d0e:	46a1      	mov	r9, r4
 8004d10:	eb18 080a 	adds.w	r8, r8, sl
 8004d14:	eb49 090b 	adc.w	r9, r9, fp
 8004d18:	f04f 0100 	mov.w	r1, #0
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d2c:	4688      	mov	r8, r1
 8004d2e:	4691      	mov	r9, r2
 8004d30:	eb1a 0508 	adds.w	r5, sl, r8
 8004d34:	eb4b 0609 	adc.w	r6, fp, r9
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	f04f 0400 	mov.w	r4, #0
 8004d4a:	0094      	lsls	r4, r2, #2
 8004d4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d50:	008b      	lsls	r3, r1, #2
 8004d52:	461a      	mov	r2, r3
 8004d54:	4623      	mov	r3, r4
 8004d56:	4628      	mov	r0, r5
 8004d58:	4631      	mov	r1, r6
 8004d5a:	f7fb fa99 	bl	8000290 <__aeabi_uldivmod>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	461a      	mov	r2, r3
 8004d64:	4bb8      	ldr	r3, [pc, #736]	; (8005048 <UART_SetConfig+0x6f4>)
 8004d66:	fba3 2302 	umull	r2, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	469b      	mov	fp, r3
 8004d74:	f04f 0c00 	mov.w	ip, #0
 8004d78:	46d9      	mov	r9, fp
 8004d7a:	46e2      	mov	sl, ip
 8004d7c:	eb19 0309 	adds.w	r3, r9, r9
 8004d80:	eb4a 040a 	adc.w	r4, sl, sl
 8004d84:	4699      	mov	r9, r3
 8004d86:	46a2      	mov	sl, r4
 8004d88:	eb19 090b 	adds.w	r9, r9, fp
 8004d8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d90:	f04f 0100 	mov.w	r1, #0
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004da0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004da4:	4689      	mov	r9, r1
 8004da6:	4692      	mov	sl, r2
 8004da8:	eb1b 0509 	adds.w	r5, fp, r9
 8004dac:	eb4c 060a 	adc.w	r6, ip, sl
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	4619      	mov	r1, r3
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	f04f 0400 	mov.w	r4, #0
 8004dc2:	0094      	lsls	r4, r2, #2
 8004dc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004dc8:	008b      	lsls	r3, r1, #2
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4623      	mov	r3, r4
 8004dce:	4628      	mov	r0, r5
 8004dd0:	4631      	mov	r1, r6
 8004dd2:	f7fb fa5d 	bl	8000290 <__aeabi_uldivmod>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	460c      	mov	r4, r1
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4b9a      	ldr	r3, [pc, #616]	; (8005048 <UART_SetConfig+0x6f4>)
 8004dde:	fba3 1302 	umull	r1, r3, r3, r2
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	2164      	movs	r1, #100	; 0x64
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	3332      	adds	r3, #50	; 0x32
 8004df0:	4a95      	ldr	r2, [pc, #596]	; (8005048 <UART_SetConfig+0x6f4>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dfc:	4498      	add	r8, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	469b      	mov	fp, r3
 8004e02:	f04f 0c00 	mov.w	ip, #0
 8004e06:	46d9      	mov	r9, fp
 8004e08:	46e2      	mov	sl, ip
 8004e0a:	eb19 0309 	adds.w	r3, r9, r9
 8004e0e:	eb4a 040a 	adc.w	r4, sl, sl
 8004e12:	4699      	mov	r9, r3
 8004e14:	46a2      	mov	sl, r4
 8004e16:	eb19 090b 	adds.w	r9, r9, fp
 8004e1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e1e:	f04f 0100 	mov.w	r1, #0
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e32:	4689      	mov	r9, r1
 8004e34:	4692      	mov	sl, r2
 8004e36:	eb1b 0509 	adds.w	r5, fp, r9
 8004e3a:	eb4c 060a 	adc.w	r6, ip, sl
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4619      	mov	r1, r3
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	f04f 0400 	mov.w	r4, #0
 8004e50:	0094      	lsls	r4, r2, #2
 8004e52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e56:	008b      	lsls	r3, r1, #2
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4623      	mov	r3, r4
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	4631      	mov	r1, r6
 8004e60:	f7fb fa16 	bl	8000290 <__aeabi_uldivmod>
 8004e64:	4603      	mov	r3, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4b77      	ldr	r3, [pc, #476]	; (8005048 <UART_SetConfig+0x6f4>)
 8004e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e70:	095b      	lsrs	r3, r3, #5
 8004e72:	2164      	movs	r1, #100	; 0x64
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	3332      	adds	r3, #50	; 0x32
 8004e7e:	4a72      	ldr	r2, [pc, #456]	; (8005048 <UART_SetConfig+0x6f4>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	f003 020f 	and.w	r2, r3, #15
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4442      	add	r2, r8
 8004e90:	609a      	str	r2, [r3, #8]
 8004e92:	e0d0      	b.n	8005036 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e94:	f7fe fb74 	bl	8003580 <HAL_RCC_GetPCLK1Freq>
 8004e98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	469a      	mov	sl, r3
 8004e9e:	f04f 0b00 	mov.w	fp, #0
 8004ea2:	46d0      	mov	r8, sl
 8004ea4:	46d9      	mov	r9, fp
 8004ea6:	eb18 0308 	adds.w	r3, r8, r8
 8004eaa:	eb49 0409 	adc.w	r4, r9, r9
 8004eae:	4698      	mov	r8, r3
 8004eb0:	46a1      	mov	r9, r4
 8004eb2:	eb18 080a 	adds.w	r8, r8, sl
 8004eb6:	eb49 090b 	adc.w	r9, r9, fp
 8004eba:	f04f 0100 	mov.w	r1, #0
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ec6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004eca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ece:	4688      	mov	r8, r1
 8004ed0:	4691      	mov	r9, r2
 8004ed2:	eb1a 0508 	adds.w	r5, sl, r8
 8004ed6:	eb4b 0609 	adc.w	r6, fp, r9
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	f04f 0400 	mov.w	r4, #0
 8004eec:	0094      	lsls	r4, r2, #2
 8004eee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ef2:	008b      	lsls	r3, r1, #2
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4623      	mov	r3, r4
 8004ef8:	4628      	mov	r0, r5
 8004efa:	4631      	mov	r1, r6
 8004efc:	f7fb f9c8 	bl	8000290 <__aeabi_uldivmod>
 8004f00:	4603      	mov	r3, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	461a      	mov	r2, r3
 8004f06:	4b50      	ldr	r3, [pc, #320]	; (8005048 <UART_SetConfig+0x6f4>)
 8004f08:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0c:	095b      	lsrs	r3, r3, #5
 8004f0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	469b      	mov	fp, r3
 8004f16:	f04f 0c00 	mov.w	ip, #0
 8004f1a:	46d9      	mov	r9, fp
 8004f1c:	46e2      	mov	sl, ip
 8004f1e:	eb19 0309 	adds.w	r3, r9, r9
 8004f22:	eb4a 040a 	adc.w	r4, sl, sl
 8004f26:	4699      	mov	r9, r3
 8004f28:	46a2      	mov	sl, r4
 8004f2a:	eb19 090b 	adds.w	r9, r9, fp
 8004f2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f32:	f04f 0100 	mov.w	r1, #0
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f46:	4689      	mov	r9, r1
 8004f48:	4692      	mov	sl, r2
 8004f4a:	eb1b 0509 	adds.w	r5, fp, r9
 8004f4e:	eb4c 060a 	adc.w	r6, ip, sl
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	4619      	mov	r1, r3
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	f04f 0400 	mov.w	r4, #0
 8004f64:	0094      	lsls	r4, r2, #2
 8004f66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f6a:	008b      	lsls	r3, r1, #2
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4623      	mov	r3, r4
 8004f70:	4628      	mov	r0, r5
 8004f72:	4631      	mov	r1, r6
 8004f74:	f7fb f98c 	bl	8000290 <__aeabi_uldivmod>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4b32      	ldr	r3, [pc, #200]	; (8005048 <UART_SetConfig+0x6f4>)
 8004f80:	fba3 1302 	umull	r1, r3, r3, r2
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	2164      	movs	r1, #100	; 0x64
 8004f88:	fb01 f303 	mul.w	r3, r1, r3
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	3332      	adds	r3, #50	; 0x32
 8004f92:	4a2d      	ldr	r2, [pc, #180]	; (8005048 <UART_SetConfig+0x6f4>)
 8004f94:	fba2 2303 	umull	r2, r3, r2, r3
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f9e:	4498      	add	r8, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	469b      	mov	fp, r3
 8004fa4:	f04f 0c00 	mov.w	ip, #0
 8004fa8:	46d9      	mov	r9, fp
 8004faa:	46e2      	mov	sl, ip
 8004fac:	eb19 0309 	adds.w	r3, r9, r9
 8004fb0:	eb4a 040a 	adc.w	r4, sl, sl
 8004fb4:	4699      	mov	r9, r3
 8004fb6:	46a2      	mov	sl, r4
 8004fb8:	eb19 090b 	adds.w	r9, r9, fp
 8004fbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fc0:	f04f 0100 	mov.w	r1, #0
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fd4:	4689      	mov	r9, r1
 8004fd6:	4692      	mov	sl, r2
 8004fd8:	eb1b 0509 	adds.w	r5, fp, r9
 8004fdc:	eb4c 060a 	adc.w	r6, ip, sl
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	f04f 0400 	mov.w	r4, #0
 8004ff2:	0094      	lsls	r4, r2, #2
 8004ff4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ff8:	008b      	lsls	r3, r1, #2
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	4628      	mov	r0, r5
 8005000:	4631      	mov	r1, r6
 8005002:	f7fb f945 	bl	8000290 <__aeabi_uldivmod>
 8005006:	4603      	mov	r3, r0
 8005008:	460c      	mov	r4, r1
 800500a:	461a      	mov	r2, r3
 800500c:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <UART_SetConfig+0x6f4>)
 800500e:	fba3 1302 	umull	r1, r3, r3, r2
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	2164      	movs	r1, #100	; 0x64
 8005016:	fb01 f303 	mul.w	r3, r1, r3
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	3332      	adds	r3, #50	; 0x32
 8005020:	4a09      	ldr	r2, [pc, #36]	; (8005048 <UART_SetConfig+0x6f4>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	f003 020f 	and.w	r2, r3, #15
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4442      	add	r2, r8
 8005032:	609a      	str	r2, [r3, #8]
}
 8005034:	e7ff      	b.n	8005036 <UART_SetConfig+0x6e2>
 8005036:	bf00      	nop
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005040:	40011000 	.word	0x40011000
 8005044:	40011400 	.word	0x40011400
 8005048:	51eb851f 	.word	0x51eb851f

0800504c <__errno>:
 800504c:	4b01      	ldr	r3, [pc, #4]	; (8005054 <__errno+0x8>)
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20000010 	.word	0x20000010

08005058 <__libc_init_array>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	4e0d      	ldr	r6, [pc, #52]	; (8005090 <__libc_init_array+0x38>)
 800505c:	4c0d      	ldr	r4, [pc, #52]	; (8005094 <__libc_init_array+0x3c>)
 800505e:	1ba4      	subs	r4, r4, r6
 8005060:	10a4      	asrs	r4, r4, #2
 8005062:	2500      	movs	r5, #0
 8005064:	42a5      	cmp	r5, r4
 8005066:	d109      	bne.n	800507c <__libc_init_array+0x24>
 8005068:	4e0b      	ldr	r6, [pc, #44]	; (8005098 <__libc_init_array+0x40>)
 800506a:	4c0c      	ldr	r4, [pc, #48]	; (800509c <__libc_init_array+0x44>)
 800506c:	f000 fc36 	bl	80058dc <_init>
 8005070:	1ba4      	subs	r4, r4, r6
 8005072:	10a4      	asrs	r4, r4, #2
 8005074:	2500      	movs	r5, #0
 8005076:	42a5      	cmp	r5, r4
 8005078:	d105      	bne.n	8005086 <__libc_init_array+0x2e>
 800507a:	bd70      	pop	{r4, r5, r6, pc}
 800507c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005080:	4798      	blx	r3
 8005082:	3501      	adds	r5, #1
 8005084:	e7ee      	b.n	8005064 <__libc_init_array+0xc>
 8005086:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800508a:	4798      	blx	r3
 800508c:	3501      	adds	r5, #1
 800508e:	e7f2      	b.n	8005076 <__libc_init_array+0x1e>
 8005090:	08005ab4 	.word	0x08005ab4
 8005094:	08005ab4 	.word	0x08005ab4
 8005098:	08005ab4 	.word	0x08005ab4
 800509c:	08005ab8 	.word	0x08005ab8

080050a0 <memset>:
 80050a0:	4402      	add	r2, r0
 80050a2:	4603      	mov	r3, r0
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d100      	bne.n	80050aa <memset+0xa>
 80050a8:	4770      	bx	lr
 80050aa:	f803 1b01 	strb.w	r1, [r3], #1
 80050ae:	e7f9      	b.n	80050a4 <memset+0x4>

080050b0 <siprintf>:
 80050b0:	b40e      	push	{r1, r2, r3}
 80050b2:	b500      	push	{lr}
 80050b4:	b09c      	sub	sp, #112	; 0x70
 80050b6:	ab1d      	add	r3, sp, #116	; 0x74
 80050b8:	9002      	str	r0, [sp, #8]
 80050ba:	9006      	str	r0, [sp, #24]
 80050bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050c0:	4809      	ldr	r0, [pc, #36]	; (80050e8 <siprintf+0x38>)
 80050c2:	9107      	str	r1, [sp, #28]
 80050c4:	9104      	str	r1, [sp, #16]
 80050c6:	4909      	ldr	r1, [pc, #36]	; (80050ec <siprintf+0x3c>)
 80050c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80050cc:	9105      	str	r1, [sp, #20]
 80050ce:	6800      	ldr	r0, [r0, #0]
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	a902      	add	r1, sp, #8
 80050d4:	f000 f876 	bl	80051c4 <_svfiprintf_r>
 80050d8:	9b02      	ldr	r3, [sp, #8]
 80050da:	2200      	movs	r2, #0
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	b01c      	add	sp, #112	; 0x70
 80050e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050e4:	b003      	add	sp, #12
 80050e6:	4770      	bx	lr
 80050e8:	20000010 	.word	0x20000010
 80050ec:	ffff0208 	.word	0xffff0208

080050f0 <strcat>:
 80050f0:	b510      	push	{r4, lr}
 80050f2:	4603      	mov	r3, r0
 80050f4:	781a      	ldrb	r2, [r3, #0]
 80050f6:	1c5c      	adds	r4, r3, #1
 80050f8:	b93a      	cbnz	r2, 800510a <strcat+0x1a>
 80050fa:	3b01      	subs	r3, #1
 80050fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005100:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005104:	2a00      	cmp	r2, #0
 8005106:	d1f9      	bne.n	80050fc <strcat+0xc>
 8005108:	bd10      	pop	{r4, pc}
 800510a:	4623      	mov	r3, r4
 800510c:	e7f2      	b.n	80050f4 <strcat+0x4>

0800510e <__ssputs_r>:
 800510e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005112:	688e      	ldr	r6, [r1, #8]
 8005114:	429e      	cmp	r6, r3
 8005116:	4682      	mov	sl, r0
 8005118:	460c      	mov	r4, r1
 800511a:	4690      	mov	r8, r2
 800511c:	4699      	mov	r9, r3
 800511e:	d837      	bhi.n	8005190 <__ssputs_r+0x82>
 8005120:	898a      	ldrh	r2, [r1, #12]
 8005122:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005126:	d031      	beq.n	800518c <__ssputs_r+0x7e>
 8005128:	6825      	ldr	r5, [r4, #0]
 800512a:	6909      	ldr	r1, [r1, #16]
 800512c:	1a6f      	subs	r7, r5, r1
 800512e:	6965      	ldr	r5, [r4, #20]
 8005130:	2302      	movs	r3, #2
 8005132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005136:	fb95 f5f3 	sdiv	r5, r5, r3
 800513a:	f109 0301 	add.w	r3, r9, #1
 800513e:	443b      	add	r3, r7
 8005140:	429d      	cmp	r5, r3
 8005142:	bf38      	it	cc
 8005144:	461d      	movcc	r5, r3
 8005146:	0553      	lsls	r3, r2, #21
 8005148:	d530      	bpl.n	80051ac <__ssputs_r+0x9e>
 800514a:	4629      	mov	r1, r5
 800514c:	f000 fb2c 	bl	80057a8 <_malloc_r>
 8005150:	4606      	mov	r6, r0
 8005152:	b950      	cbnz	r0, 800516a <__ssputs_r+0x5c>
 8005154:	230c      	movs	r3, #12
 8005156:	f8ca 3000 	str.w	r3, [sl]
 800515a:	89a3      	ldrh	r3, [r4, #12]
 800515c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005160:	81a3      	strh	r3, [r4, #12]
 8005162:	f04f 30ff 	mov.w	r0, #4294967295
 8005166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800516a:	463a      	mov	r2, r7
 800516c:	6921      	ldr	r1, [r4, #16]
 800516e:	f000 faa9 	bl	80056c4 <memcpy>
 8005172:	89a3      	ldrh	r3, [r4, #12]
 8005174:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800517c:	81a3      	strh	r3, [r4, #12]
 800517e:	6126      	str	r6, [r4, #16]
 8005180:	6165      	str	r5, [r4, #20]
 8005182:	443e      	add	r6, r7
 8005184:	1bed      	subs	r5, r5, r7
 8005186:	6026      	str	r6, [r4, #0]
 8005188:	60a5      	str	r5, [r4, #8]
 800518a:	464e      	mov	r6, r9
 800518c:	454e      	cmp	r6, r9
 800518e:	d900      	bls.n	8005192 <__ssputs_r+0x84>
 8005190:	464e      	mov	r6, r9
 8005192:	4632      	mov	r2, r6
 8005194:	4641      	mov	r1, r8
 8005196:	6820      	ldr	r0, [r4, #0]
 8005198:	f000 fa9f 	bl	80056da <memmove>
 800519c:	68a3      	ldr	r3, [r4, #8]
 800519e:	1b9b      	subs	r3, r3, r6
 80051a0:	60a3      	str	r3, [r4, #8]
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	441e      	add	r6, r3
 80051a6:	6026      	str	r6, [r4, #0]
 80051a8:	2000      	movs	r0, #0
 80051aa:	e7dc      	b.n	8005166 <__ssputs_r+0x58>
 80051ac:	462a      	mov	r2, r5
 80051ae:	f000 fb55 	bl	800585c <_realloc_r>
 80051b2:	4606      	mov	r6, r0
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d1e2      	bne.n	800517e <__ssputs_r+0x70>
 80051b8:	6921      	ldr	r1, [r4, #16]
 80051ba:	4650      	mov	r0, sl
 80051bc:	f000 faa6 	bl	800570c <_free_r>
 80051c0:	e7c8      	b.n	8005154 <__ssputs_r+0x46>
	...

080051c4 <_svfiprintf_r>:
 80051c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c8:	461d      	mov	r5, r3
 80051ca:	898b      	ldrh	r3, [r1, #12]
 80051cc:	061f      	lsls	r7, r3, #24
 80051ce:	b09d      	sub	sp, #116	; 0x74
 80051d0:	4680      	mov	r8, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	4616      	mov	r6, r2
 80051d6:	d50f      	bpl.n	80051f8 <_svfiprintf_r+0x34>
 80051d8:	690b      	ldr	r3, [r1, #16]
 80051da:	b96b      	cbnz	r3, 80051f8 <_svfiprintf_r+0x34>
 80051dc:	2140      	movs	r1, #64	; 0x40
 80051de:	f000 fae3 	bl	80057a8 <_malloc_r>
 80051e2:	6020      	str	r0, [r4, #0]
 80051e4:	6120      	str	r0, [r4, #16]
 80051e6:	b928      	cbnz	r0, 80051f4 <_svfiprintf_r+0x30>
 80051e8:	230c      	movs	r3, #12
 80051ea:	f8c8 3000 	str.w	r3, [r8]
 80051ee:	f04f 30ff 	mov.w	r0, #4294967295
 80051f2:	e0c8      	b.n	8005386 <_svfiprintf_r+0x1c2>
 80051f4:	2340      	movs	r3, #64	; 0x40
 80051f6:	6163      	str	r3, [r4, #20]
 80051f8:	2300      	movs	r3, #0
 80051fa:	9309      	str	r3, [sp, #36]	; 0x24
 80051fc:	2320      	movs	r3, #32
 80051fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005202:	2330      	movs	r3, #48	; 0x30
 8005204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005208:	9503      	str	r5, [sp, #12]
 800520a:	f04f 0b01 	mov.w	fp, #1
 800520e:	4637      	mov	r7, r6
 8005210:	463d      	mov	r5, r7
 8005212:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005216:	b10b      	cbz	r3, 800521c <_svfiprintf_r+0x58>
 8005218:	2b25      	cmp	r3, #37	; 0x25
 800521a:	d13e      	bne.n	800529a <_svfiprintf_r+0xd6>
 800521c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005220:	d00b      	beq.n	800523a <_svfiprintf_r+0x76>
 8005222:	4653      	mov	r3, sl
 8005224:	4632      	mov	r2, r6
 8005226:	4621      	mov	r1, r4
 8005228:	4640      	mov	r0, r8
 800522a:	f7ff ff70 	bl	800510e <__ssputs_r>
 800522e:	3001      	adds	r0, #1
 8005230:	f000 80a4 	beq.w	800537c <_svfiprintf_r+0x1b8>
 8005234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005236:	4453      	add	r3, sl
 8005238:	9309      	str	r3, [sp, #36]	; 0x24
 800523a:	783b      	ldrb	r3, [r7, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 809d 	beq.w	800537c <_svfiprintf_r+0x1b8>
 8005242:	2300      	movs	r3, #0
 8005244:	f04f 32ff 	mov.w	r2, #4294967295
 8005248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800524c:	9304      	str	r3, [sp, #16]
 800524e:	9307      	str	r3, [sp, #28]
 8005250:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005254:	931a      	str	r3, [sp, #104]	; 0x68
 8005256:	462f      	mov	r7, r5
 8005258:	2205      	movs	r2, #5
 800525a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800525e:	4850      	ldr	r0, [pc, #320]	; (80053a0 <_svfiprintf_r+0x1dc>)
 8005260:	f7fa ffc6 	bl	80001f0 <memchr>
 8005264:	9b04      	ldr	r3, [sp, #16]
 8005266:	b9d0      	cbnz	r0, 800529e <_svfiprintf_r+0xda>
 8005268:	06d9      	lsls	r1, r3, #27
 800526a:	bf44      	itt	mi
 800526c:	2220      	movmi	r2, #32
 800526e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005272:	071a      	lsls	r2, r3, #28
 8005274:	bf44      	itt	mi
 8005276:	222b      	movmi	r2, #43	; 0x2b
 8005278:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800527c:	782a      	ldrb	r2, [r5, #0]
 800527e:	2a2a      	cmp	r2, #42	; 0x2a
 8005280:	d015      	beq.n	80052ae <_svfiprintf_r+0xea>
 8005282:	9a07      	ldr	r2, [sp, #28]
 8005284:	462f      	mov	r7, r5
 8005286:	2000      	movs	r0, #0
 8005288:	250a      	movs	r5, #10
 800528a:	4639      	mov	r1, r7
 800528c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005290:	3b30      	subs	r3, #48	; 0x30
 8005292:	2b09      	cmp	r3, #9
 8005294:	d94d      	bls.n	8005332 <_svfiprintf_r+0x16e>
 8005296:	b1b8      	cbz	r0, 80052c8 <_svfiprintf_r+0x104>
 8005298:	e00f      	b.n	80052ba <_svfiprintf_r+0xf6>
 800529a:	462f      	mov	r7, r5
 800529c:	e7b8      	b.n	8005210 <_svfiprintf_r+0x4c>
 800529e:	4a40      	ldr	r2, [pc, #256]	; (80053a0 <_svfiprintf_r+0x1dc>)
 80052a0:	1a80      	subs	r0, r0, r2
 80052a2:	fa0b f000 	lsl.w	r0, fp, r0
 80052a6:	4318      	orrs	r0, r3
 80052a8:	9004      	str	r0, [sp, #16]
 80052aa:	463d      	mov	r5, r7
 80052ac:	e7d3      	b.n	8005256 <_svfiprintf_r+0x92>
 80052ae:	9a03      	ldr	r2, [sp, #12]
 80052b0:	1d11      	adds	r1, r2, #4
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	9103      	str	r1, [sp, #12]
 80052b6:	2a00      	cmp	r2, #0
 80052b8:	db01      	blt.n	80052be <_svfiprintf_r+0xfa>
 80052ba:	9207      	str	r2, [sp, #28]
 80052bc:	e004      	b.n	80052c8 <_svfiprintf_r+0x104>
 80052be:	4252      	negs	r2, r2
 80052c0:	f043 0302 	orr.w	r3, r3, #2
 80052c4:	9207      	str	r2, [sp, #28]
 80052c6:	9304      	str	r3, [sp, #16]
 80052c8:	783b      	ldrb	r3, [r7, #0]
 80052ca:	2b2e      	cmp	r3, #46	; 0x2e
 80052cc:	d10c      	bne.n	80052e8 <_svfiprintf_r+0x124>
 80052ce:	787b      	ldrb	r3, [r7, #1]
 80052d0:	2b2a      	cmp	r3, #42	; 0x2a
 80052d2:	d133      	bne.n	800533c <_svfiprintf_r+0x178>
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	1d1a      	adds	r2, r3, #4
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	9203      	str	r2, [sp, #12]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bfb8      	it	lt
 80052e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80052e4:	3702      	adds	r7, #2
 80052e6:	9305      	str	r3, [sp, #20]
 80052e8:	4d2e      	ldr	r5, [pc, #184]	; (80053a4 <_svfiprintf_r+0x1e0>)
 80052ea:	7839      	ldrb	r1, [r7, #0]
 80052ec:	2203      	movs	r2, #3
 80052ee:	4628      	mov	r0, r5
 80052f0:	f7fa ff7e 	bl	80001f0 <memchr>
 80052f4:	b138      	cbz	r0, 8005306 <_svfiprintf_r+0x142>
 80052f6:	2340      	movs	r3, #64	; 0x40
 80052f8:	1b40      	subs	r0, r0, r5
 80052fa:	fa03 f000 	lsl.w	r0, r3, r0
 80052fe:	9b04      	ldr	r3, [sp, #16]
 8005300:	4303      	orrs	r3, r0
 8005302:	3701      	adds	r7, #1
 8005304:	9304      	str	r3, [sp, #16]
 8005306:	7839      	ldrb	r1, [r7, #0]
 8005308:	4827      	ldr	r0, [pc, #156]	; (80053a8 <_svfiprintf_r+0x1e4>)
 800530a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800530e:	2206      	movs	r2, #6
 8005310:	1c7e      	adds	r6, r7, #1
 8005312:	f7fa ff6d 	bl	80001f0 <memchr>
 8005316:	2800      	cmp	r0, #0
 8005318:	d038      	beq.n	800538c <_svfiprintf_r+0x1c8>
 800531a:	4b24      	ldr	r3, [pc, #144]	; (80053ac <_svfiprintf_r+0x1e8>)
 800531c:	bb13      	cbnz	r3, 8005364 <_svfiprintf_r+0x1a0>
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	3307      	adds	r3, #7
 8005322:	f023 0307 	bic.w	r3, r3, #7
 8005326:	3308      	adds	r3, #8
 8005328:	9303      	str	r3, [sp, #12]
 800532a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800532c:	444b      	add	r3, r9
 800532e:	9309      	str	r3, [sp, #36]	; 0x24
 8005330:	e76d      	b.n	800520e <_svfiprintf_r+0x4a>
 8005332:	fb05 3202 	mla	r2, r5, r2, r3
 8005336:	2001      	movs	r0, #1
 8005338:	460f      	mov	r7, r1
 800533a:	e7a6      	b.n	800528a <_svfiprintf_r+0xc6>
 800533c:	2300      	movs	r3, #0
 800533e:	3701      	adds	r7, #1
 8005340:	9305      	str	r3, [sp, #20]
 8005342:	4619      	mov	r1, r3
 8005344:	250a      	movs	r5, #10
 8005346:	4638      	mov	r0, r7
 8005348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800534c:	3a30      	subs	r2, #48	; 0x30
 800534e:	2a09      	cmp	r2, #9
 8005350:	d903      	bls.n	800535a <_svfiprintf_r+0x196>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0c8      	beq.n	80052e8 <_svfiprintf_r+0x124>
 8005356:	9105      	str	r1, [sp, #20]
 8005358:	e7c6      	b.n	80052e8 <_svfiprintf_r+0x124>
 800535a:	fb05 2101 	mla	r1, r5, r1, r2
 800535e:	2301      	movs	r3, #1
 8005360:	4607      	mov	r7, r0
 8005362:	e7f0      	b.n	8005346 <_svfiprintf_r+0x182>
 8005364:	ab03      	add	r3, sp, #12
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	4622      	mov	r2, r4
 800536a:	4b11      	ldr	r3, [pc, #68]	; (80053b0 <_svfiprintf_r+0x1ec>)
 800536c:	a904      	add	r1, sp, #16
 800536e:	4640      	mov	r0, r8
 8005370:	f3af 8000 	nop.w
 8005374:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005378:	4681      	mov	r9, r0
 800537a:	d1d6      	bne.n	800532a <_svfiprintf_r+0x166>
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	065b      	lsls	r3, r3, #25
 8005380:	f53f af35 	bmi.w	80051ee <_svfiprintf_r+0x2a>
 8005384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005386:	b01d      	add	sp, #116	; 0x74
 8005388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538c:	ab03      	add	r3, sp, #12
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	4622      	mov	r2, r4
 8005392:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <_svfiprintf_r+0x1ec>)
 8005394:	a904      	add	r1, sp, #16
 8005396:	4640      	mov	r0, r8
 8005398:	f000 f882 	bl	80054a0 <_printf_i>
 800539c:	e7ea      	b.n	8005374 <_svfiprintf_r+0x1b0>
 800539e:	bf00      	nop
 80053a0:	08005a78 	.word	0x08005a78
 80053a4:	08005a7e 	.word	0x08005a7e
 80053a8:	08005a82 	.word	0x08005a82
 80053ac:	00000000 	.word	0x00000000
 80053b0:	0800510f 	.word	0x0800510f

080053b4 <_printf_common>:
 80053b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b8:	4691      	mov	r9, r2
 80053ba:	461f      	mov	r7, r3
 80053bc:	688a      	ldr	r2, [r1, #8]
 80053be:	690b      	ldr	r3, [r1, #16]
 80053c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053c4:	4293      	cmp	r3, r2
 80053c6:	bfb8      	it	lt
 80053c8:	4613      	movlt	r3, r2
 80053ca:	f8c9 3000 	str.w	r3, [r9]
 80053ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053d2:	4606      	mov	r6, r0
 80053d4:	460c      	mov	r4, r1
 80053d6:	b112      	cbz	r2, 80053de <_printf_common+0x2a>
 80053d8:	3301      	adds	r3, #1
 80053da:	f8c9 3000 	str.w	r3, [r9]
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	0699      	lsls	r1, r3, #26
 80053e2:	bf42      	ittt	mi
 80053e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80053e8:	3302      	addmi	r3, #2
 80053ea:	f8c9 3000 	strmi.w	r3, [r9]
 80053ee:	6825      	ldr	r5, [r4, #0]
 80053f0:	f015 0506 	ands.w	r5, r5, #6
 80053f4:	d107      	bne.n	8005406 <_printf_common+0x52>
 80053f6:	f104 0a19 	add.w	sl, r4, #25
 80053fa:	68e3      	ldr	r3, [r4, #12]
 80053fc:	f8d9 2000 	ldr.w	r2, [r9]
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	42ab      	cmp	r3, r5
 8005404:	dc28      	bgt.n	8005458 <_printf_common+0xa4>
 8005406:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800540a:	6822      	ldr	r2, [r4, #0]
 800540c:	3300      	adds	r3, #0
 800540e:	bf18      	it	ne
 8005410:	2301      	movne	r3, #1
 8005412:	0692      	lsls	r2, r2, #26
 8005414:	d42d      	bmi.n	8005472 <_printf_common+0xbe>
 8005416:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800541a:	4639      	mov	r1, r7
 800541c:	4630      	mov	r0, r6
 800541e:	47c0      	blx	r8
 8005420:	3001      	adds	r0, #1
 8005422:	d020      	beq.n	8005466 <_printf_common+0xb2>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	68e5      	ldr	r5, [r4, #12]
 8005428:	f8d9 2000 	ldr.w	r2, [r9]
 800542c:	f003 0306 	and.w	r3, r3, #6
 8005430:	2b04      	cmp	r3, #4
 8005432:	bf08      	it	eq
 8005434:	1aad      	subeq	r5, r5, r2
 8005436:	68a3      	ldr	r3, [r4, #8]
 8005438:	6922      	ldr	r2, [r4, #16]
 800543a:	bf0c      	ite	eq
 800543c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005440:	2500      	movne	r5, #0
 8005442:	4293      	cmp	r3, r2
 8005444:	bfc4      	itt	gt
 8005446:	1a9b      	subgt	r3, r3, r2
 8005448:	18ed      	addgt	r5, r5, r3
 800544a:	f04f 0900 	mov.w	r9, #0
 800544e:	341a      	adds	r4, #26
 8005450:	454d      	cmp	r5, r9
 8005452:	d11a      	bne.n	800548a <_printf_common+0xd6>
 8005454:	2000      	movs	r0, #0
 8005456:	e008      	b.n	800546a <_printf_common+0xb6>
 8005458:	2301      	movs	r3, #1
 800545a:	4652      	mov	r2, sl
 800545c:	4639      	mov	r1, r7
 800545e:	4630      	mov	r0, r6
 8005460:	47c0      	blx	r8
 8005462:	3001      	adds	r0, #1
 8005464:	d103      	bne.n	800546e <_printf_common+0xba>
 8005466:	f04f 30ff 	mov.w	r0, #4294967295
 800546a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800546e:	3501      	adds	r5, #1
 8005470:	e7c3      	b.n	80053fa <_printf_common+0x46>
 8005472:	18e1      	adds	r1, r4, r3
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	2030      	movs	r0, #48	; 0x30
 8005478:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800547c:	4422      	add	r2, r4
 800547e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005482:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005486:	3302      	adds	r3, #2
 8005488:	e7c5      	b.n	8005416 <_printf_common+0x62>
 800548a:	2301      	movs	r3, #1
 800548c:	4622      	mov	r2, r4
 800548e:	4639      	mov	r1, r7
 8005490:	4630      	mov	r0, r6
 8005492:	47c0      	blx	r8
 8005494:	3001      	adds	r0, #1
 8005496:	d0e6      	beq.n	8005466 <_printf_common+0xb2>
 8005498:	f109 0901 	add.w	r9, r9, #1
 800549c:	e7d8      	b.n	8005450 <_printf_common+0x9c>
	...

080054a0 <_printf_i>:
 80054a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80054a8:	460c      	mov	r4, r1
 80054aa:	7e09      	ldrb	r1, [r1, #24]
 80054ac:	b085      	sub	sp, #20
 80054ae:	296e      	cmp	r1, #110	; 0x6e
 80054b0:	4617      	mov	r7, r2
 80054b2:	4606      	mov	r6, r0
 80054b4:	4698      	mov	r8, r3
 80054b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054b8:	f000 80b3 	beq.w	8005622 <_printf_i+0x182>
 80054bc:	d822      	bhi.n	8005504 <_printf_i+0x64>
 80054be:	2963      	cmp	r1, #99	; 0x63
 80054c0:	d036      	beq.n	8005530 <_printf_i+0x90>
 80054c2:	d80a      	bhi.n	80054da <_printf_i+0x3a>
 80054c4:	2900      	cmp	r1, #0
 80054c6:	f000 80b9 	beq.w	800563c <_printf_i+0x19c>
 80054ca:	2958      	cmp	r1, #88	; 0x58
 80054cc:	f000 8083 	beq.w	80055d6 <_printf_i+0x136>
 80054d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80054d8:	e032      	b.n	8005540 <_printf_i+0xa0>
 80054da:	2964      	cmp	r1, #100	; 0x64
 80054dc:	d001      	beq.n	80054e2 <_printf_i+0x42>
 80054de:	2969      	cmp	r1, #105	; 0x69
 80054e0:	d1f6      	bne.n	80054d0 <_printf_i+0x30>
 80054e2:	6820      	ldr	r0, [r4, #0]
 80054e4:	6813      	ldr	r3, [r2, #0]
 80054e6:	0605      	lsls	r5, r0, #24
 80054e8:	f103 0104 	add.w	r1, r3, #4
 80054ec:	d52a      	bpl.n	8005544 <_printf_i+0xa4>
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6011      	str	r1, [r2, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	da03      	bge.n	80054fe <_printf_i+0x5e>
 80054f6:	222d      	movs	r2, #45	; 0x2d
 80054f8:	425b      	negs	r3, r3
 80054fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80054fe:	486f      	ldr	r0, [pc, #444]	; (80056bc <_printf_i+0x21c>)
 8005500:	220a      	movs	r2, #10
 8005502:	e039      	b.n	8005578 <_printf_i+0xd8>
 8005504:	2973      	cmp	r1, #115	; 0x73
 8005506:	f000 809d 	beq.w	8005644 <_printf_i+0x1a4>
 800550a:	d808      	bhi.n	800551e <_printf_i+0x7e>
 800550c:	296f      	cmp	r1, #111	; 0x6f
 800550e:	d020      	beq.n	8005552 <_printf_i+0xb2>
 8005510:	2970      	cmp	r1, #112	; 0x70
 8005512:	d1dd      	bne.n	80054d0 <_printf_i+0x30>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	f043 0320 	orr.w	r3, r3, #32
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	e003      	b.n	8005526 <_printf_i+0x86>
 800551e:	2975      	cmp	r1, #117	; 0x75
 8005520:	d017      	beq.n	8005552 <_printf_i+0xb2>
 8005522:	2978      	cmp	r1, #120	; 0x78
 8005524:	d1d4      	bne.n	80054d0 <_printf_i+0x30>
 8005526:	2378      	movs	r3, #120	; 0x78
 8005528:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800552c:	4864      	ldr	r0, [pc, #400]	; (80056c0 <_printf_i+0x220>)
 800552e:	e055      	b.n	80055dc <_printf_i+0x13c>
 8005530:	6813      	ldr	r3, [r2, #0]
 8005532:	1d19      	adds	r1, r3, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6011      	str	r1, [r2, #0]
 8005538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800553c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005540:	2301      	movs	r3, #1
 8005542:	e08c      	b.n	800565e <_printf_i+0x1be>
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6011      	str	r1, [r2, #0]
 8005548:	f010 0f40 	tst.w	r0, #64	; 0x40
 800554c:	bf18      	it	ne
 800554e:	b21b      	sxthne	r3, r3
 8005550:	e7cf      	b.n	80054f2 <_printf_i+0x52>
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	6825      	ldr	r5, [r4, #0]
 8005556:	1d18      	adds	r0, r3, #4
 8005558:	6010      	str	r0, [r2, #0]
 800555a:	0628      	lsls	r0, r5, #24
 800555c:	d501      	bpl.n	8005562 <_printf_i+0xc2>
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	e002      	b.n	8005568 <_printf_i+0xc8>
 8005562:	0668      	lsls	r0, r5, #25
 8005564:	d5fb      	bpl.n	800555e <_printf_i+0xbe>
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	4854      	ldr	r0, [pc, #336]	; (80056bc <_printf_i+0x21c>)
 800556a:	296f      	cmp	r1, #111	; 0x6f
 800556c:	bf14      	ite	ne
 800556e:	220a      	movne	r2, #10
 8005570:	2208      	moveq	r2, #8
 8005572:	2100      	movs	r1, #0
 8005574:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005578:	6865      	ldr	r5, [r4, #4]
 800557a:	60a5      	str	r5, [r4, #8]
 800557c:	2d00      	cmp	r5, #0
 800557e:	f2c0 8095 	blt.w	80056ac <_printf_i+0x20c>
 8005582:	6821      	ldr	r1, [r4, #0]
 8005584:	f021 0104 	bic.w	r1, r1, #4
 8005588:	6021      	str	r1, [r4, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d13d      	bne.n	800560a <_printf_i+0x16a>
 800558e:	2d00      	cmp	r5, #0
 8005590:	f040 808e 	bne.w	80056b0 <_printf_i+0x210>
 8005594:	4665      	mov	r5, ip
 8005596:	2a08      	cmp	r2, #8
 8005598:	d10b      	bne.n	80055b2 <_printf_i+0x112>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	07db      	lsls	r3, r3, #31
 800559e:	d508      	bpl.n	80055b2 <_printf_i+0x112>
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	6862      	ldr	r2, [r4, #4]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	bfde      	ittt	le
 80055a8:	2330      	movle	r3, #48	; 0x30
 80055aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055b2:	ebac 0305 	sub.w	r3, ip, r5
 80055b6:	6123      	str	r3, [r4, #16]
 80055b8:	f8cd 8000 	str.w	r8, [sp]
 80055bc:	463b      	mov	r3, r7
 80055be:	aa03      	add	r2, sp, #12
 80055c0:	4621      	mov	r1, r4
 80055c2:	4630      	mov	r0, r6
 80055c4:	f7ff fef6 	bl	80053b4 <_printf_common>
 80055c8:	3001      	adds	r0, #1
 80055ca:	d14d      	bne.n	8005668 <_printf_i+0x1c8>
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295
 80055d0:	b005      	add	sp, #20
 80055d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055d6:	4839      	ldr	r0, [pc, #228]	; (80056bc <_printf_i+0x21c>)
 80055d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80055dc:	6813      	ldr	r3, [r2, #0]
 80055de:	6821      	ldr	r1, [r4, #0]
 80055e0:	1d1d      	adds	r5, r3, #4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6015      	str	r5, [r2, #0]
 80055e6:	060a      	lsls	r2, r1, #24
 80055e8:	d50b      	bpl.n	8005602 <_printf_i+0x162>
 80055ea:	07ca      	lsls	r2, r1, #31
 80055ec:	bf44      	itt	mi
 80055ee:	f041 0120 	orrmi.w	r1, r1, #32
 80055f2:	6021      	strmi	r1, [r4, #0]
 80055f4:	b91b      	cbnz	r3, 80055fe <_printf_i+0x15e>
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	f022 0220 	bic.w	r2, r2, #32
 80055fc:	6022      	str	r2, [r4, #0]
 80055fe:	2210      	movs	r2, #16
 8005600:	e7b7      	b.n	8005572 <_printf_i+0xd2>
 8005602:	064d      	lsls	r5, r1, #25
 8005604:	bf48      	it	mi
 8005606:	b29b      	uxthmi	r3, r3
 8005608:	e7ef      	b.n	80055ea <_printf_i+0x14a>
 800560a:	4665      	mov	r5, ip
 800560c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005610:	fb02 3311 	mls	r3, r2, r1, r3
 8005614:	5cc3      	ldrb	r3, [r0, r3]
 8005616:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800561a:	460b      	mov	r3, r1
 800561c:	2900      	cmp	r1, #0
 800561e:	d1f5      	bne.n	800560c <_printf_i+0x16c>
 8005620:	e7b9      	b.n	8005596 <_printf_i+0xf6>
 8005622:	6813      	ldr	r3, [r2, #0]
 8005624:	6825      	ldr	r5, [r4, #0]
 8005626:	6961      	ldr	r1, [r4, #20]
 8005628:	1d18      	adds	r0, r3, #4
 800562a:	6010      	str	r0, [r2, #0]
 800562c:	0628      	lsls	r0, r5, #24
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	d501      	bpl.n	8005636 <_printf_i+0x196>
 8005632:	6019      	str	r1, [r3, #0]
 8005634:	e002      	b.n	800563c <_printf_i+0x19c>
 8005636:	066a      	lsls	r2, r5, #25
 8005638:	d5fb      	bpl.n	8005632 <_printf_i+0x192>
 800563a:	8019      	strh	r1, [r3, #0]
 800563c:	2300      	movs	r3, #0
 800563e:	6123      	str	r3, [r4, #16]
 8005640:	4665      	mov	r5, ip
 8005642:	e7b9      	b.n	80055b8 <_printf_i+0x118>
 8005644:	6813      	ldr	r3, [r2, #0]
 8005646:	1d19      	adds	r1, r3, #4
 8005648:	6011      	str	r1, [r2, #0]
 800564a:	681d      	ldr	r5, [r3, #0]
 800564c:	6862      	ldr	r2, [r4, #4]
 800564e:	2100      	movs	r1, #0
 8005650:	4628      	mov	r0, r5
 8005652:	f7fa fdcd 	bl	80001f0 <memchr>
 8005656:	b108      	cbz	r0, 800565c <_printf_i+0x1bc>
 8005658:	1b40      	subs	r0, r0, r5
 800565a:	6060      	str	r0, [r4, #4]
 800565c:	6863      	ldr	r3, [r4, #4]
 800565e:	6123      	str	r3, [r4, #16]
 8005660:	2300      	movs	r3, #0
 8005662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005666:	e7a7      	b.n	80055b8 <_printf_i+0x118>
 8005668:	6923      	ldr	r3, [r4, #16]
 800566a:	462a      	mov	r2, r5
 800566c:	4639      	mov	r1, r7
 800566e:	4630      	mov	r0, r6
 8005670:	47c0      	blx	r8
 8005672:	3001      	adds	r0, #1
 8005674:	d0aa      	beq.n	80055cc <_printf_i+0x12c>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	079b      	lsls	r3, r3, #30
 800567a:	d413      	bmi.n	80056a4 <_printf_i+0x204>
 800567c:	68e0      	ldr	r0, [r4, #12]
 800567e:	9b03      	ldr	r3, [sp, #12]
 8005680:	4298      	cmp	r0, r3
 8005682:	bfb8      	it	lt
 8005684:	4618      	movlt	r0, r3
 8005686:	e7a3      	b.n	80055d0 <_printf_i+0x130>
 8005688:	2301      	movs	r3, #1
 800568a:	464a      	mov	r2, r9
 800568c:	4639      	mov	r1, r7
 800568e:	4630      	mov	r0, r6
 8005690:	47c0      	blx	r8
 8005692:	3001      	adds	r0, #1
 8005694:	d09a      	beq.n	80055cc <_printf_i+0x12c>
 8005696:	3501      	adds	r5, #1
 8005698:	68e3      	ldr	r3, [r4, #12]
 800569a:	9a03      	ldr	r2, [sp, #12]
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	42ab      	cmp	r3, r5
 80056a0:	dcf2      	bgt.n	8005688 <_printf_i+0x1e8>
 80056a2:	e7eb      	b.n	800567c <_printf_i+0x1dc>
 80056a4:	2500      	movs	r5, #0
 80056a6:	f104 0919 	add.w	r9, r4, #25
 80056aa:	e7f5      	b.n	8005698 <_printf_i+0x1f8>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1ac      	bne.n	800560a <_printf_i+0x16a>
 80056b0:	7803      	ldrb	r3, [r0, #0]
 80056b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056ba:	e76c      	b.n	8005596 <_printf_i+0xf6>
 80056bc:	08005a89 	.word	0x08005a89
 80056c0:	08005a9a 	.word	0x08005a9a

080056c4 <memcpy>:
 80056c4:	b510      	push	{r4, lr}
 80056c6:	1e43      	subs	r3, r0, #1
 80056c8:	440a      	add	r2, r1
 80056ca:	4291      	cmp	r1, r2
 80056cc:	d100      	bne.n	80056d0 <memcpy+0xc>
 80056ce:	bd10      	pop	{r4, pc}
 80056d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d8:	e7f7      	b.n	80056ca <memcpy+0x6>

080056da <memmove>:
 80056da:	4288      	cmp	r0, r1
 80056dc:	b510      	push	{r4, lr}
 80056de:	eb01 0302 	add.w	r3, r1, r2
 80056e2:	d807      	bhi.n	80056f4 <memmove+0x1a>
 80056e4:	1e42      	subs	r2, r0, #1
 80056e6:	4299      	cmp	r1, r3
 80056e8:	d00a      	beq.n	8005700 <memmove+0x26>
 80056ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80056f2:	e7f8      	b.n	80056e6 <memmove+0xc>
 80056f4:	4283      	cmp	r3, r0
 80056f6:	d9f5      	bls.n	80056e4 <memmove+0xa>
 80056f8:	1881      	adds	r1, r0, r2
 80056fa:	1ad2      	subs	r2, r2, r3
 80056fc:	42d3      	cmn	r3, r2
 80056fe:	d100      	bne.n	8005702 <memmove+0x28>
 8005700:	bd10      	pop	{r4, pc}
 8005702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005706:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800570a:	e7f7      	b.n	80056fc <memmove+0x22>

0800570c <_free_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4605      	mov	r5, r0
 8005710:	2900      	cmp	r1, #0
 8005712:	d045      	beq.n	80057a0 <_free_r+0x94>
 8005714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005718:	1f0c      	subs	r4, r1, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	bfb8      	it	lt
 800571e:	18e4      	addlt	r4, r4, r3
 8005720:	f000 f8d2 	bl	80058c8 <__malloc_lock>
 8005724:	4a1f      	ldr	r2, [pc, #124]	; (80057a4 <_free_r+0x98>)
 8005726:	6813      	ldr	r3, [r2, #0]
 8005728:	4610      	mov	r0, r2
 800572a:	b933      	cbnz	r3, 800573a <_free_r+0x2e>
 800572c:	6063      	str	r3, [r4, #4]
 800572e:	6014      	str	r4, [r2, #0]
 8005730:	4628      	mov	r0, r5
 8005732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005736:	f000 b8c8 	b.w	80058ca <__malloc_unlock>
 800573a:	42a3      	cmp	r3, r4
 800573c:	d90c      	bls.n	8005758 <_free_r+0x4c>
 800573e:	6821      	ldr	r1, [r4, #0]
 8005740:	1862      	adds	r2, r4, r1
 8005742:	4293      	cmp	r3, r2
 8005744:	bf04      	itt	eq
 8005746:	681a      	ldreq	r2, [r3, #0]
 8005748:	685b      	ldreq	r3, [r3, #4]
 800574a:	6063      	str	r3, [r4, #4]
 800574c:	bf04      	itt	eq
 800574e:	1852      	addeq	r2, r2, r1
 8005750:	6022      	streq	r2, [r4, #0]
 8005752:	6004      	str	r4, [r0, #0]
 8005754:	e7ec      	b.n	8005730 <_free_r+0x24>
 8005756:	4613      	mov	r3, r2
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	b10a      	cbz	r2, 8005760 <_free_r+0x54>
 800575c:	42a2      	cmp	r2, r4
 800575e:	d9fa      	bls.n	8005756 <_free_r+0x4a>
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	1858      	adds	r0, r3, r1
 8005764:	42a0      	cmp	r0, r4
 8005766:	d10b      	bne.n	8005780 <_free_r+0x74>
 8005768:	6820      	ldr	r0, [r4, #0]
 800576a:	4401      	add	r1, r0
 800576c:	1858      	adds	r0, r3, r1
 800576e:	4282      	cmp	r2, r0
 8005770:	6019      	str	r1, [r3, #0]
 8005772:	d1dd      	bne.n	8005730 <_free_r+0x24>
 8005774:	6810      	ldr	r0, [r2, #0]
 8005776:	6852      	ldr	r2, [r2, #4]
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	4401      	add	r1, r0
 800577c:	6019      	str	r1, [r3, #0]
 800577e:	e7d7      	b.n	8005730 <_free_r+0x24>
 8005780:	d902      	bls.n	8005788 <_free_r+0x7c>
 8005782:	230c      	movs	r3, #12
 8005784:	602b      	str	r3, [r5, #0]
 8005786:	e7d3      	b.n	8005730 <_free_r+0x24>
 8005788:	6820      	ldr	r0, [r4, #0]
 800578a:	1821      	adds	r1, r4, r0
 800578c:	428a      	cmp	r2, r1
 800578e:	bf04      	itt	eq
 8005790:	6811      	ldreq	r1, [r2, #0]
 8005792:	6852      	ldreq	r2, [r2, #4]
 8005794:	6062      	str	r2, [r4, #4]
 8005796:	bf04      	itt	eq
 8005798:	1809      	addeq	r1, r1, r0
 800579a:	6021      	streq	r1, [r4, #0]
 800579c:	605c      	str	r4, [r3, #4]
 800579e:	e7c7      	b.n	8005730 <_free_r+0x24>
 80057a0:	bd38      	pop	{r3, r4, r5, pc}
 80057a2:	bf00      	nop
 80057a4:	200000b0 	.word	0x200000b0

080057a8 <_malloc_r>:
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	1ccd      	adds	r5, r1, #3
 80057ac:	f025 0503 	bic.w	r5, r5, #3
 80057b0:	3508      	adds	r5, #8
 80057b2:	2d0c      	cmp	r5, #12
 80057b4:	bf38      	it	cc
 80057b6:	250c      	movcc	r5, #12
 80057b8:	2d00      	cmp	r5, #0
 80057ba:	4606      	mov	r6, r0
 80057bc:	db01      	blt.n	80057c2 <_malloc_r+0x1a>
 80057be:	42a9      	cmp	r1, r5
 80057c0:	d903      	bls.n	80057ca <_malloc_r+0x22>
 80057c2:	230c      	movs	r3, #12
 80057c4:	6033      	str	r3, [r6, #0]
 80057c6:	2000      	movs	r0, #0
 80057c8:	bd70      	pop	{r4, r5, r6, pc}
 80057ca:	f000 f87d 	bl	80058c8 <__malloc_lock>
 80057ce:	4a21      	ldr	r2, [pc, #132]	; (8005854 <_malloc_r+0xac>)
 80057d0:	6814      	ldr	r4, [r2, #0]
 80057d2:	4621      	mov	r1, r4
 80057d4:	b991      	cbnz	r1, 80057fc <_malloc_r+0x54>
 80057d6:	4c20      	ldr	r4, [pc, #128]	; (8005858 <_malloc_r+0xb0>)
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	b91b      	cbnz	r3, 80057e4 <_malloc_r+0x3c>
 80057dc:	4630      	mov	r0, r6
 80057de:	f000 f863 	bl	80058a8 <_sbrk_r>
 80057e2:	6020      	str	r0, [r4, #0]
 80057e4:	4629      	mov	r1, r5
 80057e6:	4630      	mov	r0, r6
 80057e8:	f000 f85e 	bl	80058a8 <_sbrk_r>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d124      	bne.n	800583a <_malloc_r+0x92>
 80057f0:	230c      	movs	r3, #12
 80057f2:	6033      	str	r3, [r6, #0]
 80057f4:	4630      	mov	r0, r6
 80057f6:	f000 f868 	bl	80058ca <__malloc_unlock>
 80057fa:	e7e4      	b.n	80057c6 <_malloc_r+0x1e>
 80057fc:	680b      	ldr	r3, [r1, #0]
 80057fe:	1b5b      	subs	r3, r3, r5
 8005800:	d418      	bmi.n	8005834 <_malloc_r+0x8c>
 8005802:	2b0b      	cmp	r3, #11
 8005804:	d90f      	bls.n	8005826 <_malloc_r+0x7e>
 8005806:	600b      	str	r3, [r1, #0]
 8005808:	50cd      	str	r5, [r1, r3]
 800580a:	18cc      	adds	r4, r1, r3
 800580c:	4630      	mov	r0, r6
 800580e:	f000 f85c 	bl	80058ca <__malloc_unlock>
 8005812:	f104 000b 	add.w	r0, r4, #11
 8005816:	1d23      	adds	r3, r4, #4
 8005818:	f020 0007 	bic.w	r0, r0, #7
 800581c:	1ac3      	subs	r3, r0, r3
 800581e:	d0d3      	beq.n	80057c8 <_malloc_r+0x20>
 8005820:	425a      	negs	r2, r3
 8005822:	50e2      	str	r2, [r4, r3]
 8005824:	e7d0      	b.n	80057c8 <_malloc_r+0x20>
 8005826:	428c      	cmp	r4, r1
 8005828:	684b      	ldr	r3, [r1, #4]
 800582a:	bf16      	itet	ne
 800582c:	6063      	strne	r3, [r4, #4]
 800582e:	6013      	streq	r3, [r2, #0]
 8005830:	460c      	movne	r4, r1
 8005832:	e7eb      	b.n	800580c <_malloc_r+0x64>
 8005834:	460c      	mov	r4, r1
 8005836:	6849      	ldr	r1, [r1, #4]
 8005838:	e7cc      	b.n	80057d4 <_malloc_r+0x2c>
 800583a:	1cc4      	adds	r4, r0, #3
 800583c:	f024 0403 	bic.w	r4, r4, #3
 8005840:	42a0      	cmp	r0, r4
 8005842:	d005      	beq.n	8005850 <_malloc_r+0xa8>
 8005844:	1a21      	subs	r1, r4, r0
 8005846:	4630      	mov	r0, r6
 8005848:	f000 f82e 	bl	80058a8 <_sbrk_r>
 800584c:	3001      	adds	r0, #1
 800584e:	d0cf      	beq.n	80057f0 <_malloc_r+0x48>
 8005850:	6025      	str	r5, [r4, #0]
 8005852:	e7db      	b.n	800580c <_malloc_r+0x64>
 8005854:	200000b0 	.word	0x200000b0
 8005858:	200000b4 	.word	0x200000b4

0800585c <_realloc_r>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	4607      	mov	r7, r0
 8005860:	4614      	mov	r4, r2
 8005862:	460e      	mov	r6, r1
 8005864:	b921      	cbnz	r1, 8005870 <_realloc_r+0x14>
 8005866:	4611      	mov	r1, r2
 8005868:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800586c:	f7ff bf9c 	b.w	80057a8 <_malloc_r>
 8005870:	b922      	cbnz	r2, 800587c <_realloc_r+0x20>
 8005872:	f7ff ff4b 	bl	800570c <_free_r>
 8005876:	4625      	mov	r5, r4
 8005878:	4628      	mov	r0, r5
 800587a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800587c:	f000 f826 	bl	80058cc <_malloc_usable_size_r>
 8005880:	42a0      	cmp	r0, r4
 8005882:	d20f      	bcs.n	80058a4 <_realloc_r+0x48>
 8005884:	4621      	mov	r1, r4
 8005886:	4638      	mov	r0, r7
 8005888:	f7ff ff8e 	bl	80057a8 <_malloc_r>
 800588c:	4605      	mov	r5, r0
 800588e:	2800      	cmp	r0, #0
 8005890:	d0f2      	beq.n	8005878 <_realloc_r+0x1c>
 8005892:	4631      	mov	r1, r6
 8005894:	4622      	mov	r2, r4
 8005896:	f7ff ff15 	bl	80056c4 <memcpy>
 800589a:	4631      	mov	r1, r6
 800589c:	4638      	mov	r0, r7
 800589e:	f7ff ff35 	bl	800570c <_free_r>
 80058a2:	e7e9      	b.n	8005878 <_realloc_r+0x1c>
 80058a4:	4635      	mov	r5, r6
 80058a6:	e7e7      	b.n	8005878 <_realloc_r+0x1c>

080058a8 <_sbrk_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4c06      	ldr	r4, [pc, #24]	; (80058c4 <_sbrk_r+0x1c>)
 80058ac:	2300      	movs	r3, #0
 80058ae:	4605      	mov	r5, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	f7fc fb00 	bl	8001eb8 <_sbrk>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_sbrk_r+0x1a>
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_sbrk_r+0x1a>
 80058c0:	602b      	str	r3, [r5, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	20000220 	.word	0x20000220

080058c8 <__malloc_lock>:
 80058c8:	4770      	bx	lr

080058ca <__malloc_unlock>:
 80058ca:	4770      	bx	lr

080058cc <_malloc_usable_size_r>:
 80058cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d0:	1f18      	subs	r0, r3, #4
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bfbc      	itt	lt
 80058d6:	580b      	ldrlt	r3, [r1, r0]
 80058d8:	18c0      	addlt	r0, r0, r3
 80058da:	4770      	bx	lr

080058dc <_init>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	bf00      	nop
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr

080058e8 <_fini>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	bf00      	nop
 80058ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ee:	bc08      	pop	{r3}
 80058f0:	469e      	mov	lr, r3
 80058f2:	4770      	bx	lr
