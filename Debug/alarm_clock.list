
alarm_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005174  08005174  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800517c  0800517c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800517c  0800517c  0001517c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000074  080051f8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080051f8  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e224  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f5e  00000000  00000000  0002e2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d60  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  00030f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024657  00000000  00000000  00031be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a954  00000000  00000000  00056237  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dea47  00000000  00000000  00060b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f5d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae4  00000000  00000000  0013f650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004fc0 	.word	0x08004fc0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08004fc0 	.word	0x08004fc0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_TIM_PeriodElapsedCallback>:
uint32_t time_interval;
uint32_t long_key_count;
uint8_t key_value;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if(htim->Instance==TIM2)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005a0:	d14c      	bne.n	800063c <HAL_TIM_PeriodElapsedCallback+0xac>
  {
    if((timer_count%100)==0)
 80005a2:	4b28      	ldr	r3, [pc, #160]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80005a8:	fb83 1302 	smull	r1, r3, r3, r2
 80005ac:	1159      	asrs	r1, r3, #5
 80005ae:	17d3      	asrs	r3, r2, #31
 80005b0:	1acb      	subs	r3, r1, r3
 80005b2:	2164      	movs	r1, #100	; 0x64
 80005b4:	fb01 f303 	mul.w	r3, r1, r3
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d139      	bne.n	8000632 <HAL_TIM_PeriodElapsedCallback+0xa2>
    {
      second++;
 80005be:	4b23      	ldr	r3, [pc, #140]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005c6:	6013      	str	r3, [r2, #0]

      if(second>=60)
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b3b      	cmp	r3, #59	; 0x3b
 80005ce:	dd08      	ble.n	80005e2 <HAL_TIM_PeriodElapsedCallback+0x52>
      {
        minute++;
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80005d8:	6013      	str	r3, [r2, #0]
        second = 0;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	e006      	b.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0x60>
      }
      else if(second < 0) second = 0;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	da02      	bge.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0x60>
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
      if(minute>=60)
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b3b      	cmp	r3, #59	; 0x3b
 80005f6:	dd08      	ble.n	800060a <HAL_TIM_PeriodElapsedCallback+0x7a>
      {
        hour++;
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000600:	6013      	str	r3, [r2, #0]
        minute = 0;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	e006      	b.n	8000618 <HAL_TIM_PeriodElapsedCallback+0x88>
      }
      else if(minute < 0) minute = 0;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	da02      	bge.n	8000618 <HAL_TIM_PeriodElapsedCallback+0x88>
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
      if(hour>=24 || hour < 0)
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b17      	cmp	r3, #23
 800061e:	dc03      	bgt.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x98>
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	da02      	bge.n	800062e <HAL_TIM_PeriodElapsedCallback+0x9e>
      {
        hour = 0;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
      }

      time_display();
 800062e:	f000 f813 	bl	8000658 <time_display>
    }
	timer_count++;
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	4a02      	ldr	r2, [pc, #8]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800063a:	6013      	str	r3, [r2, #0]
  }
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200001c4 	.word	0x200001c4
 8000648:	51eb851f 	.word	0x51eb851f
 800064c:	2000010c 	.word	0x2000010c
 8000650:	20000140 	.word	0x20000140
 8000654:	20000144 	.word	0x20000144

08000658 <time_display>:

void time_display(void)
{
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af02      	add	r7, sp, #8
	switch(current_state.mode)
 800065e:	4ba5      	ldr	r3, [pc, #660]	; (80008f4 <time_display+0x29c>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b03      	cmp	r3, #3
 8000664:	f200 845d 	bhi.w	8000f22 <time_display+0x8ca>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <time_display+0x18>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	08000681 	.word	0x08000681
 8000674:	08000709 	.word	0x08000709
 8000678:	08000ad1 	.word	0x08000ad1
 800067c:	08000edf 	.word	0x08000edf
	{
	case NORMAL_STATE:
		memset(line,0,sizeof(line));
 8000680:	2224      	movs	r2, #36	; 0x24
 8000682:	2100      	movs	r1, #0
 8000684:	489c      	ldr	r0, [pc, #624]	; (80008f8 <time_display+0x2a0>)
 8000686:	f004 f87d 	bl	8004784 <memset>
		sprintf(line[0],"Korea Polytech  \r\n");
 800068a:	4a9b      	ldr	r2, [pc, #620]	; (80008f8 <time_display+0x2a0>)
 800068c:	4b9b      	ldr	r3, [pc, #620]	; (80008fc <time_display+0x2a4>)
 800068e:	4615      	mov	r5, r2
 8000690:	461c      	mov	r4, r3
 8000692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000694:	6028      	str	r0, [r5, #0]
 8000696:	6069      	str	r1, [r5, #4]
 8000698:	60aa      	str	r2, [r5, #8]
 800069a:	60eb      	str	r3, [r5, #12]
 800069c:	8823      	ldrh	r3, [r4, #0]
 800069e:	78a2      	ldrb	r2, [r4, #2]
 80006a0:	822b      	strh	r3, [r5, #16]
 80006a2:	4613      	mov	r3, r2
 80006a4:	74ab      	strb	r3, [r5, #18]
		if(hour>=12)
 80006a6:	4b96      	ldr	r3, [pc, #600]	; (8000900 <time_display+0x2a8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b0b      	cmp	r3, #11
 80006ac:	dd14      	ble.n	80006d8 <time_display+0x80>
		{
		  strncpy(line[1],"PM ",3);
 80006ae:	4b95      	ldr	r3, [pc, #596]	; (8000904 <time_display+0x2ac>)
 80006b0:	4a95      	ldr	r2, [pc, #596]	; (8000908 <time_display+0x2b0>)
 80006b2:	8811      	ldrh	r1, [r2, #0]
 80006b4:	7892      	ldrb	r2, [r2, #2]
 80006b6:	8019      	strh	r1, [r3, #0]
 80006b8:	709a      	strb	r2, [r3, #2]
		  sprintf(time_str,"%02d:%02d:%02d\r\n",hour-12,minute,second);
 80006ba:	4b91      	ldr	r3, [pc, #580]	; (8000900 <time_display+0x2a8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f1a3 020c 	sub.w	r2, r3, #12
 80006c2:	4b92      	ldr	r3, [pc, #584]	; (800090c <time_display+0x2b4>)
 80006c4:	6819      	ldr	r1, [r3, #0]
 80006c6:	4b92      	ldr	r3, [pc, #584]	; (8000910 <time_display+0x2b8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	460b      	mov	r3, r1
 80006ce:	4991      	ldr	r1, [pc, #580]	; (8000914 <time_display+0x2bc>)
 80006d0:	4891      	ldr	r0, [pc, #580]	; (8000918 <time_display+0x2c0>)
 80006d2:	f004 f85f 	bl	8004794 <siprintf>
 80006d6:	e011      	b.n	80006fc <time_display+0xa4>
		}
		else
		{
		  strncpy(line[1],"AM ",3);
 80006d8:	4b8a      	ldr	r3, [pc, #552]	; (8000904 <time_display+0x2ac>)
 80006da:	4a90      	ldr	r2, [pc, #576]	; (800091c <time_display+0x2c4>)
 80006dc:	8811      	ldrh	r1, [r2, #0]
 80006de:	7892      	ldrb	r2, [r2, #2]
 80006e0:	8019      	strh	r1, [r3, #0]
 80006e2:	709a      	strb	r2, [r3, #2]
		  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
 80006e4:	4b86      	ldr	r3, [pc, #536]	; (8000900 <time_display+0x2a8>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b88      	ldr	r3, [pc, #544]	; (800090c <time_display+0x2b4>)
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	4b88      	ldr	r3, [pc, #544]	; (8000910 <time_display+0x2b8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	460b      	mov	r3, r1
 80006f4:	4987      	ldr	r1, [pc, #540]	; (8000914 <time_display+0x2bc>)
 80006f6:	4888      	ldr	r0, [pc, #544]	; (8000918 <time_display+0x2c0>)
 80006f8:	f004 f84c 	bl	8004794 <siprintf>
		}
		strcat(line[1],time_str);
 80006fc:	4986      	ldr	r1, [pc, #536]	; (8000918 <time_display+0x2c0>)
 80006fe:	4881      	ldr	r0, [pc, #516]	; (8000904 <time_display+0x2ac>)
 8000700:	f004 f868 	bl	80047d4 <strcat>
		break;
 8000704:	f000 bc0e 	b.w	8000f24 <time_display+0x8cc>
	case TIME_SETTING:
		memset(line,0,sizeof(line));
 8000708:	2224      	movs	r2, #36	; 0x24
 800070a:	2100      	movs	r1, #0
 800070c:	487a      	ldr	r0, [pc, #488]	; (80008f8 <time_display+0x2a0>)
 800070e:	f004 f839 	bl	8004784 <memset>
		sprintf(line[0],"Korea Polytech  \r\n");
 8000712:	4a79      	ldr	r2, [pc, #484]	; (80008f8 <time_display+0x2a0>)
 8000714:	4b79      	ldr	r3, [pc, #484]	; (80008fc <time_display+0x2a4>)
 8000716:	4615      	mov	r5, r2
 8000718:	461c      	mov	r4, r3
 800071a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800071c:	6028      	str	r0, [r5, #0]
 800071e:	6069      	str	r1, [r5, #4]
 8000720:	60aa      	str	r2, [r5, #8]
 8000722:	60eb      	str	r3, [r5, #12]
 8000724:	8823      	ldrh	r3, [r4, #0]
 8000726:	78a2      	ldrb	r2, [r4, #2]
 8000728:	822b      	strh	r3, [r5, #16]
 800072a:	4613      	mov	r3, r2
 800072c:	74ab      	strb	r3, [r5, #18]
		//설정모드 자리가 어디 선택 되어 있는 가에 따라 깜빡임 다른 모습으로 출력
		switch(setting)
 800072e:	4b7c      	ldr	r3, [pc, #496]	; (8000920 <time_display+0x2c8>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	3b01      	subs	r3, #1
 8000734:	2b03      	cmp	r3, #3
 8000736:	f200 81c9 	bhi.w	8000acc <time_display+0x474>
 800073a:	a201      	add	r2, pc, #4	; (adr r2, 8000740 <time_display+0xe8>)
 800073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000740:	08000751 	.word	0x08000751
 8000744:	0800082d 	.word	0x0800082d
 8000748:	08000935 	.word	0x08000935
 800074c:	08000a01 	.word	0x08000a01
		{
		case AP:
			if(timer_count % 200 == 0)
 8000750:	4b74      	ldr	r3, [pc, #464]	; (8000924 <time_display+0x2cc>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b74      	ldr	r3, [pc, #464]	; (8000928 <time_display+0x2d0>)
 8000756:	fb83 1302 	smull	r1, r3, r3, r2
 800075a:	1199      	asrs	r1, r3, #6
 800075c:	17d3      	asrs	r3, r2, #31
 800075e:	1acb      	subs	r3, r1, r3
 8000760:	21c8      	movs	r1, #200	; 0xc8
 8000762:	fb01 f303 	mul.w	r3, r1, r3
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d12f      	bne.n	80007cc <time_display+0x174>
			{
				if(hour>=12)
 800076c:	4b64      	ldr	r3, [pc, #400]	; (8000900 <time_display+0x2a8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b0b      	cmp	r3, #11
 8000772:	dd14      	ble.n	800079e <time_display+0x146>
				{
				  strncpy(line[1],"   ",3);
 8000774:	4b63      	ldr	r3, [pc, #396]	; (8000904 <time_display+0x2ac>)
 8000776:	4a6d      	ldr	r2, [pc, #436]	; (800092c <time_display+0x2d4>)
 8000778:	8811      	ldrh	r1, [r2, #0]
 800077a:	7892      	ldrb	r2, [r2, #2]
 800077c:	8019      	strh	r1, [r3, #0]
 800077e:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour-12,minute,second);
 8000780:	4b5f      	ldr	r3, [pc, #380]	; (8000900 <time_display+0x2a8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f1a3 020c 	sub.w	r2, r3, #12
 8000788:	4b60      	ldr	r3, [pc, #384]	; (800090c <time_display+0x2b4>)
 800078a:	6819      	ldr	r1, [r3, #0]
 800078c:	4b60      	ldr	r3, [pc, #384]	; (8000910 <time_display+0x2b8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	460b      	mov	r3, r1
 8000794:	495f      	ldr	r1, [pc, #380]	; (8000914 <time_display+0x2bc>)
 8000796:	4860      	ldr	r0, [pc, #384]	; (8000918 <time_display+0x2c0>)
 8000798:	f003 fffc 	bl	8004794 <siprintf>
 800079c:	e011      	b.n	80007c2 <time_display+0x16a>
				}
				else
				{
				  strncpy(line[1],"   ",3);
 800079e:	4b59      	ldr	r3, [pc, #356]	; (8000904 <time_display+0x2ac>)
 80007a0:	4a62      	ldr	r2, [pc, #392]	; (800092c <time_display+0x2d4>)
 80007a2:	8811      	ldrh	r1, [r2, #0]
 80007a4:	7892      	ldrb	r2, [r2, #2]
 80007a6:	8019      	strh	r1, [r3, #0]
 80007a8:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
 80007aa:	4b55      	ldr	r3, [pc, #340]	; (8000900 <time_display+0x2a8>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b57      	ldr	r3, [pc, #348]	; (800090c <time_display+0x2b4>)
 80007b0:	6819      	ldr	r1, [r3, #0]
 80007b2:	4b57      	ldr	r3, [pc, #348]	; (8000910 <time_display+0x2b8>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	460b      	mov	r3, r1
 80007ba:	4956      	ldr	r1, [pc, #344]	; (8000914 <time_display+0x2bc>)
 80007bc:	4856      	ldr	r0, [pc, #344]	; (8000918 <time_display+0x2c0>)
 80007be:	f003 ffe9 	bl	8004794 <siprintf>
				}
				strcat(line[1],time_str);
 80007c2:	4955      	ldr	r1, [pc, #340]	; (8000918 <time_display+0x2c0>)
 80007c4:	484f      	ldr	r0, [pc, #316]	; (8000904 <time_display+0x2ac>)
 80007c6:	f004 f805 	bl	80047d4 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
				}
				strcat(line[1],time_str);

			}
			break;
 80007ca:	e180      	b.n	8000ace <time_display+0x476>
				if(hour>=12)
 80007cc:	4b4c      	ldr	r3, [pc, #304]	; (8000900 <time_display+0x2a8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b0b      	cmp	r3, #11
 80007d2:	dd14      	ble.n	80007fe <time_display+0x1a6>
				  strncpy(line[1],"PM ",3);
 80007d4:	4b4b      	ldr	r3, [pc, #300]	; (8000904 <time_display+0x2ac>)
 80007d6:	4a4c      	ldr	r2, [pc, #304]	; (8000908 <time_display+0x2b0>)
 80007d8:	8811      	ldrh	r1, [r2, #0]
 80007da:	7892      	ldrb	r2, [r2, #2]
 80007dc:	8019      	strh	r1, [r3, #0]
 80007de:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour-12,minute,second);
 80007e0:	4b47      	ldr	r3, [pc, #284]	; (8000900 <time_display+0x2a8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f1a3 020c 	sub.w	r2, r3, #12
 80007e8:	4b48      	ldr	r3, [pc, #288]	; (800090c <time_display+0x2b4>)
 80007ea:	6819      	ldr	r1, [r3, #0]
 80007ec:	4b48      	ldr	r3, [pc, #288]	; (8000910 <time_display+0x2b8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	9300      	str	r3, [sp, #0]
 80007f2:	460b      	mov	r3, r1
 80007f4:	4947      	ldr	r1, [pc, #284]	; (8000914 <time_display+0x2bc>)
 80007f6:	4848      	ldr	r0, [pc, #288]	; (8000918 <time_display+0x2c0>)
 80007f8:	f003 ffcc 	bl	8004794 <siprintf>
 80007fc:	e011      	b.n	8000822 <time_display+0x1ca>
				  strncpy(line[1],"AM ",3);
 80007fe:	4b41      	ldr	r3, [pc, #260]	; (8000904 <time_display+0x2ac>)
 8000800:	4a46      	ldr	r2, [pc, #280]	; (800091c <time_display+0x2c4>)
 8000802:	8811      	ldrh	r1, [r2, #0]
 8000804:	7892      	ldrb	r2, [r2, #2]
 8000806:	8019      	strh	r1, [r3, #0]
 8000808:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
 800080a:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <time_display+0x2a8>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4b3f      	ldr	r3, [pc, #252]	; (800090c <time_display+0x2b4>)
 8000810:	6819      	ldr	r1, [r3, #0]
 8000812:	4b3f      	ldr	r3, [pc, #252]	; (8000910 <time_display+0x2b8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	460b      	mov	r3, r1
 800081a:	493e      	ldr	r1, [pc, #248]	; (8000914 <time_display+0x2bc>)
 800081c:	483e      	ldr	r0, [pc, #248]	; (8000918 <time_display+0x2c0>)
 800081e:	f003 ffb9 	bl	8004794 <siprintf>
				strcat(line[1],time_str);
 8000822:	493d      	ldr	r1, [pc, #244]	; (8000918 <time_display+0x2c0>)
 8000824:	4837      	ldr	r0, [pc, #220]	; (8000904 <time_display+0x2ac>)
 8000826:	f003 ffd5 	bl	80047d4 <strcat>
			break;
 800082a:	e150      	b.n	8000ace <time_display+0x476>
		case SET_H:
			if(timer_count % 200 == 0)
 800082c:	4b3d      	ldr	r3, [pc, #244]	; (8000924 <time_display+0x2cc>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b3d      	ldr	r3, [pc, #244]	; (8000928 <time_display+0x2d0>)
 8000832:	fb83 1302 	smull	r1, r3, r3, r2
 8000836:	1199      	asrs	r1, r3, #6
 8000838:	17d3      	asrs	r3, r2, #31
 800083a:	1acb      	subs	r3, r1, r3
 800083c:	21c8      	movs	r1, #200	; 0xc8
 800083e:	fb01 f303 	mul.w	r3, r1, r3
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d125      	bne.n	8000894 <time_display+0x23c>
			{
				if(hour>=12)
 8000848:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <time_display+0x2a8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b0b      	cmp	r3, #11
 800084e:	dd0e      	ble.n	800086e <time_display+0x216>
				{
				  strncpy(line[1],"PM ",3);
 8000850:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <time_display+0x2ac>)
 8000852:	4a2d      	ldr	r2, [pc, #180]	; (8000908 <time_display+0x2b0>)
 8000854:	8811      	ldrh	r1, [r2, #0]
 8000856:	7892      	ldrb	r2, [r2, #2]
 8000858:	8019      	strh	r1, [r3, #0]
 800085a:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"  :%02d:%02d\r\n",minute,second);
 800085c:	4b2b      	ldr	r3, [pc, #172]	; (800090c <time_display+0x2b4>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <time_display+0x2b8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4932      	ldr	r1, [pc, #200]	; (8000930 <time_display+0x2d8>)
 8000866:	482c      	ldr	r0, [pc, #176]	; (8000918 <time_display+0x2c0>)
 8000868:	f003 ff94 	bl	8004794 <siprintf>
 800086c:	e00d      	b.n	800088a <time_display+0x232>
				}
				else
				{
				  strncpy(line[1],"AM ",3);
 800086e:	4b25      	ldr	r3, [pc, #148]	; (8000904 <time_display+0x2ac>)
 8000870:	4a2a      	ldr	r2, [pc, #168]	; (800091c <time_display+0x2c4>)
 8000872:	8811      	ldrh	r1, [r2, #0]
 8000874:	7892      	ldrb	r2, [r2, #2]
 8000876:	8019      	strh	r1, [r3, #0]
 8000878:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"  :%02d:%02d\r\n",minute,second);
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <time_display+0x2b4>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b24      	ldr	r3, [pc, #144]	; (8000910 <time_display+0x2b8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	492b      	ldr	r1, [pc, #172]	; (8000930 <time_display+0x2d8>)
 8000884:	4824      	ldr	r0, [pc, #144]	; (8000918 <time_display+0x2c0>)
 8000886:	f003 ff85 	bl	8004794 <siprintf>
				}
				strcat(line[1],time_str);
 800088a:	4923      	ldr	r1, [pc, #140]	; (8000918 <time_display+0x2c0>)
 800088c:	481d      	ldr	r0, [pc, #116]	; (8000904 <time_display+0x2ac>)
 800088e:	f003 ffa1 	bl	80047d4 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
				}
				strcat(line[1],time_str);

			}
			break;
 8000892:	e11c      	b.n	8000ace <time_display+0x476>
				if(hour>=12)
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <time_display+0x2a8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b0b      	cmp	r3, #11
 800089a:	dd14      	ble.n	80008c6 <time_display+0x26e>
				  strncpy(line[1],"PM ",3);
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <time_display+0x2ac>)
 800089e:	4a1a      	ldr	r2, [pc, #104]	; (8000908 <time_display+0x2b0>)
 80008a0:	8811      	ldrh	r1, [r2, #0]
 80008a2:	7892      	ldrb	r2, [r2, #2]
 80008a4:	8019      	strh	r1, [r3, #0]
 80008a6:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour-12,minute,second);
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <time_display+0x2a8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f1a3 020c 	sub.w	r2, r3, #12
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <time_display+0x2b4>)
 80008b2:	6819      	ldr	r1, [r3, #0]
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <time_display+0x2b8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	460b      	mov	r3, r1
 80008bc:	4915      	ldr	r1, [pc, #84]	; (8000914 <time_display+0x2bc>)
 80008be:	4816      	ldr	r0, [pc, #88]	; (8000918 <time_display+0x2c0>)
 80008c0:	f003 ff68 	bl	8004794 <siprintf>
 80008c4:	e011      	b.n	80008ea <time_display+0x292>
				  strncpy(line[1],"AM ",3);
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <time_display+0x2ac>)
 80008c8:	4a14      	ldr	r2, [pc, #80]	; (800091c <time_display+0x2c4>)
 80008ca:	8811      	ldrh	r1, [r2, #0]
 80008cc:	7892      	ldrb	r2, [r2, #2]
 80008ce:	8019      	strh	r1, [r3, #0]
 80008d0:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <time_display+0x2a8>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <time_display+0x2b4>)
 80008d8:	6819      	ldr	r1, [r3, #0]
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <time_display+0x2b8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	460b      	mov	r3, r1
 80008e2:	490c      	ldr	r1, [pc, #48]	; (8000914 <time_display+0x2bc>)
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <time_display+0x2c0>)
 80008e6:	f003 ff55 	bl	8004794 <siprintf>
				strcat(line[1],time_str);
 80008ea:	490b      	ldr	r1, [pc, #44]	; (8000918 <time_display+0x2c0>)
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <time_display+0x2ac>)
 80008ee:	f003 ff71 	bl	80047d4 <strcat>
			break;
 80008f2:	e0ec      	b.n	8000ace <time_display+0x476>
 80008f4:	200000e4 	.word	0x200000e4
 80008f8:	200000e8 	.word	0x200000e8
 80008fc:	08004fd8 	.word	0x08004fd8
 8000900:	20000144 	.word	0x20000144
 8000904:	200000fa 	.word	0x200000fa
 8000908:	08004fec 	.word	0x08004fec
 800090c:	20000140 	.word	0x20000140
 8000910:	2000010c 	.word	0x2000010c
 8000914:	08004ff0 	.word	0x08004ff0
 8000918:	200001b0 	.word	0x200001b0
 800091c:	08005004 	.word	0x08005004
 8000920:	20000000 	.word	0x20000000
 8000924:	200001c4 	.word	0x200001c4
 8000928:	51eb851f 	.word	0x51eb851f
 800092c:	08005008 	.word	0x08005008
 8000930:	0800500c 	.word	0x0800500c
		case SET_M:
			if(timer_count % 200 == 0)
 8000934:	4ba4      	ldr	r3, [pc, #656]	; (8000bc8 <time_display+0x570>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4ba4      	ldr	r3, [pc, #656]	; (8000bcc <time_display+0x574>)
 800093a:	fb83 1302 	smull	r1, r3, r3, r2
 800093e:	1199      	asrs	r1, r3, #6
 8000940:	17d3      	asrs	r3, r2, #31
 8000942:	1acb      	subs	r3, r1, r3
 8000944:	21c8      	movs	r1, #200	; 0xc8
 8000946:	fb01 f303 	mul.w	r3, r1, r3
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d127      	bne.n	80009a0 <time_display+0x348>
			{
				if(hour>=12)
 8000950:	4b9f      	ldr	r3, [pc, #636]	; (8000bd0 <time_display+0x578>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b0b      	cmp	r3, #11
 8000956:	dd10      	ble.n	800097a <time_display+0x322>
				{
				  strncpy(line[1],"PM ",3);
 8000958:	4b9e      	ldr	r3, [pc, #632]	; (8000bd4 <time_display+0x57c>)
 800095a:	4a9f      	ldr	r2, [pc, #636]	; (8000bd8 <time_display+0x580>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	7892      	ldrb	r2, [r2, #2]
 8000960:	8019      	strh	r1, [r3, #0]
 8000962:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:  :%02d\r\n",hour-12,second);
 8000964:	4b9a      	ldr	r3, [pc, #616]	; (8000bd0 <time_display+0x578>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f1a3 020c 	sub.w	r2, r3, #12
 800096c:	4b9b      	ldr	r3, [pc, #620]	; (8000bdc <time_display+0x584>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	499b      	ldr	r1, [pc, #620]	; (8000be0 <time_display+0x588>)
 8000972:	489c      	ldr	r0, [pc, #624]	; (8000be4 <time_display+0x58c>)
 8000974:	f003 ff0e 	bl	8004794 <siprintf>
 8000978:	e00d      	b.n	8000996 <time_display+0x33e>
				}
				else
				{
				  strncpy(line[1],"AM ",3);
 800097a:	4b96      	ldr	r3, [pc, #600]	; (8000bd4 <time_display+0x57c>)
 800097c:	4a9a      	ldr	r2, [pc, #616]	; (8000be8 <time_display+0x590>)
 800097e:	8811      	ldrh	r1, [r2, #0]
 8000980:	7892      	ldrb	r2, [r2, #2]
 8000982:	8019      	strh	r1, [r3, #0]
 8000984:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:  :%02d\r\n",hour,second);
 8000986:	4b92      	ldr	r3, [pc, #584]	; (8000bd0 <time_display+0x578>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	4b94      	ldr	r3, [pc, #592]	; (8000bdc <time_display+0x584>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4994      	ldr	r1, [pc, #592]	; (8000be0 <time_display+0x588>)
 8000990:	4894      	ldr	r0, [pc, #592]	; (8000be4 <time_display+0x58c>)
 8000992:	f003 feff 	bl	8004794 <siprintf>
				}
				strcat(line[1],time_str);
 8000996:	4993      	ldr	r1, [pc, #588]	; (8000be4 <time_display+0x58c>)
 8000998:	488e      	ldr	r0, [pc, #568]	; (8000bd4 <time_display+0x57c>)
 800099a:	f003 ff1b 	bl	80047d4 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
				}
				strcat(line[1],time_str);

			}
			break;
 800099e:	e096      	b.n	8000ace <time_display+0x476>
				if(hour>=12)
 80009a0:	4b8b      	ldr	r3, [pc, #556]	; (8000bd0 <time_display+0x578>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b0b      	cmp	r3, #11
 80009a6:	dd14      	ble.n	80009d2 <time_display+0x37a>
				  strncpy(line[1],"PM ",3);
 80009a8:	4b8a      	ldr	r3, [pc, #552]	; (8000bd4 <time_display+0x57c>)
 80009aa:	4a8b      	ldr	r2, [pc, #556]	; (8000bd8 <time_display+0x580>)
 80009ac:	8811      	ldrh	r1, [r2, #0]
 80009ae:	7892      	ldrb	r2, [r2, #2]
 80009b0:	8019      	strh	r1, [r3, #0]
 80009b2:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour-12,minute,second);
 80009b4:	4b86      	ldr	r3, [pc, #536]	; (8000bd0 <time_display+0x578>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f1a3 020c 	sub.w	r2, r3, #12
 80009bc:	4b8b      	ldr	r3, [pc, #556]	; (8000bec <time_display+0x594>)
 80009be:	6819      	ldr	r1, [r3, #0]
 80009c0:	4b86      	ldr	r3, [pc, #536]	; (8000bdc <time_display+0x584>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	460b      	mov	r3, r1
 80009c8:	4989      	ldr	r1, [pc, #548]	; (8000bf0 <time_display+0x598>)
 80009ca:	4886      	ldr	r0, [pc, #536]	; (8000be4 <time_display+0x58c>)
 80009cc:	f003 fee2 	bl	8004794 <siprintf>
 80009d0:	e011      	b.n	80009f6 <time_display+0x39e>
				  strncpy(line[1],"AM ",3);
 80009d2:	4b80      	ldr	r3, [pc, #512]	; (8000bd4 <time_display+0x57c>)
 80009d4:	4a84      	ldr	r2, [pc, #528]	; (8000be8 <time_display+0x590>)
 80009d6:	8811      	ldrh	r1, [r2, #0]
 80009d8:	7892      	ldrb	r2, [r2, #2]
 80009da:	8019      	strh	r1, [r3, #0]
 80009dc:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
 80009de:	4b7c      	ldr	r3, [pc, #496]	; (8000bd0 <time_display+0x578>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b82      	ldr	r3, [pc, #520]	; (8000bec <time_display+0x594>)
 80009e4:	6819      	ldr	r1, [r3, #0]
 80009e6:	4b7d      	ldr	r3, [pc, #500]	; (8000bdc <time_display+0x584>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	460b      	mov	r3, r1
 80009ee:	4980      	ldr	r1, [pc, #512]	; (8000bf0 <time_display+0x598>)
 80009f0:	487c      	ldr	r0, [pc, #496]	; (8000be4 <time_display+0x58c>)
 80009f2:	f003 fecf 	bl	8004794 <siprintf>
				strcat(line[1],time_str);
 80009f6:	497b      	ldr	r1, [pc, #492]	; (8000be4 <time_display+0x58c>)
 80009f8:	4876      	ldr	r0, [pc, #472]	; (8000bd4 <time_display+0x57c>)
 80009fa:	f003 feeb 	bl	80047d4 <strcat>
			break;
 80009fe:	e066      	b.n	8000ace <time_display+0x476>
		case SET_S:
			if(timer_count % 200 == 0)
 8000a00:	4b71      	ldr	r3, [pc, #452]	; (8000bc8 <time_display+0x570>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b71      	ldr	r3, [pc, #452]	; (8000bcc <time_display+0x574>)
 8000a06:	fb83 1302 	smull	r1, r3, r3, r2
 8000a0a:	1199      	asrs	r1, r3, #6
 8000a0c:	17d3      	asrs	r3, r2, #31
 8000a0e:	1acb      	subs	r3, r1, r3
 8000a10:	21c8      	movs	r1, #200	; 0xc8
 8000a12:	fb01 f303 	mul.w	r3, r1, r3
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d127      	bne.n	8000a6c <time_display+0x414>
			{
				if(hour>=12)
 8000a1c:	4b6c      	ldr	r3, [pc, #432]	; (8000bd0 <time_display+0x578>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b0b      	cmp	r3, #11
 8000a22:	dd10      	ble.n	8000a46 <time_display+0x3ee>
				{
				  strncpy(line[1],"PM ",3);
 8000a24:	4b6b      	ldr	r3, [pc, #428]	; (8000bd4 <time_display+0x57c>)
 8000a26:	4a6c      	ldr	r2, [pc, #432]	; (8000bd8 <time_display+0x580>)
 8000a28:	8811      	ldrh	r1, [r2, #0]
 8000a2a:	7892      	ldrb	r2, [r2, #2]
 8000a2c:	8019      	strh	r1, [r3, #0]
 8000a2e:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:  \r\n",hour-12,minute);
 8000a30:	4b67      	ldr	r3, [pc, #412]	; (8000bd0 <time_display+0x578>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f1a3 020c 	sub.w	r2, r3, #12
 8000a38:	4b6c      	ldr	r3, [pc, #432]	; (8000bec <time_display+0x594>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	496d      	ldr	r1, [pc, #436]	; (8000bf4 <time_display+0x59c>)
 8000a3e:	4869      	ldr	r0, [pc, #420]	; (8000be4 <time_display+0x58c>)
 8000a40:	f003 fea8 	bl	8004794 <siprintf>
 8000a44:	e00d      	b.n	8000a62 <time_display+0x40a>
				}
				else
				{
				  strncpy(line[1],"AM ",3);
 8000a46:	4b63      	ldr	r3, [pc, #396]	; (8000bd4 <time_display+0x57c>)
 8000a48:	4a67      	ldr	r2, [pc, #412]	; (8000be8 <time_display+0x590>)
 8000a4a:	8811      	ldrh	r1, [r2, #0]
 8000a4c:	7892      	ldrb	r2, [r2, #2]
 8000a4e:	8019      	strh	r1, [r3, #0]
 8000a50:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:  \r\n",hour,minute);
 8000a52:	4b5f      	ldr	r3, [pc, #380]	; (8000bd0 <time_display+0x578>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	4b65      	ldr	r3, [pc, #404]	; (8000bec <time_display+0x594>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4966      	ldr	r1, [pc, #408]	; (8000bf4 <time_display+0x59c>)
 8000a5c:	4861      	ldr	r0, [pc, #388]	; (8000be4 <time_display+0x58c>)
 8000a5e:	f003 fe99 	bl	8004794 <siprintf>
				}
				strcat(line[1],time_str);
 8000a62:	4960      	ldr	r1, [pc, #384]	; (8000be4 <time_display+0x58c>)
 8000a64:	485b      	ldr	r0, [pc, #364]	; (8000bd4 <time_display+0x57c>)
 8000a66:	f003 feb5 	bl	80047d4 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
				}
				strcat(line[1],time_str);

			}
			break;
 8000a6a:	e030      	b.n	8000ace <time_display+0x476>
				if(hour>=12)
 8000a6c:	4b58      	ldr	r3, [pc, #352]	; (8000bd0 <time_display+0x578>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b0b      	cmp	r3, #11
 8000a72:	dd14      	ble.n	8000a9e <time_display+0x446>
				  strncpy(line[1],"PM ",3);
 8000a74:	4b57      	ldr	r3, [pc, #348]	; (8000bd4 <time_display+0x57c>)
 8000a76:	4a58      	ldr	r2, [pc, #352]	; (8000bd8 <time_display+0x580>)
 8000a78:	8811      	ldrh	r1, [r2, #0]
 8000a7a:	7892      	ldrb	r2, [r2, #2]
 8000a7c:	8019      	strh	r1, [r3, #0]
 8000a7e:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour-12,minute,second);
 8000a80:	4b53      	ldr	r3, [pc, #332]	; (8000bd0 <time_display+0x578>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f1a3 020c 	sub.w	r2, r3, #12
 8000a88:	4b58      	ldr	r3, [pc, #352]	; (8000bec <time_display+0x594>)
 8000a8a:	6819      	ldr	r1, [r3, #0]
 8000a8c:	4b53      	ldr	r3, [pc, #332]	; (8000bdc <time_display+0x584>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	460b      	mov	r3, r1
 8000a94:	4956      	ldr	r1, [pc, #344]	; (8000bf0 <time_display+0x598>)
 8000a96:	4853      	ldr	r0, [pc, #332]	; (8000be4 <time_display+0x58c>)
 8000a98:	f003 fe7c 	bl	8004794 <siprintf>
 8000a9c:	e011      	b.n	8000ac2 <time_display+0x46a>
				  strncpy(line[1],"AM ",3);
 8000a9e:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <time_display+0x57c>)
 8000aa0:	4a51      	ldr	r2, [pc, #324]	; (8000be8 <time_display+0x590>)
 8000aa2:	8811      	ldrh	r1, [r2, #0]
 8000aa4:	7892      	ldrb	r2, [r2, #2]
 8000aa6:	8019      	strh	r1, [r3, #0]
 8000aa8:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d\r\n",hour,minute,second);
 8000aaa:	4b49      	ldr	r3, [pc, #292]	; (8000bd0 <time_display+0x578>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	4b4f      	ldr	r3, [pc, #316]	; (8000bec <time_display+0x594>)
 8000ab0:	6819      	ldr	r1, [r3, #0]
 8000ab2:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <time_display+0x584>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	494d      	ldr	r1, [pc, #308]	; (8000bf0 <time_display+0x598>)
 8000abc:	4849      	ldr	r0, [pc, #292]	; (8000be4 <time_display+0x58c>)
 8000abe:	f003 fe69 	bl	8004794 <siprintf>
				strcat(line[1],time_str);
 8000ac2:	4948      	ldr	r1, [pc, #288]	; (8000be4 <time_display+0x58c>)
 8000ac4:	4843      	ldr	r0, [pc, #268]	; (8000bd4 <time_display+0x57c>)
 8000ac6:	f003 fe85 	bl	80047d4 <strcat>
			break;
 8000aca:	e000      	b.n	8000ace <time_display+0x476>
		default:
			break;
 8000acc:	bf00      	nop
		}
		break;
 8000ace:	e229      	b.n	8000f24 <time_display+0x8cc>
	case ALARM_TIME_SETTING:
		memset(line,0,sizeof(line));
 8000ad0:	2224      	movs	r2, #36	; 0x24
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4848      	ldr	r0, [pc, #288]	; (8000bf8 <time_display+0x5a0>)
 8000ad6:	f003 fe55 	bl	8004784 <memset>
		sprintf(line[0],"Korea Polytech  \r\n");
 8000ada:	4a47      	ldr	r2, [pc, #284]	; (8000bf8 <time_display+0x5a0>)
 8000adc:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <time_display+0x5a4>)
 8000ade:	4615      	mov	r5, r2
 8000ae0:	461c      	mov	r4, r3
 8000ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae4:	6028      	str	r0, [r5, #0]
 8000ae6:	6069      	str	r1, [r5, #4]
 8000ae8:	60aa      	str	r2, [r5, #8]
 8000aea:	60eb      	str	r3, [r5, #12]
 8000aec:	8823      	ldrh	r3, [r4, #0]
 8000aee:	78a2      	ldrb	r2, [r4, #2]
 8000af0:	822b      	strh	r3, [r5, #16]
 8000af2:	4613      	mov	r3, r2
 8000af4:	74ab      	strb	r3, [r5, #18]
		//설정모드 자리가 어디 선택 되어 있는 가에 따라 깜빡임 다른 모습으로 출력
		switch(setting)
 8000af6:	4b42      	ldr	r3, [pc, #264]	; (8000c00 <time_display+0x5a8>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	f200 81ec 	bhi.w	8000eda <time_display+0x882>
 8000b02:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <time_display+0x4b0>)
 8000b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b08:	08000b19 	.word	0x08000b19
 8000b0c:	08000c47 	.word	0x08000c47
 8000b10:	08000d0f 	.word	0x08000d0f
 8000b14:	08000ddb 	.word	0x08000ddb
		{
		case AP:
			if(timer_count % 200 == 0)
 8000b18:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <time_display+0x570>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <time_display+0x574>)
 8000b1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b22:	1199      	asrs	r1, r3, #6
 8000b24:	17d3      	asrs	r3, r2, #31
 8000b26:	1acb      	subs	r3, r1, r3
 8000b28:	21c8      	movs	r1, #200	; 0xc8
 8000b2a:	fb01 f303 	mul.w	r3, r1, r3
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d12f      	bne.n	8000b94 <time_display+0x53c>
			{
				if(AL_hour>=12)
 8000b34:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <time_display+0x5ac>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b0b      	cmp	r3, #11
 8000b3a:	dd14      	ble.n	8000b66 <time_display+0x50e>
				{
				  strncpy(line[1],"   ",3);
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <time_display+0x57c>)
 8000b3e:	4a32      	ldr	r2, [pc, #200]	; (8000c08 <time_display+0x5b0>)
 8000b40:	8811      	ldrh	r1, [r2, #0]
 8000b42:	7892      	ldrb	r2, [r2, #2]
 8000b44:	8019      	strh	r1, [r3, #0]
 8000b46:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour-12,AL_minute,AL_second);
 8000b48:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <time_display+0x5ac>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f1a3 020c 	sub.w	r2, r3, #12
 8000b50:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <time_display+0x5b4>)
 8000b52:	6819      	ldr	r1, [r3, #0]
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <time_display+0x5b8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	492d      	ldr	r1, [pc, #180]	; (8000c14 <time_display+0x5bc>)
 8000b5e:	4821      	ldr	r0, [pc, #132]	; (8000be4 <time_display+0x58c>)
 8000b60:	f003 fe18 	bl	8004794 <siprintf>
 8000b64:	e011      	b.n	8000b8a <time_display+0x532>
				}
				else
				{
				  strncpy(line[1],"   ",3);
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <time_display+0x57c>)
 8000b68:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <time_display+0x5b0>)
 8000b6a:	8811      	ldrh	r1, [r2, #0]
 8000b6c:	7892      	ldrb	r2, [r2, #2]
 8000b6e:	8019      	strh	r1, [r3, #0]
 8000b70:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
 8000b72:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <time_display+0x5ac>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <time_display+0x5b4>)
 8000b78:	6819      	ldr	r1, [r3, #0]
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <time_display+0x5b8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	460b      	mov	r3, r1
 8000b82:	4924      	ldr	r1, [pc, #144]	; (8000c14 <time_display+0x5bc>)
 8000b84:	4817      	ldr	r0, [pc, #92]	; (8000be4 <time_display+0x58c>)
 8000b86:	f003 fe05 	bl	8004794 <siprintf>
				}
				strcat(line[1],time_str);
 8000b8a:	4916      	ldr	r1, [pc, #88]	; (8000be4 <time_display+0x58c>)
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <time_display+0x57c>)
 8000b8e:	f003 fe21 	bl	80047d4 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
				}
				strcat(line[1],time_str);

			}
			break;
 8000b92:	e1a3      	b.n	8000edc <time_display+0x884>
				if(AL_hour>=12)
 8000b94:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <time_display+0x5ac>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b0b      	cmp	r3, #11
 8000b9a:	dd3d      	ble.n	8000c18 <time_display+0x5c0>
				  strncpy(line[1],"PM ",3);
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <time_display+0x57c>)
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <time_display+0x580>)
 8000ba0:	8811      	ldrh	r1, [r2, #0]
 8000ba2:	7892      	ldrb	r2, [r2, #2]
 8000ba4:	8019      	strh	r1, [r3, #0]
 8000ba6:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour-12,AL_minute,AL_second);
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <time_display+0x5ac>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f1a3 020c 	sub.w	r2, r3, #12
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <time_display+0x5b4>)
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <time_display+0x5b8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4915      	ldr	r1, [pc, #84]	; (8000c14 <time_display+0x5bc>)
 8000bbe:	4809      	ldr	r0, [pc, #36]	; (8000be4 <time_display+0x58c>)
 8000bc0:	f003 fde8 	bl	8004794 <siprintf>
 8000bc4:	e03a      	b.n	8000c3c <time_display+0x5e4>
 8000bc6:	bf00      	nop
 8000bc8:	200001c4 	.word	0x200001c4
 8000bcc:	51eb851f 	.word	0x51eb851f
 8000bd0:	20000144 	.word	0x20000144
 8000bd4:	200000fa 	.word	0x200000fa
 8000bd8:	08004fec 	.word	0x08004fec
 8000bdc:	2000010c 	.word	0x2000010c
 8000be0:	0800501c 	.word	0x0800501c
 8000be4:	200001b0 	.word	0x200001b0
 8000be8:	08005004 	.word	0x08005004
 8000bec:	20000140 	.word	0x20000140
 8000bf0:	08004ff0 	.word	0x08004ff0
 8000bf4:	0800502c 	.word	0x0800502c
 8000bf8:	200000e8 	.word	0x200000e8
 8000bfc:	08004fd8 	.word	0x08004fd8
 8000c00:	20000000 	.word	0x20000000
 8000c04:	200001c0 	.word	0x200001c0
 8000c08:	08005008 	.word	0x08005008
 8000c0c:	2000009c 	.word	0x2000009c
 8000c10:	20000114 	.word	0x20000114
 8000c14:	0800503c 	.word	0x0800503c
				  strncpy(line[1],"AM ",3);
 8000c18:	4b97      	ldr	r3, [pc, #604]	; (8000e78 <time_display+0x820>)
 8000c1a:	4a98      	ldr	r2, [pc, #608]	; (8000e7c <time_display+0x824>)
 8000c1c:	8811      	ldrh	r1, [r2, #0]
 8000c1e:	7892      	ldrb	r2, [r2, #2]
 8000c20:	8019      	strh	r1, [r3, #0]
 8000c22:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
 8000c24:	4b96      	ldr	r3, [pc, #600]	; (8000e80 <time_display+0x828>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b96      	ldr	r3, [pc, #600]	; (8000e84 <time_display+0x82c>)
 8000c2a:	6819      	ldr	r1, [r3, #0]
 8000c2c:	4b96      	ldr	r3, [pc, #600]	; (8000e88 <time_display+0x830>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	460b      	mov	r3, r1
 8000c34:	4995      	ldr	r1, [pc, #596]	; (8000e8c <time_display+0x834>)
 8000c36:	4896      	ldr	r0, [pc, #600]	; (8000e90 <time_display+0x838>)
 8000c38:	f003 fdac 	bl	8004794 <siprintf>
				strcat(line[1],time_str);
 8000c3c:	4994      	ldr	r1, [pc, #592]	; (8000e90 <time_display+0x838>)
 8000c3e:	488e      	ldr	r0, [pc, #568]	; (8000e78 <time_display+0x820>)
 8000c40:	f003 fdc8 	bl	80047d4 <strcat>
			break;
 8000c44:	e14a      	b.n	8000edc <time_display+0x884>
		case SET_H:
			if(timer_count % 200 == 0)
 8000c46:	4b93      	ldr	r3, [pc, #588]	; (8000e94 <time_display+0x83c>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b93      	ldr	r3, [pc, #588]	; (8000e98 <time_display+0x840>)
 8000c4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c50:	1199      	asrs	r1, r3, #6
 8000c52:	17d3      	asrs	r3, r2, #31
 8000c54:	1acb      	subs	r3, r1, r3
 8000c56:	21c8      	movs	r1, #200	; 0xc8
 8000c58:	fb01 f303 	mul.w	r3, r1, r3
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d125      	bne.n	8000cae <time_display+0x656>
			{
				if(AL_hour>=12)
 8000c62:	4b87      	ldr	r3, [pc, #540]	; (8000e80 <time_display+0x828>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b0b      	cmp	r3, #11
 8000c68:	dd0e      	ble.n	8000c88 <time_display+0x630>
				{
				  strncpy(line[1],"PM ",3);
 8000c6a:	4b83      	ldr	r3, [pc, #524]	; (8000e78 <time_display+0x820>)
 8000c6c:	4a8b      	ldr	r2, [pc, #556]	; (8000e9c <time_display+0x844>)
 8000c6e:	8811      	ldrh	r1, [r2, #0]
 8000c70:	7892      	ldrb	r2, [r2, #2]
 8000c72:	8019      	strh	r1, [r3, #0]
 8000c74:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"  :%02d:%02d AL\r\n",AL_minute,AL_second);
 8000c76:	4b83      	ldr	r3, [pc, #524]	; (8000e84 <time_display+0x82c>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b83      	ldr	r3, [pc, #524]	; (8000e88 <time_display+0x830>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4988      	ldr	r1, [pc, #544]	; (8000ea0 <time_display+0x848>)
 8000c80:	4883      	ldr	r0, [pc, #524]	; (8000e90 <time_display+0x838>)
 8000c82:	f003 fd87 	bl	8004794 <siprintf>
 8000c86:	e00d      	b.n	8000ca4 <time_display+0x64c>
				}
				else
				{
				  strncpy(line[1],"AM ",3);
 8000c88:	4b7b      	ldr	r3, [pc, #492]	; (8000e78 <time_display+0x820>)
 8000c8a:	4a7c      	ldr	r2, [pc, #496]	; (8000e7c <time_display+0x824>)
 8000c8c:	8811      	ldrh	r1, [r2, #0]
 8000c8e:	7892      	ldrb	r2, [r2, #2]
 8000c90:	8019      	strh	r1, [r3, #0]
 8000c92:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"  :%02d:%02d AL\r\n",AL_minute,AL_second);
 8000c94:	4b7b      	ldr	r3, [pc, #492]	; (8000e84 <time_display+0x82c>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b7b      	ldr	r3, [pc, #492]	; (8000e88 <time_display+0x830>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4980      	ldr	r1, [pc, #512]	; (8000ea0 <time_display+0x848>)
 8000c9e:	487c      	ldr	r0, [pc, #496]	; (8000e90 <time_display+0x838>)
 8000ca0:	f003 fd78 	bl	8004794 <siprintf>
				}
				strcat(line[1],time_str);
 8000ca4:	497a      	ldr	r1, [pc, #488]	; (8000e90 <time_display+0x838>)
 8000ca6:	4874      	ldr	r0, [pc, #464]	; (8000e78 <time_display+0x820>)
 8000ca8:	f003 fd94 	bl	80047d4 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
				}
				strcat(line[1],time_str);

			}
			break;
 8000cac:	e116      	b.n	8000edc <time_display+0x884>
				if(AL_hour>=12)
 8000cae:	4b74      	ldr	r3, [pc, #464]	; (8000e80 <time_display+0x828>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b0b      	cmp	r3, #11
 8000cb4:	dd14      	ble.n	8000ce0 <time_display+0x688>
				  strncpy(line[1],"PM ",3);
 8000cb6:	4b70      	ldr	r3, [pc, #448]	; (8000e78 <time_display+0x820>)
 8000cb8:	4a78      	ldr	r2, [pc, #480]	; (8000e9c <time_display+0x844>)
 8000cba:	8811      	ldrh	r1, [r2, #0]
 8000cbc:	7892      	ldrb	r2, [r2, #2]
 8000cbe:	8019      	strh	r1, [r3, #0]
 8000cc0:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour-12,AL_minute,AL_second);
 8000cc2:	4b6f      	ldr	r3, [pc, #444]	; (8000e80 <time_display+0x828>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f1a3 020c 	sub.w	r2, r3, #12
 8000cca:	4b6e      	ldr	r3, [pc, #440]	; (8000e84 <time_display+0x82c>)
 8000ccc:	6819      	ldr	r1, [r3, #0]
 8000cce:	4b6e      	ldr	r3, [pc, #440]	; (8000e88 <time_display+0x830>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	496d      	ldr	r1, [pc, #436]	; (8000e8c <time_display+0x834>)
 8000cd8:	486d      	ldr	r0, [pc, #436]	; (8000e90 <time_display+0x838>)
 8000cda:	f003 fd5b 	bl	8004794 <siprintf>
 8000cde:	e011      	b.n	8000d04 <time_display+0x6ac>
				  strncpy(line[1],"AM ",3);
 8000ce0:	4b65      	ldr	r3, [pc, #404]	; (8000e78 <time_display+0x820>)
 8000ce2:	4a66      	ldr	r2, [pc, #408]	; (8000e7c <time_display+0x824>)
 8000ce4:	8811      	ldrh	r1, [r2, #0]
 8000ce6:	7892      	ldrb	r2, [r2, #2]
 8000ce8:	8019      	strh	r1, [r3, #0]
 8000cea:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
 8000cec:	4b64      	ldr	r3, [pc, #400]	; (8000e80 <time_display+0x828>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b64      	ldr	r3, [pc, #400]	; (8000e84 <time_display+0x82c>)
 8000cf2:	6819      	ldr	r1, [r3, #0]
 8000cf4:	4b64      	ldr	r3, [pc, #400]	; (8000e88 <time_display+0x830>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4963      	ldr	r1, [pc, #396]	; (8000e8c <time_display+0x834>)
 8000cfe:	4864      	ldr	r0, [pc, #400]	; (8000e90 <time_display+0x838>)
 8000d00:	f003 fd48 	bl	8004794 <siprintf>
				strcat(line[1],time_str);
 8000d04:	4962      	ldr	r1, [pc, #392]	; (8000e90 <time_display+0x838>)
 8000d06:	485c      	ldr	r0, [pc, #368]	; (8000e78 <time_display+0x820>)
 8000d08:	f003 fd64 	bl	80047d4 <strcat>
			break;
 8000d0c:	e0e6      	b.n	8000edc <time_display+0x884>
		case SET_M:
			if(timer_count % 200 == 0)
 8000d0e:	4b61      	ldr	r3, [pc, #388]	; (8000e94 <time_display+0x83c>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b61      	ldr	r3, [pc, #388]	; (8000e98 <time_display+0x840>)
 8000d14:	fb83 1302 	smull	r1, r3, r3, r2
 8000d18:	1199      	asrs	r1, r3, #6
 8000d1a:	17d3      	asrs	r3, r2, #31
 8000d1c:	1acb      	subs	r3, r1, r3
 8000d1e:	21c8      	movs	r1, #200	; 0xc8
 8000d20:	fb01 f303 	mul.w	r3, r1, r3
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d127      	bne.n	8000d7a <time_display+0x722>
			{
				if(AL_hour>=12)
 8000d2a:	4b55      	ldr	r3, [pc, #340]	; (8000e80 <time_display+0x828>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b0b      	cmp	r3, #11
 8000d30:	dd10      	ble.n	8000d54 <time_display+0x6fc>
				{
				  strncpy(line[1],"PM ",3);
 8000d32:	4b51      	ldr	r3, [pc, #324]	; (8000e78 <time_display+0x820>)
 8000d34:	4a59      	ldr	r2, [pc, #356]	; (8000e9c <time_display+0x844>)
 8000d36:	8811      	ldrh	r1, [r2, #0]
 8000d38:	7892      	ldrb	r2, [r2, #2]
 8000d3a:	8019      	strh	r1, [r3, #0]
 8000d3c:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:  :%02d AL\r\n",AL_hour-12,AL_second);
 8000d3e:	4b50      	ldr	r3, [pc, #320]	; (8000e80 <time_display+0x828>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f1a3 020c 	sub.w	r2, r3, #12
 8000d46:	4b50      	ldr	r3, [pc, #320]	; (8000e88 <time_display+0x830>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4956      	ldr	r1, [pc, #344]	; (8000ea4 <time_display+0x84c>)
 8000d4c:	4850      	ldr	r0, [pc, #320]	; (8000e90 <time_display+0x838>)
 8000d4e:	f003 fd21 	bl	8004794 <siprintf>
 8000d52:	e00d      	b.n	8000d70 <time_display+0x718>
				}
				else
				{
				  strncpy(line[1],"AM ",3);
 8000d54:	4b48      	ldr	r3, [pc, #288]	; (8000e78 <time_display+0x820>)
 8000d56:	4a49      	ldr	r2, [pc, #292]	; (8000e7c <time_display+0x824>)
 8000d58:	8811      	ldrh	r1, [r2, #0]
 8000d5a:	7892      	ldrb	r2, [r2, #2]
 8000d5c:	8019      	strh	r1, [r3, #0]
 8000d5e:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:  :%02d AL\r\n",AL_hour,AL_second);
 8000d60:	4b47      	ldr	r3, [pc, #284]	; (8000e80 <time_display+0x828>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b48      	ldr	r3, [pc, #288]	; (8000e88 <time_display+0x830>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	494e      	ldr	r1, [pc, #312]	; (8000ea4 <time_display+0x84c>)
 8000d6a:	4849      	ldr	r0, [pc, #292]	; (8000e90 <time_display+0x838>)
 8000d6c:	f003 fd12 	bl	8004794 <siprintf>
				}
				strcat(line[1],time_str);
 8000d70:	4947      	ldr	r1, [pc, #284]	; (8000e90 <time_display+0x838>)
 8000d72:	4841      	ldr	r0, [pc, #260]	; (8000e78 <time_display+0x820>)
 8000d74:	f003 fd2e 	bl	80047d4 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
				}
				strcat(line[1],time_str);

			}
			break;
 8000d78:	e0b0      	b.n	8000edc <time_display+0x884>
				if(AL_hour>=12)
 8000d7a:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <time_display+0x828>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b0b      	cmp	r3, #11
 8000d80:	dd14      	ble.n	8000dac <time_display+0x754>
				  strncpy(line[1],"PM ",3);
 8000d82:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <time_display+0x820>)
 8000d84:	4a45      	ldr	r2, [pc, #276]	; (8000e9c <time_display+0x844>)
 8000d86:	8811      	ldrh	r1, [r2, #0]
 8000d88:	7892      	ldrb	r2, [r2, #2]
 8000d8a:	8019      	strh	r1, [r3, #0]
 8000d8c:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour-12,AL_minute,AL_second);
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <time_display+0x828>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f1a3 020c 	sub.w	r2, r3, #12
 8000d96:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <time_display+0x82c>)
 8000d98:	6819      	ldr	r1, [r3, #0]
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <time_display+0x830>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	460b      	mov	r3, r1
 8000da2:	493a      	ldr	r1, [pc, #232]	; (8000e8c <time_display+0x834>)
 8000da4:	483a      	ldr	r0, [pc, #232]	; (8000e90 <time_display+0x838>)
 8000da6:	f003 fcf5 	bl	8004794 <siprintf>
 8000daa:	e011      	b.n	8000dd0 <time_display+0x778>
				  strncpy(line[1],"AM ",3);
 8000dac:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <time_display+0x820>)
 8000dae:	4a33      	ldr	r2, [pc, #204]	; (8000e7c <time_display+0x824>)
 8000db0:	8811      	ldrh	r1, [r2, #0]
 8000db2:	7892      	ldrb	r2, [r2, #2]
 8000db4:	8019      	strh	r1, [r3, #0]
 8000db6:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
 8000db8:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <time_display+0x828>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <time_display+0x82c>)
 8000dbe:	6819      	ldr	r1, [r3, #0]
 8000dc0:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <time_display+0x830>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4930      	ldr	r1, [pc, #192]	; (8000e8c <time_display+0x834>)
 8000dca:	4831      	ldr	r0, [pc, #196]	; (8000e90 <time_display+0x838>)
 8000dcc:	f003 fce2 	bl	8004794 <siprintf>
				strcat(line[1],time_str);
 8000dd0:	492f      	ldr	r1, [pc, #188]	; (8000e90 <time_display+0x838>)
 8000dd2:	4829      	ldr	r0, [pc, #164]	; (8000e78 <time_display+0x820>)
 8000dd4:	f003 fcfe 	bl	80047d4 <strcat>
			break;
 8000dd8:	e080      	b.n	8000edc <time_display+0x884>
		case SET_S:
			if(timer_count % 200 == 0)
 8000dda:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <time_display+0x83c>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <time_display+0x840>)
 8000de0:	fb83 1302 	smull	r1, r3, r3, r2
 8000de4:	1199      	asrs	r1, r3, #6
 8000de6:	17d3      	asrs	r3, r2, #31
 8000de8:	1acb      	subs	r3, r1, r3
 8000dea:	21c8      	movs	r1, #200	; 0xc8
 8000dec:	fb01 f303 	mul.w	r3, r1, r3
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d127      	bne.n	8000e46 <time_display+0x7ee>
			{
				if(AL_hour>=12)
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <time_display+0x828>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b0b      	cmp	r3, #11
 8000dfc:	dd10      	ble.n	8000e20 <time_display+0x7c8>
				{
				  strncpy(line[1],"PM ",3);
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <time_display+0x820>)
 8000e00:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <time_display+0x844>)
 8000e02:	8811      	ldrh	r1, [r2, #0]
 8000e04:	7892      	ldrb	r2, [r2, #2]
 8000e06:	8019      	strh	r1, [r3, #0]
 8000e08:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:   AL\r\n",AL_hour-12,AL_minute);
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <time_display+0x828>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f1a3 020c 	sub.w	r2, r3, #12
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <time_display+0x82c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4924      	ldr	r1, [pc, #144]	; (8000ea8 <time_display+0x850>)
 8000e18:	481d      	ldr	r0, [pc, #116]	; (8000e90 <time_display+0x838>)
 8000e1a:	f003 fcbb 	bl	8004794 <siprintf>
 8000e1e:	e00d      	b.n	8000e3c <time_display+0x7e4>
				}
				else
				{
				  strncpy(line[1],"AM ",3);
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <time_display+0x820>)
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <time_display+0x824>)
 8000e24:	8811      	ldrh	r1, [r2, #0]
 8000e26:	7892      	ldrb	r2, [r2, #2]
 8000e28:	8019      	strh	r1, [r3, #0]
 8000e2a:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:   AL\r\n",AL_hour,AL_minute);
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <time_display+0x828>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <time_display+0x82c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	491c      	ldr	r1, [pc, #112]	; (8000ea8 <time_display+0x850>)
 8000e36:	4816      	ldr	r0, [pc, #88]	; (8000e90 <time_display+0x838>)
 8000e38:	f003 fcac 	bl	8004794 <siprintf>
				}
				strcat(line[1],time_str);
 8000e3c:	4914      	ldr	r1, [pc, #80]	; (8000e90 <time_display+0x838>)
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <time_display+0x820>)
 8000e40:	f003 fcc8 	bl	80047d4 <strcat>
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
				}
				strcat(line[1],time_str);

			}
			break;
 8000e44:	e04a      	b.n	8000edc <time_display+0x884>
				if(AL_hour>=12)
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <time_display+0x828>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b0b      	cmp	r3, #11
 8000e4c:	dd2e      	ble.n	8000eac <time_display+0x854>
				  strncpy(line[1],"PM ",3);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <time_display+0x820>)
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <time_display+0x844>)
 8000e52:	8811      	ldrh	r1, [r2, #0]
 8000e54:	7892      	ldrb	r2, [r2, #2]
 8000e56:	8019      	strh	r1, [r3, #0]
 8000e58:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour-12,AL_minute,AL_second);
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <time_display+0x828>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f1a3 020c 	sub.w	r2, r3, #12
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <time_display+0x82c>)
 8000e64:	6819      	ldr	r1, [r3, #0]
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <time_display+0x830>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4907      	ldr	r1, [pc, #28]	; (8000e8c <time_display+0x834>)
 8000e70:	4807      	ldr	r0, [pc, #28]	; (8000e90 <time_display+0x838>)
 8000e72:	f003 fc8f 	bl	8004794 <siprintf>
 8000e76:	e02b      	b.n	8000ed0 <time_display+0x878>
 8000e78:	200000fa 	.word	0x200000fa
 8000e7c:	08005004 	.word	0x08005004
 8000e80:	200001c0 	.word	0x200001c0
 8000e84:	2000009c 	.word	0x2000009c
 8000e88:	20000114 	.word	0x20000114
 8000e8c:	0800503c 	.word	0x0800503c
 8000e90:	200001b0 	.word	0x200001b0
 8000e94:	200001c4 	.word	0x200001c4
 8000e98:	51eb851f 	.word	0x51eb851f
 8000e9c:	08004fec 	.word	0x08004fec
 8000ea0:	08005050 	.word	0x08005050
 8000ea4:	08005064 	.word	0x08005064
 8000ea8:	08005078 	.word	0x08005078
				  strncpy(line[1],"AM ",3);
 8000eac:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <time_display+0x8dc>)
 8000eae:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <time_display+0x8e0>)
 8000eb0:	8811      	ldrh	r1, [r2, #0]
 8000eb2:	7892      	ldrb	r2, [r2, #2]
 8000eb4:	8019      	strh	r1, [r3, #0]
 8000eb6:	709a      	strb	r2, [r3, #2]
				  sprintf(time_str,"%02d:%02d:%02d AL\r\n",AL_hour,AL_minute,AL_second);
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <time_display+0x8e4>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <time_display+0x8e8>)
 8000ebe:	6819      	ldr	r1, [r3, #0]
 8000ec0:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <time_display+0x8ec>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	491f      	ldr	r1, [pc, #124]	; (8000f48 <time_display+0x8f0>)
 8000eca:	4820      	ldr	r0, [pc, #128]	; (8000f4c <time_display+0x8f4>)
 8000ecc:	f003 fc62 	bl	8004794 <siprintf>
				strcat(line[1],time_str);
 8000ed0:	491e      	ldr	r1, [pc, #120]	; (8000f4c <time_display+0x8f4>)
 8000ed2:	4818      	ldr	r0, [pc, #96]	; (8000f34 <time_display+0x8dc>)
 8000ed4:	f003 fc7e 	bl	80047d4 <strcat>
			break;
 8000ed8:	e000      	b.n	8000edc <time_display+0x884>
		default:
			break;
 8000eda:	bf00      	nop
		}
		break;
 8000edc:	e022      	b.n	8000f24 <time_display+0x8cc>
	case MUSIC_SELECT:
		memset(line,0,sizeof(line));
 8000ede:	2224      	movs	r2, #36	; 0x24
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	481b      	ldr	r0, [pc, #108]	; (8000f50 <time_display+0x8f8>)
 8000ee4:	f003 fc4e 	bl	8004784 <memset>
		sprintf(line[0],"Three Bears     \r\n");
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <time_display+0x8f8>)
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <time_display+0x8fc>)
 8000eec:	4615      	mov	r5, r2
 8000eee:	461c      	mov	r4, r3
 8000ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef2:	6028      	str	r0, [r5, #0]
 8000ef4:	6069      	str	r1, [r5, #4]
 8000ef6:	60aa      	str	r2, [r5, #8]
 8000ef8:	60eb      	str	r3, [r5, #12]
 8000efa:	8823      	ldrh	r3, [r4, #0]
 8000efc:	78a2      	ldrb	r2, [r4, #2]
 8000efe:	822b      	strh	r3, [r5, #16]
 8000f00:	4613      	mov	r3, r2
 8000f02:	74ab      	strb	r3, [r5, #18]
		sprintf(line[1],"Spring Water    \r\n");
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <time_display+0x8dc>)
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <time_display+0x900>)
 8000f08:	4615      	mov	r5, r2
 8000f0a:	461c      	mov	r4, r3
 8000f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f0e:	6028      	str	r0, [r5, #0]
 8000f10:	6069      	str	r1, [r5, #4]
 8000f12:	60aa      	str	r2, [r5, #8]
 8000f14:	60eb      	str	r3, [r5, #12]
 8000f16:	8823      	ldrh	r3, [r4, #0]
 8000f18:	78a2      	ldrb	r2, [r4, #2]
 8000f1a:	822b      	strh	r3, [r5, #16]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	74ab      	strb	r3, [r5, #18]
		break;
 8000f20:	e000      	b.n	8000f24 <time_display+0x8cc>
	default:
		break;
 8000f22:	bf00      	nop
	}


  HAL_UART_Transmit_IT(&huart3,(uint8_t *)line,sizeof(line));
 8000f24:	2224      	movs	r2, #36	; 0x24
 8000f26:	490a      	ldr	r1, [pc, #40]	; (8000f50 <time_display+0x8f8>)
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <time_display+0x904>)
 8000f2a:	f002 fdb4 	bl	8003a96 <HAL_UART_Transmit_IT>
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bdb0      	pop	{r4, r5, r7, pc}
 8000f34:	200000fa 	.word	0x200000fa
 8000f38:	08005004 	.word	0x08005004
 8000f3c:	200001c0 	.word	0x200001c0
 8000f40:	2000009c 	.word	0x2000009c
 8000f44:	20000114 	.word	0x20000114
 8000f48:	0800503c 	.word	0x0800503c
 8000f4c:	200001b0 	.word	0x200001b0
 8000f50:	200000e8 	.word	0x200000e8
 8000f54:	0800508c 	.word	0x0800508c
 8000f58:	080050a0 	.word	0x080050a0
 8000f5c:	200000a0 	.word	0x200000a0

08000f60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a9b      	ldr	r2, [pc, #620]	; (80011dc <HAL_UART_RxCpltCallback+0x27c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	f040 824a 	bne.w	8001408 <HAL_UART_RxCpltCallback+0x4a8>
  {

	current_time = HAL_GetTick();
 8000f74:	f000 fee8 	bl	8001d48 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4b99      	ldr	r3, [pc, #612]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 8000f7c:	601a      	str	r2, [r3, #0]
    time_interval = current_time - last_time;
 8000f7e:	4b98      	ldr	r3, [pc, #608]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b98      	ldr	r3, [pc, #608]	; (80011e4 <HAL_UART_RxCpltCallback+0x284>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	4a97      	ldr	r2, [pc, #604]	; (80011e8 <HAL_UART_RxCpltCallback+0x288>)
 8000f8a:	6013      	str	r3, [r2, #0]
    last_time = current_time;
 8000f8c:	4b94      	ldr	r3, [pc, #592]	; (80011e0 <HAL_UART_RxCpltCallback+0x280>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a94      	ldr	r2, [pc, #592]	; (80011e4 <HAL_UART_RxCpltCallback+0x284>)
 8000f92:	6013      	str	r3, [r2, #0]

    switch(current_state.mode)
 8000f94:	4b95      	ldr	r3, [pc, #596]	; (80011ec <HAL_UART_RxCpltCallback+0x28c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	f200 822f 	bhi.w	80013fc <HAL_UART_RxCpltCallback+0x49c>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <HAL_UART_RxCpltCallback+0x44>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fb5 	.word	0x08000fb5
 8000fa8:	08000fcd 	.word	0x08000fcd
 8000fac:	08001139 	.word	0x08001139
 8000fb0:	08001371 	.word	0x08001371
    {
      case NORMAL_STATE:
    	  switch(key_value)
 8000fb4:	4b8e      	ldr	r3, [pc, #568]	; (80011f0 <HAL_UART_RxCpltCallback+0x290>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b0d      	cmp	r3, #13
 8000fba:	d000      	beq.n	8000fbe <HAL_UART_RxCpltCallback+0x5e>
    	  	  case SEL_KEY:
        		  current_state.button = SEL;
        		  mode_analysis();
    	  		  break;
    	  	  default:  // Arrow keys is Not valid in NORMAL state
    	  		  break;
 8000fbc:	e005      	b.n	8000fca <HAL_UART_RxCpltCallback+0x6a>
        		  current_state.button = SEL;
 8000fbe:	4b8b      	ldr	r3, [pc, #556]	; (80011ec <HAL_UART_RxCpltCallback+0x28c>)
 8000fc0:	2205      	movs	r2, #5
 8000fc2:	705a      	strb	r2, [r3, #1]
        		  mode_analysis();
 8000fc4:	f000 fa3a 	bl	800143c <mode_analysis>
    	  		  break;
 8000fc8:	bf00      	nop
    	  }
    	  break;
 8000fca:	e218      	b.n	80013fe <HAL_UART_RxCpltCallback+0x49e>
      case TIME_SETTING:
    	  switch(key_value)
 8000fcc:	4b88      	ldr	r3, [pc, #544]	; (80011f0 <HAL_UART_RxCpltCallback+0x290>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b42      	cmp	r3, #66	; 0x42
 8000fd2:	d065      	beq.n	80010a0 <HAL_UART_RxCpltCallback+0x140>
 8000fd4:	2b42      	cmp	r3, #66	; 0x42
 8000fd6:	dc04      	bgt.n	8000fe2 <HAL_UART_RxCpltCallback+0x82>
 8000fd8:	2b0d      	cmp	r3, #13
 8000fda:	d009      	beq.n	8000ff0 <HAL_UART_RxCpltCallback+0x90>
 8000fdc:	2b41      	cmp	r3, #65	; 0x41
 8000fde:	d035      	beq.n	800104c <HAL_UART_RxCpltCallback+0xec>
    	  	  case LEFT_KEY:
    	  		  setting--;
    	  		  if(setting == NOT) setting = SET_S;
    	  		  break;
    	  	  default:  // Arrow keys is Not valid in NORMAL state
    	  		  break;
 8000fe0:	e0a9      	b.n	8001136 <HAL_UART_RxCpltCallback+0x1d6>
    	  switch(key_value)
 8000fe2:	2b43      	cmp	r3, #67	; 0x43
 8000fe4:	f000 8086 	beq.w	80010f4 <HAL_UART_RxCpltCallback+0x194>
 8000fe8:	2b44      	cmp	r3, #68	; 0x44
 8000fea:	f000 8091 	beq.w	8001110 <HAL_UART_RxCpltCallback+0x1b0>
    	  		  break;
 8000fee:	e0a2      	b.n	8001136 <HAL_UART_RxCpltCallback+0x1d6>
    	  		  if(time_interval>= NORMAL_CLICK_MIN)
 8000ff0:	4b7d      	ldr	r3, [pc, #500]	; (80011e8 <HAL_UART_RxCpltCallback+0x288>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ff8:	d306      	bcc.n	8001008 <HAL_UART_RxCpltCallback+0xa8>
    	  			  setting = AP;
 8000ffa:	4b7e      	ldr	r3, [pc, #504]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
    	  			  current_state.mode = NORMAL_STATE;
 8001000:	4b7a      	ldr	r3, [pc, #488]	; (80011ec <HAL_UART_RxCpltCallback+0x28c>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
    	  		  break;
 8001006:	e091      	b.n	800112c <HAL_UART_RxCpltCallback+0x1cc>
    	  		  else if(time_interval>=DOUBLE_CLICK_MIN && time_interval <=DOUBLE_CLICK_MAX)
 8001008:	4b77      	ldr	r3, [pc, #476]	; (80011e8 <HAL_UART_RxCpltCallback+0x288>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b63      	cmp	r3, #99	; 0x63
 800100e:	f240 808d 	bls.w	800112c <HAL_UART_RxCpltCallback+0x1cc>
 8001012:	4b75      	ldr	r3, [pc, #468]	; (80011e8 <HAL_UART_RxCpltCallback+0x288>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2bc8      	cmp	r3, #200	; 0xc8
 8001018:	f200 8088 	bhi.w	800112c <HAL_UART_RxCpltCallback+0x1cc>
    	  			  current_state.mode = MUSIC_SELECT;
 800101c:	4b73      	ldr	r3, [pc, #460]	; (80011ec <HAL_UART_RxCpltCallback+0x28c>)
 800101e:	2203      	movs	r2, #3
 8001020:	701a      	strb	r2, [r3, #0]
    	  			  long_key_count = 0;
 8001022:	4b75      	ldr	r3, [pc, #468]	; (80011f8 <HAL_UART_RxCpltCallback+0x298>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
    	  			  memset(uart_buf,0,sizeof(uart_buf));
 8001028:	2228      	movs	r2, #40	; 0x28
 800102a:	2100      	movs	r1, #0
 800102c:	4873      	ldr	r0, [pc, #460]	; (80011fc <HAL_UART_RxCpltCallback+0x29c>)
 800102e:	f003 fba9 	bl	8004784 <memset>
    	  			  sprintf(uart_buf,"MUSIC_SELECT %d\r\n",time_interval);
 8001032:	4b6d      	ldr	r3, [pc, #436]	; (80011e8 <HAL_UART_RxCpltCallback+0x288>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	4971      	ldr	r1, [pc, #452]	; (8001200 <HAL_UART_RxCpltCallback+0x2a0>)
 800103a:	4870      	ldr	r0, [pc, #448]	; (80011fc <HAL_UART_RxCpltCallback+0x29c>)
 800103c:	f003 fbaa 	bl	8004794 <siprintf>
    	  			  HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 8001040:	2228      	movs	r2, #40	; 0x28
 8001042:	496e      	ldr	r1, [pc, #440]	; (80011fc <HAL_UART_RxCpltCallback+0x29c>)
 8001044:	486f      	ldr	r0, [pc, #444]	; (8001204 <HAL_UART_RxCpltCallback+0x2a4>)
 8001046:	f002 fd26 	bl	8003a96 <HAL_UART_Transmit_IT>
    	  		  break;
 800104a:	e06f      	b.n	800112c <HAL_UART_RxCpltCallback+0x1cc>
    	  		  switch(setting)
 800104c:	4b69      	ldr	r3, [pc, #420]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	3b01      	subs	r3, #1
 8001052:	2b03      	cmp	r3, #3
 8001054:	d822      	bhi.n	800109c <HAL_UART_RxCpltCallback+0x13c>
 8001056:	a201      	add	r2, pc, #4	; (adr r2, 800105c <HAL_UART_RxCpltCallback+0xfc>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	0800106d 	.word	0x0800106d
 8001060:	08001079 	.word	0x08001079
 8001064:	08001085 	.word	0x08001085
 8001068:	08001091 	.word	0x08001091
    	  			  hour += 12;
 800106c:	4b66      	ldr	r3, [pc, #408]	; (8001208 <HAL_UART_RxCpltCallback+0x2a8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	330c      	adds	r3, #12
 8001072:	4a65      	ldr	r2, [pc, #404]	; (8001208 <HAL_UART_RxCpltCallback+0x2a8>)
 8001074:	6013      	str	r3, [r2, #0]
    	  			  break;
 8001076:	e012      	b.n	800109e <HAL_UART_RxCpltCallback+0x13e>
    	  			  hour++;
 8001078:	4b63      	ldr	r3, [pc, #396]	; (8001208 <HAL_UART_RxCpltCallback+0x2a8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4a62      	ldr	r2, [pc, #392]	; (8001208 <HAL_UART_RxCpltCallback+0x2a8>)
 8001080:	6013      	str	r3, [r2, #0]
    	  			  break;
 8001082:	e00c      	b.n	800109e <HAL_UART_RxCpltCallback+0x13e>
    	  			  minute++;
 8001084:	4b61      	ldr	r3, [pc, #388]	; (800120c <HAL_UART_RxCpltCallback+0x2ac>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a60      	ldr	r2, [pc, #384]	; (800120c <HAL_UART_RxCpltCallback+0x2ac>)
 800108c:	6013      	str	r3, [r2, #0]
    	  			  break;
 800108e:	e006      	b.n	800109e <HAL_UART_RxCpltCallback+0x13e>
    	  			  second++;
 8001090:	4b5f      	ldr	r3, [pc, #380]	; (8001210 <HAL_UART_RxCpltCallback+0x2b0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4a5e      	ldr	r2, [pc, #376]	; (8001210 <HAL_UART_RxCpltCallback+0x2b0>)
 8001098:	6013      	str	r3, [r2, #0]
    	  			  break;
 800109a:	e000      	b.n	800109e <HAL_UART_RxCpltCallback+0x13e>
    	  			  break;
 800109c:	bf00      	nop
    	  		  break;
 800109e:	e04a      	b.n	8001136 <HAL_UART_RxCpltCallback+0x1d6>
    	  		  switch(setting)
 80010a0:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d822      	bhi.n	80010f0 <HAL_UART_RxCpltCallback+0x190>
 80010aa:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <HAL_UART_RxCpltCallback+0x150>)
 80010ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b0:	080010c1 	.word	0x080010c1
 80010b4:	080010cd 	.word	0x080010cd
 80010b8:	080010d9 	.word	0x080010d9
 80010bc:	080010e5 	.word	0x080010e5
    	  			  hour -= 12;
 80010c0:	4b51      	ldr	r3, [pc, #324]	; (8001208 <HAL_UART_RxCpltCallback+0x2a8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b0c      	subs	r3, #12
 80010c6:	4a50      	ldr	r2, [pc, #320]	; (8001208 <HAL_UART_RxCpltCallback+0x2a8>)
 80010c8:	6013      	str	r3, [r2, #0]
    	  			  break;
 80010ca:	e012      	b.n	80010f2 <HAL_UART_RxCpltCallback+0x192>
    	  			  hour--;
 80010cc:	4b4e      	ldr	r3, [pc, #312]	; (8001208 <HAL_UART_RxCpltCallback+0x2a8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <HAL_UART_RxCpltCallback+0x2a8>)
 80010d4:	6013      	str	r3, [r2, #0]
    	  			  break;
 80010d6:	e00c      	b.n	80010f2 <HAL_UART_RxCpltCallback+0x192>
    	  			  minute--;
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <HAL_UART_RxCpltCallback+0x2ac>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3b01      	subs	r3, #1
 80010de:	4a4b      	ldr	r2, [pc, #300]	; (800120c <HAL_UART_RxCpltCallback+0x2ac>)
 80010e0:	6013      	str	r3, [r2, #0]
    	  			  break;
 80010e2:	e006      	b.n	80010f2 <HAL_UART_RxCpltCallback+0x192>
    	  			  second--;
 80010e4:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <HAL_UART_RxCpltCallback+0x2b0>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	4a49      	ldr	r2, [pc, #292]	; (8001210 <HAL_UART_RxCpltCallback+0x2b0>)
 80010ec:	6013      	str	r3, [r2, #0]
    	  			  break;
 80010ee:	e000      	b.n	80010f2 <HAL_UART_RxCpltCallback+0x192>
    	  			  break;
 80010f0:	bf00      	nop
    	  		  break;
 80010f2:	e020      	b.n	8001136 <HAL_UART_RxCpltCallback+0x1d6>
    	  		  setting++;
 80010f4:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 80010fe:	701a      	strb	r2, [r3, #0]
    	  		  if(setting == 5) setting = AP;
 8001100:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b05      	cmp	r3, #5
 8001106:	d113      	bne.n	8001130 <HAL_UART_RxCpltCallback+0x1d0>
 8001108:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
    	  		  break;
 800110e:	e00f      	b.n	8001130 <HAL_UART_RxCpltCallback+0x1d0>
    	  		  setting--;
 8001110:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 800111a:	701a      	strb	r2, [r3, #0]
    	  		  if(setting == NOT) setting = SET_S;
 800111c:	4b35      	ldr	r3, [pc, #212]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d107      	bne.n	8001134 <HAL_UART_RxCpltCallback+0x1d4>
 8001124:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 8001126:	2204      	movs	r2, #4
 8001128:	701a      	strb	r2, [r3, #0]
    	  		  break;
 800112a:	e003      	b.n	8001134 <HAL_UART_RxCpltCallback+0x1d4>
    	  		  break;
 800112c:	bf00      	nop
 800112e:	e166      	b.n	80013fe <HAL_UART_RxCpltCallback+0x49e>
    	  		  break;
 8001130:	bf00      	nop
 8001132:	e164      	b.n	80013fe <HAL_UART_RxCpltCallback+0x49e>
    	  		  break;
 8001134:	bf00      	nop
    	  }
    	  break;
 8001136:	e162      	b.n	80013fe <HAL_UART_RxCpltCallback+0x49e>
      case ALARM_TIME_SETTING:
    	  switch(key_value)
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <HAL_UART_RxCpltCallback+0x290>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b42      	cmp	r3, #66	; 0x42
 800113e:	f000 8097 	beq.w	8001270 <HAL_UART_RxCpltCallback+0x310>
 8001142:	2b42      	cmp	r3, #66	; 0x42
 8001144:	dc04      	bgt.n	8001150 <HAL_UART_RxCpltCallback+0x1f0>
 8001146:	2b0d      	cmp	r3, #13
 8001148:	d009      	beq.n	800115e <HAL_UART_RxCpltCallback+0x1fe>
 800114a:	2b41      	cmp	r3, #65	; 0x41
 800114c:	d014      	beq.n	8001178 <HAL_UART_RxCpltCallback+0x218>
    	  	  case LEFT_KEY:
    	  		  setting--;
    	  		  if(setting == NOT) setting = SET_S;
    	  		  break;
    	  	  default:  // Arrow keys is Not valid in NORMAL state
    	  		  break;
 800114e:	e10e      	b.n	800136e <HAL_UART_RxCpltCallback+0x40e>
    	  switch(key_value)
 8001150:	2b43      	cmp	r3, #67	; 0x43
 8001152:	f000 80eb 	beq.w	800132c <HAL_UART_RxCpltCallback+0x3cc>
 8001156:	2b44      	cmp	r3, #68	; 0x44
 8001158:	f000 80f6 	beq.w	8001348 <HAL_UART_RxCpltCallback+0x3e8>
    	  		  break;
 800115c:	e107      	b.n	800136e <HAL_UART_RxCpltCallback+0x40e>
    	  		  if(time_interval>= NORMAL_CLICK_MIN)
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <HAL_UART_RxCpltCallback+0x288>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001166:	f0c0 80fd 	bcc.w	8001364 <HAL_UART_RxCpltCallback+0x404>
    	  			  setting = AP;
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
    	  			  current_state.mode = NORMAL_STATE;
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <HAL_UART_RxCpltCallback+0x28c>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    	  		  break;
 8001176:	e0f5      	b.n	8001364 <HAL_UART_RxCpltCallback+0x404>
    	  		  switch(setting)
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <HAL_UART_RxCpltCallback+0x294>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3b01      	subs	r3, #1
 800117e:	2b03      	cmp	r3, #3
 8001180:	d86c      	bhi.n	800125c <HAL_UART_RxCpltCallback+0x2fc>
 8001182:	a201      	add	r2, pc, #4	; (adr r2, 8001188 <HAL_UART_RxCpltCallback+0x228>)
 8001184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001188:	08001199 	.word	0x08001199
 800118c:	080011bb 	.word	0x080011bb
 8001190:	08001219 	.word	0x08001219
 8001194:	0800123b 	.word	0x0800123b
    	  			  AL_hour += 12;
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_UART_RxCpltCallback+0x2b4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	330c      	adds	r3, #12
 800119e:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_UART_RxCpltCallback+0x2b4>)
 80011a0:	6013      	str	r3, [r2, #0]
    	  			  if(AL_hour > 12 || AL_hour <= 0) AL_hour = 0;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <HAL_UART_RxCpltCallback+0x2b4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b0c      	cmp	r3, #12
 80011a8:	dc03      	bgt.n	80011b2 <HAL_UART_RxCpltCallback+0x252>
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_UART_RxCpltCallback+0x2b4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	dc56      	bgt.n	8001260 <HAL_UART_RxCpltCallback+0x300>
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_UART_RxCpltCallback+0x2b4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
    	  			  break;
 80011b8:	e052      	b.n	8001260 <HAL_UART_RxCpltCallback+0x300>
    	  			  AL_hour++;
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_UART_RxCpltCallback+0x2b4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <HAL_UART_RxCpltCallback+0x2b4>)
 80011c2:	6013      	str	r3, [r2, #0]
    	  			  if(AL_hour > 12 || AL_hour <= 0) AL_hour = 0;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_UART_RxCpltCallback+0x2b4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b0c      	cmp	r3, #12
 80011ca:	dc03      	bgt.n	80011d4 <HAL_UART_RxCpltCallback+0x274>
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_UART_RxCpltCallback+0x2b4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	dc47      	bgt.n	8001264 <HAL_UART_RxCpltCallback+0x304>
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_UART_RxCpltCallback+0x2b4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
    	  			  break;
 80011da:	e043      	b.n	8001264 <HAL_UART_RxCpltCallback+0x304>
 80011dc:	40004800 	.word	0x40004800
 80011e0:	200000e0 	.word	0x200000e0
 80011e4:	20000168 	.word	0x20000168
 80011e8:	20000110 	.word	0x20000110
 80011ec:	200000e4 	.word	0x200000e4
 80011f0:	200000e6 	.word	0x200000e6
 80011f4:	20000000 	.word	0x20000000
 80011f8:	2000016c 	.word	0x2000016c
 80011fc:	20000118 	.word	0x20000118
 8001200:	080050b4 	.word	0x080050b4
 8001204:	200000a0 	.word	0x200000a0
 8001208:	20000144 	.word	0x20000144
 800120c:	20000140 	.word	0x20000140
 8001210:	2000010c 	.word	0x2000010c
 8001214:	200001c0 	.word	0x200001c0
    	  			  AL_minute++;
 8001218:	4b7d      	ldr	r3, [pc, #500]	; (8001410 <HAL_UART_RxCpltCallback+0x4b0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	4a7c      	ldr	r2, [pc, #496]	; (8001410 <HAL_UART_RxCpltCallback+0x4b0>)
 8001220:	6013      	str	r3, [r2, #0]
    	  			  if(AL_minute > 60 || AL_minute <= 0) AL_minute = 0;
 8001222:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <HAL_UART_RxCpltCallback+0x4b0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b3c      	cmp	r3, #60	; 0x3c
 8001228:	dc03      	bgt.n	8001232 <HAL_UART_RxCpltCallback+0x2d2>
 800122a:	4b79      	ldr	r3, [pc, #484]	; (8001410 <HAL_UART_RxCpltCallback+0x4b0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	dc1a      	bgt.n	8001268 <HAL_UART_RxCpltCallback+0x308>
 8001232:	4b77      	ldr	r3, [pc, #476]	; (8001410 <HAL_UART_RxCpltCallback+0x4b0>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
    	  			  break;
 8001238:	e016      	b.n	8001268 <HAL_UART_RxCpltCallback+0x308>
    	  			  AL_second++;
 800123a:	4b76      	ldr	r3, [pc, #472]	; (8001414 <HAL_UART_RxCpltCallback+0x4b4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a74      	ldr	r2, [pc, #464]	; (8001414 <HAL_UART_RxCpltCallback+0x4b4>)
 8001242:	6013      	str	r3, [r2, #0]
    	  			  if(AL_second > 60 || AL_second <= 0) AL_second = 0;
 8001244:	4b73      	ldr	r3, [pc, #460]	; (8001414 <HAL_UART_RxCpltCallback+0x4b4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b3c      	cmp	r3, #60	; 0x3c
 800124a:	dc03      	bgt.n	8001254 <HAL_UART_RxCpltCallback+0x2f4>
 800124c:	4b71      	ldr	r3, [pc, #452]	; (8001414 <HAL_UART_RxCpltCallback+0x4b4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	dc0b      	bgt.n	800126c <HAL_UART_RxCpltCallback+0x30c>
 8001254:	4b6f      	ldr	r3, [pc, #444]	; (8001414 <HAL_UART_RxCpltCallback+0x4b4>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
    	  			  break;
 800125a:	e007      	b.n	800126c <HAL_UART_RxCpltCallback+0x30c>
    	  			  break;
 800125c:	bf00      	nop
 800125e:	e086      	b.n	800136e <HAL_UART_RxCpltCallback+0x40e>
    	  			  break;
 8001260:	bf00      	nop
 8001262:	e084      	b.n	800136e <HAL_UART_RxCpltCallback+0x40e>
    	  			  break;
 8001264:	bf00      	nop
 8001266:	e082      	b.n	800136e <HAL_UART_RxCpltCallback+0x40e>
    	  			  break;
 8001268:	bf00      	nop
 800126a:	e080      	b.n	800136e <HAL_UART_RxCpltCallback+0x40e>
    	  			  break;
 800126c:	bf00      	nop
    	  		  break;
 800126e:	e07e      	b.n	800136e <HAL_UART_RxCpltCallback+0x40e>
    	  		  switch(setting)
 8001270:	4b69      	ldr	r3, [pc, #420]	; (8001418 <HAL_UART_RxCpltCallback+0x4b8>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	2b03      	cmp	r3, #3
 8001278:	d84e      	bhi.n	8001318 <HAL_UART_RxCpltCallback+0x3b8>
 800127a:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <HAL_UART_RxCpltCallback+0x320>)
 800127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001280:	08001291 	.word	0x08001291
 8001284:	080012b3 	.word	0x080012b3
 8001288:	080012d5 	.word	0x080012d5
 800128c:	080012f7 	.word	0x080012f7
    	  			  AL_hour -= 12;
 8001290:	4b62      	ldr	r3, [pc, #392]	; (800141c <HAL_UART_RxCpltCallback+0x4bc>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3b0c      	subs	r3, #12
 8001296:	4a61      	ldr	r2, [pc, #388]	; (800141c <HAL_UART_RxCpltCallback+0x4bc>)
 8001298:	6013      	str	r3, [r2, #0]
    	  			  if(AL_hour > 12 || AL_hour <= 0) AL_hour = 0;
 800129a:	4b60      	ldr	r3, [pc, #384]	; (800141c <HAL_UART_RxCpltCallback+0x4bc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b0c      	cmp	r3, #12
 80012a0:	dc03      	bgt.n	80012aa <HAL_UART_RxCpltCallback+0x34a>
 80012a2:	4b5e      	ldr	r3, [pc, #376]	; (800141c <HAL_UART_RxCpltCallback+0x4bc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dc38      	bgt.n	800131c <HAL_UART_RxCpltCallback+0x3bc>
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <HAL_UART_RxCpltCallback+0x4bc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
    	  			  break;
 80012b0:	e034      	b.n	800131c <HAL_UART_RxCpltCallback+0x3bc>
    	  			  AL_hour--;
 80012b2:	4b5a      	ldr	r3, [pc, #360]	; (800141c <HAL_UART_RxCpltCallback+0x4bc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	4a58      	ldr	r2, [pc, #352]	; (800141c <HAL_UART_RxCpltCallback+0x4bc>)
 80012ba:	6013      	str	r3, [r2, #0]
    	  			  if(AL_hour > 12 || AL_hour <= 0) AL_hour = 0;
 80012bc:	4b57      	ldr	r3, [pc, #348]	; (800141c <HAL_UART_RxCpltCallback+0x4bc>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	dc03      	bgt.n	80012cc <HAL_UART_RxCpltCallback+0x36c>
 80012c4:	4b55      	ldr	r3, [pc, #340]	; (800141c <HAL_UART_RxCpltCallback+0x4bc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	dc29      	bgt.n	8001320 <HAL_UART_RxCpltCallback+0x3c0>
 80012cc:	4b53      	ldr	r3, [pc, #332]	; (800141c <HAL_UART_RxCpltCallback+0x4bc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
    	  			  break;
 80012d2:	e025      	b.n	8001320 <HAL_UART_RxCpltCallback+0x3c0>
    	  			  AL_minute--;
 80012d4:	4b4e      	ldr	r3, [pc, #312]	; (8001410 <HAL_UART_RxCpltCallback+0x4b0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	4a4d      	ldr	r2, [pc, #308]	; (8001410 <HAL_UART_RxCpltCallback+0x4b0>)
 80012dc:	6013      	str	r3, [r2, #0]
    	  			  if(AL_minute > 60 || AL_minute <= 0) AL_minute = 0;
 80012de:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_UART_RxCpltCallback+0x4b0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b3c      	cmp	r3, #60	; 0x3c
 80012e4:	dc03      	bgt.n	80012ee <HAL_UART_RxCpltCallback+0x38e>
 80012e6:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <HAL_UART_RxCpltCallback+0x4b0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	dc1a      	bgt.n	8001324 <HAL_UART_RxCpltCallback+0x3c4>
 80012ee:	4b48      	ldr	r3, [pc, #288]	; (8001410 <HAL_UART_RxCpltCallback+0x4b0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
    	  			  break;
 80012f4:	e016      	b.n	8001324 <HAL_UART_RxCpltCallback+0x3c4>
    	  			  AL_second--;
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <HAL_UART_RxCpltCallback+0x4b4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	4a45      	ldr	r2, [pc, #276]	; (8001414 <HAL_UART_RxCpltCallback+0x4b4>)
 80012fe:	6013      	str	r3, [r2, #0]
    	  			  if(AL_second > 60 || AL_second <= 0) AL_second = 0;
 8001300:	4b44      	ldr	r3, [pc, #272]	; (8001414 <HAL_UART_RxCpltCallback+0x4b4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b3c      	cmp	r3, #60	; 0x3c
 8001306:	dc03      	bgt.n	8001310 <HAL_UART_RxCpltCallback+0x3b0>
 8001308:	4b42      	ldr	r3, [pc, #264]	; (8001414 <HAL_UART_RxCpltCallback+0x4b4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	dc0b      	bgt.n	8001328 <HAL_UART_RxCpltCallback+0x3c8>
 8001310:	4b40      	ldr	r3, [pc, #256]	; (8001414 <HAL_UART_RxCpltCallback+0x4b4>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
    	  			  break;
 8001316:	e007      	b.n	8001328 <HAL_UART_RxCpltCallback+0x3c8>
    	  			  break;
 8001318:	bf00      	nop
 800131a:	e028      	b.n	800136e <HAL_UART_RxCpltCallback+0x40e>
    	  			  break;
 800131c:	bf00      	nop
 800131e:	e026      	b.n	800136e <HAL_UART_RxCpltCallback+0x40e>
    	  			  break;
 8001320:	bf00      	nop
 8001322:	e024      	b.n	800136e <HAL_UART_RxCpltCallback+0x40e>
    	  			  break;
 8001324:	bf00      	nop
 8001326:	e022      	b.n	800136e <HAL_UART_RxCpltCallback+0x40e>
    	  			  break;
 8001328:	bf00      	nop
    	  		  break;
 800132a:	e020      	b.n	800136e <HAL_UART_RxCpltCallback+0x40e>
    	  		  setting++;
 800132c:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <HAL_UART_RxCpltCallback+0x4b8>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b38      	ldr	r3, [pc, #224]	; (8001418 <HAL_UART_RxCpltCallback+0x4b8>)
 8001336:	701a      	strb	r2, [r3, #0]
    	  		  if(setting == 5) setting = AP;
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_UART_RxCpltCallback+0x4b8>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b05      	cmp	r3, #5
 800133e:	d113      	bne.n	8001368 <HAL_UART_RxCpltCallback+0x408>
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <HAL_UART_RxCpltCallback+0x4b8>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
    	  		  break;
 8001346:	e00f      	b.n	8001368 <HAL_UART_RxCpltCallback+0x408>
    	  		  setting--;
 8001348:	4b33      	ldr	r3, [pc, #204]	; (8001418 <HAL_UART_RxCpltCallback+0x4b8>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b31      	ldr	r3, [pc, #196]	; (8001418 <HAL_UART_RxCpltCallback+0x4b8>)
 8001352:	701a      	strb	r2, [r3, #0]
    	  		  if(setting == NOT) setting = SET_S;
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HAL_UART_RxCpltCallback+0x4b8>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d107      	bne.n	800136c <HAL_UART_RxCpltCallback+0x40c>
 800135c:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <HAL_UART_RxCpltCallback+0x4b8>)
 800135e:	2204      	movs	r2, #4
 8001360:	701a      	strb	r2, [r3, #0]
    	  		  break;
 8001362:	e003      	b.n	800136c <HAL_UART_RxCpltCallback+0x40c>
    	  		  break;
 8001364:	bf00      	nop
 8001366:	e04a      	b.n	80013fe <HAL_UART_RxCpltCallback+0x49e>
    	  		  break;
 8001368:	bf00      	nop
 800136a:	e048      	b.n	80013fe <HAL_UART_RxCpltCallback+0x49e>
    	  		  break;
 800136c:	bf00      	nop
    	  }
    	  break;
 800136e:	e046      	b.n	80013fe <HAL_UART_RxCpltCallback+0x49e>
      case MUSIC_SELECT:
    	  switch(key_value)
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_UART_RxCpltCallback+0x4c0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b41      	cmp	r3, #65	; 0x41
 8001376:	d00d      	beq.n	8001394 <HAL_UART_RxCpltCallback+0x434>
 8001378:	2b42      	cmp	r3, #66	; 0x42
 800137a:	d026      	beq.n	80013ca <HAL_UART_RxCpltCallback+0x46a>
 800137c:	2b0d      	cmp	r3, #13
 800137e:	d000      	beq.n	8001382 <HAL_UART_RxCpltCallback+0x422>
	  	  		  memset(uart_buf,0,sizeof(uart_buf));
	  	  		  sprintf(uart_buf,"Spring Water selected\r\n");
	  	  		  HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
	  	  		  break;
    	  }
    	  break;
 8001380:	e03d      	b.n	80013fe <HAL_UART_RxCpltCallback+0x49e>
	  	  		  if(time_interval>= NORMAL_CLICK_MIN) current_state.mode = NORMAL_STATE;
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <HAL_UART_RxCpltCallback+0x4c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800138a:	d335      	bcc.n	80013f8 <HAL_UART_RxCpltCallback+0x498>
 800138c:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_UART_RxCpltCallback+0x4c8>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
	  	  		  break;
 8001392:	e031      	b.n	80013f8 <HAL_UART_RxCpltCallback+0x498>
	  	  		  memset(uart_buf,0,sizeof(uart_buf));
 8001394:	2228      	movs	r2, #40	; 0x28
 8001396:	2100      	movs	r1, #0
 8001398:	4824      	ldr	r0, [pc, #144]	; (800142c <HAL_UART_RxCpltCallback+0x4cc>)
 800139a:	f003 f9f3 	bl	8004784 <memset>
	  	  		  sprintf(uart_buf,"Three Bears selected\r\n");
 800139e:	4a23      	ldr	r2, [pc, #140]	; (800142c <HAL_UART_RxCpltCallback+0x4cc>)
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_UART_RxCpltCallback+0x4d0>)
 80013a2:	4614      	mov	r4, r2
 80013a4:	461d      	mov	r5, r3
 80013a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a8:	6020      	str	r0, [r4, #0]
 80013aa:	6061      	str	r1, [r4, #4]
 80013ac:	60a2      	str	r2, [r4, #8]
 80013ae:	60e3      	str	r3, [r4, #12]
 80013b0:	6828      	ldr	r0, [r5, #0]
 80013b2:	6120      	str	r0, [r4, #16]
 80013b4:	88ab      	ldrh	r3, [r5, #4]
 80013b6:	79aa      	ldrb	r2, [r5, #6]
 80013b8:	82a3      	strh	r3, [r4, #20]
 80013ba:	4613      	mov	r3, r2
 80013bc:	75a3      	strb	r3, [r4, #22]
	  	  		  HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 80013be:	2228      	movs	r2, #40	; 0x28
 80013c0:	491a      	ldr	r1, [pc, #104]	; (800142c <HAL_UART_RxCpltCallback+0x4cc>)
 80013c2:	481c      	ldr	r0, [pc, #112]	; (8001434 <HAL_UART_RxCpltCallback+0x4d4>)
 80013c4:	f002 fb67 	bl	8003a96 <HAL_UART_Transmit_IT>
	  	  		  break;
 80013c8:	e017      	b.n	80013fa <HAL_UART_RxCpltCallback+0x49a>
	  	  		  memset(uart_buf,0,sizeof(uart_buf));
 80013ca:	2228      	movs	r2, #40	; 0x28
 80013cc:	2100      	movs	r1, #0
 80013ce:	4817      	ldr	r0, [pc, #92]	; (800142c <HAL_UART_RxCpltCallback+0x4cc>)
 80013d0:	f003 f9d8 	bl	8004784 <memset>
	  	  		  sprintf(uart_buf,"Spring Water selected\r\n");
 80013d4:	4a15      	ldr	r2, [pc, #84]	; (800142c <HAL_UART_RxCpltCallback+0x4cc>)
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_UART_RxCpltCallback+0x4d8>)
 80013d8:	4615      	mov	r5, r2
 80013da:	461c      	mov	r4, r3
 80013dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013de:	6028      	str	r0, [r5, #0]
 80013e0:	6069      	str	r1, [r5, #4]
 80013e2:	60aa      	str	r2, [r5, #8]
 80013e4:	60eb      	str	r3, [r5, #12]
 80013e6:	cc03      	ldmia	r4!, {r0, r1}
 80013e8:	6128      	str	r0, [r5, #16]
 80013ea:	6169      	str	r1, [r5, #20]
	  	  		  HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 80013ec:	2228      	movs	r2, #40	; 0x28
 80013ee:	490f      	ldr	r1, [pc, #60]	; (800142c <HAL_UART_RxCpltCallback+0x4cc>)
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <HAL_UART_RxCpltCallback+0x4d4>)
 80013f2:	f002 fb50 	bl	8003a96 <HAL_UART_Transmit_IT>
	  	  		  break;
 80013f6:	e000      	b.n	80013fa <HAL_UART_RxCpltCallback+0x49a>
	  	  		  break;
 80013f8:	bf00      	nop
    	  break;
 80013fa:	e000      	b.n	80013fe <HAL_UART_RxCpltCallback+0x49e>
      default:
    	  break;
 80013fc:	bf00      	nop
    }


	/* Receive one byte in interrupt mode */
	HAL_UART_Receive_IT(&huart3, &key_value, 1);
 80013fe:	2201      	movs	r2, #1
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <HAL_UART_RxCpltCallback+0x4c0>)
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <HAL_UART_RxCpltCallback+0x4d4>)
 8001404:	f002 fb8c 	bl	8003b20 <HAL_UART_Receive_IT>
  }
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bdb0      	pop	{r4, r5, r7, pc}
 8001410:	2000009c 	.word	0x2000009c
 8001414:	20000114 	.word	0x20000114
 8001418:	20000000 	.word	0x20000000
 800141c:	200001c0 	.word	0x200001c0
 8001420:	200000e6 	.word	0x200000e6
 8001424:	20000110 	.word	0x20000110
 8001428:	200000e4 	.word	0x200000e4
 800142c:	20000118 	.word	0x20000118
 8001430:	080050c8 	.word	0x080050c8
 8001434:	200000a0 	.word	0x200000a0
 8001438:	080050e0 	.word	0x080050e0

0800143c <mode_analysis>:

//타임세팅, 알람세팅으로 넘어가는 여부 판별 함수 (음악선택은 제외)
void mode_analysis(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
    if(time_interval>=LONG_CLICK_MIN && time_interval <=LONG_CLICK_MAX)
 8001440:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <mode_analysis+0x94>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b13      	cmp	r3, #19
 8001446:	d909      	bls.n	800145c <mode_analysis+0x20>
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <mode_analysis+0x94>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b32      	cmp	r3, #50	; 0x32
 800144e:	d805      	bhi.n	800145c <mode_analysis+0x20>
    {
    	long_key_count++;
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <mode_analysis+0x98>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	3301      	adds	r3, #1
 8001456:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <mode_analysis+0x98>)
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e01b      	b.n	8001494 <mode_analysis+0x58>
    }
    else if(time_interval>= NORMAL_CLICK_MIN)
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <mode_analysis+0x94>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001464:	d316      	bcc.n	8001494 <mode_analysis+0x58>
    {
      current_state.mode = TIME_SETTING;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <mode_analysis+0x9c>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
      long_key_count = 0;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <mode_analysis+0x98>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

      memset(uart_buf,0,sizeof(uart_buf));
 8001472:	2228      	movs	r2, #40	; 0x28
 8001474:	2100      	movs	r1, #0
 8001476:	4819      	ldr	r0, [pc, #100]	; (80014dc <mode_analysis+0xa0>)
 8001478:	f003 f984 	bl	8004784 <memset>
      sprintf(uart_buf,"TIME_SETTING  %d\r\n",time_interval);
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <mode_analysis+0x94>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4917      	ldr	r1, [pc, #92]	; (80014e0 <mode_analysis+0xa4>)
 8001484:	4815      	ldr	r0, [pc, #84]	; (80014dc <mode_analysis+0xa0>)
 8001486:	f003 f985 	bl	8004794 <siprintf>
      HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 800148a:	2228      	movs	r2, #40	; 0x28
 800148c:	4913      	ldr	r1, [pc, #76]	; (80014dc <mode_analysis+0xa0>)
 800148e:	4815      	ldr	r0, [pc, #84]	; (80014e4 <mode_analysis+0xa8>)
 8001490:	f002 fb01 	bl	8003a96 <HAL_UART_Transmit_IT>

    }

    if(long_key_count>=LONG_CLICK_COUNT)
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <mode_analysis+0x98>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b1d      	cmp	r3, #29
 800149a:	d916      	bls.n	80014ca <mode_analysis+0x8e>
    {
      current_state.mode  = ALARM_TIME_SETTING;
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <mode_analysis+0x9c>)
 800149e:	2202      	movs	r2, #2
 80014a0:	701a      	strb	r2, [r3, #0]
      long_key_count = 0;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <mode_analysis+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

      memset(uart_buf,0,sizeof(uart_buf));
 80014a8:	2228      	movs	r2, #40	; 0x28
 80014aa:	2100      	movs	r1, #0
 80014ac:	480b      	ldr	r0, [pc, #44]	; (80014dc <mode_analysis+0xa0>)
 80014ae:	f003 f969 	bl	8004784 <memset>
      sprintf(uart_buf,"ALARM_TIME_SETTING  %d\r\n",time_interval);
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <mode_analysis+0x94>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	490b      	ldr	r1, [pc, #44]	; (80014e8 <mode_analysis+0xac>)
 80014ba:	4808      	ldr	r0, [pc, #32]	; (80014dc <mode_analysis+0xa0>)
 80014bc:	f003 f96a 	bl	8004794 <siprintf>
      HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 80014c0:	2228      	movs	r2, #40	; 0x28
 80014c2:	4906      	ldr	r1, [pc, #24]	; (80014dc <mode_analysis+0xa0>)
 80014c4:	4807      	ldr	r0, [pc, #28]	; (80014e4 <mode_analysis+0xa8>)
 80014c6:	f002 fae6 	bl	8003a96 <HAL_UART_Transmit_IT>
    }
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000110 	.word	0x20000110
 80014d4:	2000016c 	.word	0x2000016c
 80014d8:	200000e4 	.word	0x200000e4
 80014dc:	20000118 	.word	0x20000118
 80014e0:	080050f8 	.word	0x080050f8
 80014e4:	200000a0 	.word	0x200000a0
 80014e8:	0800510c 	.word	0x0800510c

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f0:	f000 fbc4 	bl	8001c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f4:	f000 f822 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f8:	f000 f946 	bl	8001788 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80014fc:	f000 f91a 	bl	8001734 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001500:	f000 f8a4 	bl	800164c <MX_RTC_Init>
  MX_TIM2_Init();
 8001504:	f000 f8c8 	bl	8001698 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim2);
 8001508:	4808      	ldr	r0, [pc, #32]	; (800152c <main+0x40>)
 800150a:	f001 fe76 	bl	80031fa <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <main+0x40>)
 8001510:	f001 fe9e 	bl	8003250 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart3,&rcv_byte,1);	//UART 수신 인터럽트 초기설정 이거 없으면 인터럽트 시작 안함
 8001514:	2201      	movs	r2, #1
 8001516:	4906      	ldr	r1, [pc, #24]	; (8001530 <main+0x44>)
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <main+0x48>)
 800151a:	f002 fb01 	bl	8003b20 <HAL_UART_Receive_IT>
  
  current_state.mode = NORMAL_STATE;
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <main+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
  current_state.button = NO_KEY;
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <main+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	705a      	strb	r2, [r3, #1]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800152a:	e7fe      	b.n	800152a <main+0x3e>
 800152c:	20000170 	.word	0x20000170
 8001530:	200000e7 	.word	0x200000e7
 8001534:	200000a0 	.word	0x200000a0
 8001538:	200000e4 	.word	0x200000e4

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0a0      	sub	sp, #128	; 0x80
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001546:	2230      	movs	r2, #48	; 0x30
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f003 f91a 	bl	8004784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2230      	movs	r2, #48	; 0x30
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f003 f90b 	bl	8004784 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <SystemClock_Config+0x108>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a33      	ldr	r2, [pc, #204]	; (8001644 <SystemClock_Config+0x108>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <SystemClock_Config+0x108>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <SystemClock_Config+0x10c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a2d      	ldr	r2, [pc, #180]	; (8001648 <SystemClock_Config+0x10c>)
 8001594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <SystemClock_Config+0x10c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80015a6:	2306      	movs	r3, #6
 80015a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015aa:	2301      	movs	r3, #1
 80015ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ae:	2301      	movs	r3, #1
 80015b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b2:	2310      	movs	r3, #16
 80015b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b6:	2302      	movs	r3, #2
 80015b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ba:	2300      	movs	r3, #0
 80015bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015be:	2308      	movs	r3, #8
 80015c0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015c2:	23b4      	movs	r3, #180	; 0xb4
 80015c4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015ca:	2307      	movs	r3, #7
 80015cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 ff0c 	bl	80023f0 <HAL_RCC_OscConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80015de:	f000 f9e3 	bl	80019a8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015e2:	f000 feb5 	bl	8002350 <HAL_PWREx_EnableOverDrive>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80015ec:	f000 f9dc 	bl	80019a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f0:	230f      	movs	r3, #15
 80015f2:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f4:	2302      	movs	r3, #2
 80015f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001606:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001608:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800160c:	2105      	movs	r1, #5
 800160e:	4618      	mov	r0, r3
 8001610:	f001 f95e 	bl	80028d0 <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800161a:	f000 f9c5 	bl	80019a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800161e:	2320      	movs	r3, #32
 8001620:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4618      	mov	r0, r3
 800162e:	f001 fb41 	bl	8002cb4 <HAL_RCCEx_PeriphCLKConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8001638:	f000 f9b6 	bl	80019a8 <Error_Handler>
  }
}
 800163c:	bf00      	nop
 800163e:	3780      	adds	r7, #128	; 0x80
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40023800 	.word	0x40023800
 8001648:	40007000 	.word	0x40007000

0800164c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_RTC_Init+0x44>)
 8001652:	4a10      	ldr	r2, [pc, #64]	; (8001694 <MX_RTC_Init+0x48>)
 8001654:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_RTC_Init+0x44>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_RTC_Init+0x44>)
 800165e:	227f      	movs	r2, #127	; 0x7f
 8001660:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_RTC_Init+0x44>)
 8001664:	22ff      	movs	r2, #255	; 0xff
 8001666:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_RTC_Init+0x44>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_RTC_Init+0x44>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_RTC_Init+0x44>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_RTC_Init+0x44>)
 800167c:	f001 fcd8 	bl	8003030 <HAL_RTC_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001686:	f000 f98f 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000148 	.word	0x20000148
 8001694:	40002800 	.word	0x40002800

08001698 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169e:	f107 0308 	add.w	r3, r7, #8
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	463b      	mov	r3, r7
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_TIM2_Init+0x98>)
 80016b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_TIM2_Init+0x98>)
 80016be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_TIM2_Init+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_TIM2_Init+0x98>)
 80016cc:	f44f 7261 	mov.w	r2, #900	; 0x384
 80016d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_TIM2_Init+0x98>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_TIM2_Init+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016de:	4814      	ldr	r0, [pc, #80]	; (8001730 <MX_TIM2_Init+0x98>)
 80016e0:	f001 fd8b 	bl	80031fa <HAL_TIM_Base_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016ea:	f000 f95d 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <MX_TIM2_Init+0x98>)
 80016fc:	f001 fed4 	bl	80034a8 <HAL_TIM_ConfigClockSource>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001706:	f000 f94f 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001712:	463b      	mov	r3, r7
 8001714:	4619      	mov	r1, r3
 8001716:	4806      	ldr	r0, [pc, #24]	; (8001730 <MX_TIM2_Init+0x98>)
 8001718:	f002 f8e0 	bl	80038dc <HAL_TIMEx_MasterConfigSynchronization>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001722:	f000 f941 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000170 	.word	0x20000170

08001734 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <MX_USART3_UART_Init+0x50>)
 800173c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800176c:	f002 f946 	bl	80039fc <HAL_UART_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001776:	f000 f917 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200000a0 	.word	0x200000a0
 8001784:	40004800 	.word	0x40004800

08001788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	4b7b      	ldr	r3, [pc, #492]	; (8001990 <MX_GPIO_Init+0x208>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <MX_GPIO_Init+0x208>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b78      	ldr	r3, [pc, #480]	; (8001990 <MX_GPIO_Init+0x208>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	4b74      	ldr	r3, [pc, #464]	; (8001990 <MX_GPIO_Init+0x208>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a73      	ldr	r2, [pc, #460]	; (8001990 <MX_GPIO_Init+0x208>)
 80017c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b71      	ldr	r3, [pc, #452]	; (8001990 <MX_GPIO_Init+0x208>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b6d      	ldr	r3, [pc, #436]	; (8001990 <MX_GPIO_Init+0x208>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a6c      	ldr	r2, [pc, #432]	; (8001990 <MX_GPIO_Init+0x208>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <MX_GPIO_Init+0x208>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b66      	ldr	r3, [pc, #408]	; (8001990 <MX_GPIO_Init+0x208>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a65      	ldr	r2, [pc, #404]	; (8001990 <MX_GPIO_Init+0x208>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <MX_GPIO_Init+0x208>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <MX_GPIO_Init+0x208>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a5e      	ldr	r2, [pc, #376]	; (8001990 <MX_GPIO_Init+0x208>)
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b5c      	ldr	r3, [pc, #368]	; (8001990 <MX_GPIO_Init+0x208>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b58      	ldr	r3, [pc, #352]	; (8001990 <MX_GPIO_Init+0x208>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a57      	ldr	r2, [pc, #348]	; (8001990 <MX_GPIO_Init+0x208>)
 8001834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b55      	ldr	r3, [pc, #340]	; (8001990 <MX_GPIO_Init+0x208>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	f244 0181 	movw	r1, #16513	; 0x4081
 800184c:	4851      	ldr	r0, [pc, #324]	; (8001994 <MX_GPIO_Init+0x20c>)
 800184e:	f000 fd65 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	2140      	movs	r1, #64	; 0x40
 8001856:	4850      	ldr	r0, [pc, #320]	; (8001998 <MX_GPIO_Init+0x210>)
 8001858:	f000 fd60 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800185c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001862:	4b4e      	ldr	r3, [pc, #312]	; (800199c <MX_GPIO_Init+0x214>)
 8001864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	484b      	ldr	r0, [pc, #300]	; (80019a0 <MX_GPIO_Init+0x218>)
 8001872:	f000 fba9 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001876:	2332      	movs	r3, #50	; 0x32
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001886:	230b      	movs	r3, #11
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	4843      	ldr	r0, [pc, #268]	; (80019a0 <MX_GPIO_Init+0x218>)
 8001892:	f000 fb99 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001896:	2386      	movs	r3, #134	; 0x86
 8001898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018a6:	230b      	movs	r3, #11
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	483c      	ldr	r0, [pc, #240]	; (80019a4 <MX_GPIO_Init+0x21c>)
 80018b2:	f000 fb89 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018b6:	f244 0381 	movw	r3, #16513	; 0x4081
 80018ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	4619      	mov	r1, r3
 80018ce:	4831      	ldr	r0, [pc, #196]	; (8001994 <MX_GPIO_Init+0x20c>)
 80018d0:	f000 fb7a 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80018d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018e6:	230b      	movs	r3, #11
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4828      	ldr	r0, [pc, #160]	; (8001994 <MX_GPIO_Init+0x20c>)
 80018f2:	f000 fb69 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018f6:	2340      	movs	r3, #64	; 0x40
 80018f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	4619      	mov	r1, r3
 800190c:	4822      	ldr	r0, [pc, #136]	; (8001998 <MX_GPIO_Init+0x210>)
 800190e:	f000 fb5b 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001916:	2300      	movs	r3, #0
 8001918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	481c      	ldr	r0, [pc, #112]	; (8001998 <MX_GPIO_Init+0x210>)
 8001926:	f000 fb4f 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800192a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800192e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800193c:	230a      	movs	r3, #10
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	4619      	mov	r1, r3
 8001946:	4817      	ldr	r0, [pc, #92]	; (80019a4 <MX_GPIO_Init+0x21c>)
 8001948:	f000 fb3e 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800194c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	4810      	ldr	r0, [pc, #64]	; (80019a4 <MX_GPIO_Init+0x21c>)
 8001962:	f000 fb31 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001966:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800196a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001978:	230b      	movs	r3, #11
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_GPIO_Init+0x210>)
 8001984:	f000 fb20 	bl	8001fc8 <HAL_GPIO_Init>

}
 8001988:	bf00      	nop
 800198a:	3730      	adds	r7, #48	; 0x30
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	40020400 	.word	0x40020400
 8001998:	40021800 	.word	0x40021800
 800199c:	10110000 	.word	0x10110000
 80019a0:	40020800 	.word	0x40020800
 80019a4:	40020000 	.word	0x40020000

080019a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <HAL_MspInit+0x4c>)
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <HAL_MspInit+0x4c>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_MspInit+0x4c>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_MspInit+0x4c>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800

08001a08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <HAL_RTC_MspInit+0x24>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d102      	bne.n	8001a20 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_RTC_MspInit+0x28>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40002800 	.word	0x40002800
 8001a30:	42470e3c 	.word	0x42470e3c

08001a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a44:	d115      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_TIM_Base_MspInit+0x48>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_TIM_Base_MspInit+0x48>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_TIM_Base_MspInit+0x48>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	201c      	movs	r0, #28
 8001a68:	f000 fa55 	bl	8001f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a6c:	201c      	movs	r0, #28
 8001a6e:	f000 fa6e 	bl	8001f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_UART_MspInit+0x94>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d134      	bne.n	8001b0c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_UART_MspInit+0x98>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <HAL_UART_MspInit+0x98>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_UART_MspInit+0x98>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_UART_MspInit+0x98>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <HAL_UART_MspInit+0x98>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_UART_MspInit+0x98>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aec:	2307      	movs	r3, #7
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	4809      	ldr	r0, [pc, #36]	; (8001b1c <HAL_UART_MspInit+0x9c>)
 8001af8:	f000 fa66 	bl	8001fc8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	2027      	movs	r0, #39	; 0x27
 8001b02:	f000 fa08 	bl	8001f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b06:	2027      	movs	r0, #39	; 0x27
 8001b08:	f000 fa21 	bl	8001f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	; 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40004800 	.word	0x40004800
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020c00 	.word	0x40020c00

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b74:	f000 f8d4 	bl	8001d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <TIM2_IRQHandler+0x10>)
 8001b82:	f001 fb89 	bl	8003298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000170 	.word	0x20000170

08001b90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <USART3_IRQHandler+0x10>)
 8001b96:	f002 f819 	bl	8003bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200000a0 	.word	0x200000a0

08001ba4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <_sbrk+0x50>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <_sbrk+0x16>
		heap_end = &end;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <_sbrk+0x50>)
 8001bb6:	4a10      	ldr	r2, [pc, #64]	; (8001bf8 <_sbrk+0x54>)
 8001bb8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <_sbrk+0x50>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <_sbrk+0x50>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	466a      	mov	r2, sp
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d907      	bls.n	8001bde <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001bce:	f002 fdaf 	bl	8004730 <__errno>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	230c      	movs	r3, #12
 8001bd6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bdc:	e006      	b.n	8001bec <_sbrk+0x48>
	}

	heap_end += incr;
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <_sbrk+0x50>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <_sbrk+0x50>)
 8001be8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000090 	.word	0x20000090
 8001bf8:	200001d0 	.word	0x200001d0

08001bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <SystemInit+0x28>)
 8001c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c06:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <SystemInit+0x28>)
 8001c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SystemInit+0x28>)
 8001c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c16:	609a      	str	r2, [r3, #8]
#endif
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c60 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c2e:	e003      	b.n	8001c38 <LoopCopyDataInit>

08001c30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c36:	3104      	adds	r1, #4

08001c38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c38:	480b      	ldr	r0, [pc, #44]	; (8001c68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c40:	d3f6      	bcc.n	8001c30 <CopyDataInit>
  ldr  r2, =_sbss
 8001c42:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c44:	e002      	b.n	8001c4c <LoopFillZerobss>

08001c46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c48:	f842 3b04 	str.w	r3, [r2], #4

08001c4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c50:	d3f9      	bcc.n	8001c46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c52:	f7ff ffd3 	bl	8001bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c56:	f002 fd71 	bl	800473c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5a:	f7ff fc47 	bl	80014ec <main>
  bx  lr    
 8001c5e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c60:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001c64:	08005184 	.word	0x08005184
  ldr  r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c6c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001c70:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001c74:	200001d0 	.word	0x200001d0

08001c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC_IRQHandler>
	...

08001c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <HAL_Init+0x40>)
 8001c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <HAL_Init+0x40>)
 8001c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_Init+0x40>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a07      	ldr	r2, [pc, #28]	; (8001cbc <HAL_Init+0x40>)
 8001c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca4:	2003      	movs	r0, #3
 8001ca6:	f000 f92b 	bl	8001f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f000 f808 	bl	8001cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb0:	f7ff fe82 	bl	80019b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x54>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x58>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f943 	bl	8001f6a <HAL_SYSTICK_Config>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00e      	b.n	8001d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d80a      	bhi.n	8001d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f000 f90b 	bl	8001f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d00:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <HAL_InitTick+0x5c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000004 	.word	0x20000004
 8001d18:	2000000c 	.word	0x2000000c
 8001d1c:	20000008 	.word	0x20000008

08001d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_IncTick+0x20>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x24>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_IncTick+0x24>)
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	2000000c 	.word	0x2000000c
 8001d44:	200001c8 	.word	0x200001c8

08001d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_GetTick+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	200001c8 	.word	0x200001c8

08001d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db0b      	blt.n	8001dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4907      	ldr	r1, [pc, #28]	; (8001dfc <__NVIC_EnableIRQ+0x38>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	; (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	; (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ecc:	d301      	bcc.n	8001ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00f      	b.n	8001ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <SysTick_Config+0x40>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eda:	210f      	movs	r1, #15
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f7ff ff8e 	bl	8001e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <SysTick_Config+0x40>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <SysTick_Config+0x40>)
 8001eec:	2207      	movs	r2, #7
 8001eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	e000e010 	.word	0xe000e010

08001f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff29 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f28:	f7ff ff3e 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff ff8e 	bl	8001e54 <NVIC_EncodePriority>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff5d 	bl	8001e00 <__NVIC_SetPriority>
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff31 	bl	8001dc4 <__NVIC_EnableIRQ>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffa2 	bl	8001ebc <SysTick_Config>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d004      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e00c      	b.n	8001fba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2205      	movs	r2, #5
 8001fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	e177      	b.n	80022d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	f040 8166 	bne.w	80022ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d00b      	beq.n	8002022 <HAL_GPIO_Init+0x5a>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002016:	2b11      	cmp	r3, #17
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b12      	cmp	r3, #18
 8002020:	d130      	bne.n	8002084 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 0201 	and.w	r2, r3, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0xfc>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b12      	cmp	r3, #18
 80020c2:	d123      	bne.n	800210c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	69b9      	ldr	r1, [r7, #24]
 8002108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80c0 	beq.w	80022ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b65      	ldr	r3, [pc, #404]	; (80022e8 <HAL_GPIO_Init+0x320>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a64      	ldr	r2, [pc, #400]	; (80022e8 <HAL_GPIO_Init+0x320>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b62      	ldr	r3, [pc, #392]	; (80022e8 <HAL_GPIO_Init+0x320>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800216a:	4a60      	ldr	r2, [pc, #384]	; (80022ec <HAL_GPIO_Init+0x324>)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_GPIO_Init+0x328>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d037      	beq.n	8002206 <HAL_GPIO_Init+0x23e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <HAL_GPIO_Init+0x32c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d031      	beq.n	8002202 <HAL_GPIO_Init+0x23a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a55      	ldr	r2, [pc, #340]	; (80022f8 <HAL_GPIO_Init+0x330>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d02b      	beq.n	80021fe <HAL_GPIO_Init+0x236>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a54      	ldr	r2, [pc, #336]	; (80022fc <HAL_GPIO_Init+0x334>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d025      	beq.n	80021fa <HAL_GPIO_Init+0x232>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a53      	ldr	r2, [pc, #332]	; (8002300 <HAL_GPIO_Init+0x338>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d01f      	beq.n	80021f6 <HAL_GPIO_Init+0x22e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a52      	ldr	r2, [pc, #328]	; (8002304 <HAL_GPIO_Init+0x33c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d019      	beq.n	80021f2 <HAL_GPIO_Init+0x22a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a51      	ldr	r2, [pc, #324]	; (8002308 <HAL_GPIO_Init+0x340>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_GPIO_Init+0x226>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a50      	ldr	r2, [pc, #320]	; (800230c <HAL_GPIO_Init+0x344>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00d      	beq.n	80021ea <HAL_GPIO_Init+0x222>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4f      	ldr	r2, [pc, #316]	; (8002310 <HAL_GPIO_Init+0x348>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <HAL_GPIO_Init+0x21e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4e      	ldr	r2, [pc, #312]	; (8002314 <HAL_GPIO_Init+0x34c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d101      	bne.n	80021e2 <HAL_GPIO_Init+0x21a>
 80021de:	2309      	movs	r3, #9
 80021e0:	e012      	b.n	8002208 <HAL_GPIO_Init+0x240>
 80021e2:	230a      	movs	r3, #10
 80021e4:	e010      	b.n	8002208 <HAL_GPIO_Init+0x240>
 80021e6:	2308      	movs	r3, #8
 80021e8:	e00e      	b.n	8002208 <HAL_GPIO_Init+0x240>
 80021ea:	2307      	movs	r3, #7
 80021ec:	e00c      	b.n	8002208 <HAL_GPIO_Init+0x240>
 80021ee:	2306      	movs	r3, #6
 80021f0:	e00a      	b.n	8002208 <HAL_GPIO_Init+0x240>
 80021f2:	2305      	movs	r3, #5
 80021f4:	e008      	b.n	8002208 <HAL_GPIO_Init+0x240>
 80021f6:	2304      	movs	r3, #4
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x240>
 80021fa:	2303      	movs	r3, #3
 80021fc:	e004      	b.n	8002208 <HAL_GPIO_Init+0x240>
 80021fe:	2302      	movs	r3, #2
 8002200:	e002      	b.n	8002208 <HAL_GPIO_Init+0x240>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_GPIO_Init+0x240>
 8002206:	2300      	movs	r3, #0
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	f002 0203 	and.w	r2, r2, #3
 800220e:	0092      	lsls	r2, r2, #2
 8002210:	4093      	lsls	r3, r2
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002218:	4934      	ldr	r1, [pc, #208]	; (80022ec <HAL_GPIO_Init+0x324>)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	089b      	lsrs	r3, r3, #2
 800221e:	3302      	adds	r3, #2
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002226:	4b3c      	ldr	r3, [pc, #240]	; (8002318 <HAL_GPIO_Init+0x350>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800224a:	4a33      	ldr	r2, [pc, #204]	; (8002318 <HAL_GPIO_Init+0x350>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002250:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_GPIO_Init+0x350>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002274:	4a28      	ldr	r2, [pc, #160]	; (8002318 <HAL_GPIO_Init+0x350>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227a:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_GPIO_Init+0x350>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229e:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <HAL_GPIO_Init+0x350>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_GPIO_Init+0x350>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c8:	4a13      	ldr	r2, [pc, #76]	; (8002318 <HAL_GPIO_Init+0x350>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b0f      	cmp	r3, #15
 80022d8:	f67f ae84 	bls.w	8001fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022dc:	bf00      	nop
 80022de:	3724      	adds	r7, #36	; 0x24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020800 	.word	0x40020800
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	40021000 	.word	0x40021000
 8002304:	40021400 	.word	0x40021400
 8002308:	40021800 	.word	0x40021800
 800230c:	40021c00 	.word	0x40021c00
 8002310:	40022000 	.word	0x40022000
 8002314:	40022400 	.word	0x40022400
 8002318:	40013c00 	.word	0x40013c00

0800231c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
 8002328:	4613      	mov	r3, r2
 800232a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002338:	e003      	b.n	8002342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	041a      	lsls	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	619a      	str	r2, [r3, #24]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002376:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800237c:	f7ff fce4 	bl	8001d48 <HAL_GetTick>
 8002380:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002382:	e009      	b.n	8002398 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002384:	f7ff fce0 	bl	8001d48 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002392:	d901      	bls.n	8002398 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e01f      	b.n	80023d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d1ee      	bne.n	8002384 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023ac:	f7ff fccc 	bl	8001d48 <HAL_GetTick>
 80023b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023b2:	e009      	b.n	80023c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023b4:	f7ff fcc8 	bl	8001d48 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023c2:	d901      	bls.n	80023c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e007      	b.n	80023d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023d4:	d1ee      	bne.n	80023b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800
 80023e4:	420e0040 	.word	0x420e0040
 80023e8:	40007000 	.word	0x40007000
 80023ec:	420e0044 	.word	0x420e0044

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e25b      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d075      	beq.n	80024fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800240e:	4ba3      	ldr	r3, [pc, #652]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b04      	cmp	r3, #4
 8002418:	d00c      	beq.n	8002434 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241a:	4ba0      	ldr	r3, [pc, #640]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002422:	2b08      	cmp	r3, #8
 8002424:	d112      	bne.n	800244c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002426:	4b9d      	ldr	r3, [pc, #628]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002432:	d10b      	bne.n	800244c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	4b99      	ldr	r3, [pc, #612]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d05b      	beq.n	80024f8 <HAL_RCC_OscConfig+0x108>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d157      	bne.n	80024f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e236      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002454:	d106      	bne.n	8002464 <HAL_RCC_OscConfig+0x74>
 8002456:	4b91      	ldr	r3, [pc, #580]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a90      	ldr	r2, [pc, #576]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 800245c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	e01d      	b.n	80024a0 <HAL_RCC_OscConfig+0xb0>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x98>
 800246e:	4b8b      	ldr	r3, [pc, #556]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a8a      	ldr	r2, [pc, #552]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b88      	ldr	r3, [pc, #544]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a87      	ldr	r2, [pc, #540]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e00b      	b.n	80024a0 <HAL_RCC_OscConfig+0xb0>
 8002488:	4b84      	ldr	r3, [pc, #528]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a83      	ldr	r2, [pc, #524]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 800248e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b81      	ldr	r3, [pc, #516]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a80      	ldr	r2, [pc, #512]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 800249a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800249e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d013      	beq.n	80024d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7ff fc4e 	bl	8001d48 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b0:	f7ff fc4a 	bl	8001d48 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	; 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e1fb      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b76      	ldr	r3, [pc, #472]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0xc0>
 80024ce:	e014      	b.n	80024fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7ff fc3a 	bl	8001d48 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d8:	f7ff fc36 	bl	8001d48 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e1e7      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ea:	4b6c      	ldr	r3, [pc, #432]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0xe8>
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d063      	beq.n	80025ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002506:	4b65      	ldr	r3, [pc, #404]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b62      	ldr	r3, [pc, #392]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800251a:	2b08      	cmp	r3, #8
 800251c:	d11c      	bne.n	8002558 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251e:	4b5f      	ldr	r3, [pc, #380]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252a:	4b5c      	ldr	r3, [pc, #368]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d005      	beq.n	8002542 <HAL_RCC_OscConfig+0x152>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d001      	beq.n	8002542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1bb      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b56      	ldr	r3, [pc, #344]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4952      	ldr	r1, [pc, #328]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	e03a      	b.n	80025ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002560:	4b4f      	ldr	r3, [pc, #316]	; (80026a0 <HAL_RCC_OscConfig+0x2b0>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff fbef 	bl	8001d48 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256e:	f7ff fbeb 	bl	8001d48 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e19c      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b43      	ldr	r3, [pc, #268]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4940      	ldr	r1, [pc, #256]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a2:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <HAL_RCC_OscConfig+0x2b0>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7ff fbce 	bl	8001d48 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b0:	f7ff fbca 	bl	8001d48 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e17b      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c2:	4b36      	ldr	r3, [pc, #216]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d030      	beq.n	800263c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e2:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <HAL_RCC_OscConfig+0x2b4>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7ff fbae 	bl	8001d48 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f0:	f7ff fbaa 	bl	8001d48 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e15b      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	4b26      	ldr	r3, [pc, #152]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x200>
 800260e:	e015      	b.n	800263c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_OscConfig+0x2b4>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002616:	f7ff fb97 	bl	8001d48 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261e:	f7ff fb93 	bl	8001d48 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e144      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80a0 	beq.w	800278a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10f      	bne.n	800267a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a0e      	ldr	r2, [pc, #56]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <HAL_RCC_OscConfig+0x2ac>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_OscConfig+0x2b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d121      	bne.n	80026ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <HAL_RCC_OscConfig+0x2b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <HAL_RCC_OscConfig+0x2b8>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7ff fb59 	bl	8001d48 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e011      	b.n	80026be <HAL_RCC_OscConfig+0x2ce>
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	42470000 	.word	0x42470000
 80026a4:	42470e80 	.word	0x42470e80
 80026a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7ff fb4c 	bl	8001d48 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e0fd      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b81      	ldr	r3, [pc, #516]	; (80028c4 <HAL_RCC_OscConfig+0x4d4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d106      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2f0>
 80026d2:	4b7d      	ldr	r3, [pc, #500]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a7c      	ldr	r2, [pc, #496]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	e01c      	b.n	800271a <HAL_RCC_OscConfig+0x32a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x312>
 80026e8:	4b77      	ldr	r3, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a76      	ldr	r2, [pc, #472]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
 80026f4:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a73      	ldr	r2, [pc, #460]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002700:	e00b      	b.n	800271a <HAL_RCC_OscConfig+0x32a>
 8002702:	4b71      	ldr	r3, [pc, #452]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	4a70      	ldr	r2, [pc, #448]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6713      	str	r3, [r2, #112]	; 0x70
 800270e:	4b6e      	ldr	r3, [pc, #440]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	4a6d      	ldr	r2, [pc, #436]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d015      	beq.n	800274e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7ff fb11 	bl	8001d48 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7ff fb0d 	bl	8001d48 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	; 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0bc      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	4b61      	ldr	r3, [pc, #388]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ee      	beq.n	800272a <HAL_RCC_OscConfig+0x33a>
 800274c:	e014      	b.n	8002778 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7ff fafb 	bl	8001d48 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7ff faf7 	bl	8001d48 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	; 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e0a6      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	4b56      	ldr	r3, [pc, #344]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ee      	bne.n	8002756 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d105      	bne.n	800278a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277e:	4b52      	ldr	r3, [pc, #328]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a51      	ldr	r2, [pc, #324]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 8002784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8092 	beq.w	80028b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002794:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d05c      	beq.n	800285a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d141      	bne.n	800282c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a8:	4b48      	ldr	r3, [pc, #288]	; (80028cc <HAL_RCC_OscConfig+0x4dc>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7ff facb 	bl	8001d48 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b6:	f7ff fac7 	bl	8001d48 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e078      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c8:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	019b      	lsls	r3, r3, #6
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	3b01      	subs	r3, #1
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	061b      	lsls	r3, r3, #24
 80027f8:	4933      	ldr	r1, [pc, #204]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fe:	4b33      	ldr	r3, [pc, #204]	; (80028cc <HAL_RCC_OscConfig+0x4dc>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002804:	f7ff faa0 	bl	8001d48 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280c:	f7ff fa9c 	bl	8001d48 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e04d      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x41c>
 800282a:	e045      	b.n	80028b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282c:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_RCC_OscConfig+0x4dc>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7ff fa89 	bl	8001d48 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283a:	f7ff fa85 	bl	8001d48 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e036      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284c:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x44a>
 8002858:	e02e      	b.n	80028b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e029      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002866:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <HAL_RCC_OscConfig+0x4d8>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	429a      	cmp	r2, r3
 8002878:	d11c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d115      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800288e:	4013      	ands	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002894:	4293      	cmp	r3, r2
 8002896:	d10d      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d106      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40007000 	.word	0x40007000
 80028c8:	40023800 	.word	0x40023800
 80028cc:	42470060 	.word	0x42470060

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0cc      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b68      	ldr	r3, [pc, #416]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d90c      	bls.n	800290c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f2:	4b65      	ldr	r3, [pc, #404]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b8      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002924:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800292e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	494d      	ldr	r1, [pc, #308]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d044      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d119      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e07f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d003      	beq.n	800298e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	2b03      	cmp	r3, #3
 800298c:	d107      	bne.n	800299e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e06f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299e:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e067      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b37      	ldr	r3, [pc, #220]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4934      	ldr	r1, [pc, #208]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c0:	f7ff f9c2 	bl	8001d48 <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7ff f9be 	bl	8001d48 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e04f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d20c      	bcs.n	8002a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e032      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4916      	ldr	r1, [pc, #88]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	490e      	ldr	r1, [pc, #56]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a56:	f000 f821 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a5a:	4601      	mov	r1, r0
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	5cd3      	ldrb	r3, [r2, r3]
 8002a6a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff f922 	bl	8001cc0 <HAL_InitTick>

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023c00 	.word	0x40023c00
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	08005128 	.word	0x08005128
 8002a94:	20000004 	.word	0x20000004
 8002a98:	20000008 	.word	0x20000008

08002a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab2:	4b63      	ldr	r3, [pc, #396]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d007      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x32>
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d008      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x38>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 80b4 	bne.w	8002c30 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac8:	4b5e      	ldr	r3, [pc, #376]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002aca:	60bb      	str	r3, [r7, #8]
       break;
 8002acc:	e0b3      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ace:	4b5e      	ldr	r3, [pc, #376]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ad0:	60bb      	str	r3, [r7, #8]
      break;
 8002ad2:	e0b0      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad4:	4b5a      	ldr	r3, [pc, #360]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002adc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ade:	4b58      	ldr	r3, [pc, #352]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d04a      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aea:	4b55      	ldr	r3, [pc, #340]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	099b      	lsrs	r3, r3, #6
 8002af0:	f04f 0400 	mov.w	r4, #0
 8002af4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	ea03 0501 	and.w	r5, r3, r1
 8002b00:	ea04 0602 	and.w	r6, r4, r2
 8002b04:	4629      	mov	r1, r5
 8002b06:	4632      	mov	r2, r6
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	f04f 0400 	mov.w	r4, #0
 8002b10:	0154      	lsls	r4, r2, #5
 8002b12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b16:	014b      	lsls	r3, r1, #5
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	1b49      	subs	r1, r1, r5
 8002b1e:	eb62 0206 	sbc.w	r2, r2, r6
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	f04f 0400 	mov.w	r4, #0
 8002b2a:	0194      	lsls	r4, r2, #6
 8002b2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b30:	018b      	lsls	r3, r1, #6
 8002b32:	1a5b      	subs	r3, r3, r1
 8002b34:	eb64 0402 	sbc.w	r4, r4, r2
 8002b38:	f04f 0100 	mov.w	r1, #0
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	00e2      	lsls	r2, r4, #3
 8002b42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b46:	00d9      	lsls	r1, r3, #3
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4614      	mov	r4, r2
 8002b4c:	195b      	adds	r3, r3, r5
 8002b4e:	eb44 0406 	adc.w	r4, r4, r6
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	0262      	lsls	r2, r4, #9
 8002b5c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b60:	0259      	lsls	r1, r3, #9
 8002b62:	460b      	mov	r3, r1
 8002b64:	4614      	mov	r4, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	4621      	mov	r1, r4
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f04f 0400 	mov.w	r4, #0
 8002b70:	461a      	mov	r2, r3
 8002b72:	4623      	mov	r3, r4
 8002b74:	f7fd fb8c 	bl	8000290 <__aeabi_uldivmod>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	e049      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b80:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	099b      	lsrs	r3, r3, #6
 8002b86:	f04f 0400 	mov.w	r4, #0
 8002b8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	ea03 0501 	and.w	r5, r3, r1
 8002b96:	ea04 0602 	and.w	r6, r4, r2
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	4632      	mov	r2, r6
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	f04f 0400 	mov.w	r4, #0
 8002ba6:	0154      	lsls	r4, r2, #5
 8002ba8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bac:	014b      	lsls	r3, r1, #5
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4622      	mov	r2, r4
 8002bb2:	1b49      	subs	r1, r1, r5
 8002bb4:	eb62 0206 	sbc.w	r2, r2, r6
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	f04f 0400 	mov.w	r4, #0
 8002bc0:	0194      	lsls	r4, r2, #6
 8002bc2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bc6:	018b      	lsls	r3, r1, #6
 8002bc8:	1a5b      	subs	r3, r3, r1
 8002bca:	eb64 0402 	sbc.w	r4, r4, r2
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	00e2      	lsls	r2, r4, #3
 8002bd8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bdc:	00d9      	lsls	r1, r3, #3
 8002bde:	460b      	mov	r3, r1
 8002be0:	4614      	mov	r4, r2
 8002be2:	195b      	adds	r3, r3, r5
 8002be4:	eb44 0406 	adc.w	r4, r4, r6
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	02a2      	lsls	r2, r4, #10
 8002bf2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002bf6:	0299      	lsls	r1, r3, #10
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4614      	mov	r4, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	4621      	mov	r1, r4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f04f 0400 	mov.w	r4, #0
 8002c06:	461a      	mov	r2, r3
 8002c08:	4623      	mov	r3, r4
 8002c0a:	f7fd fb41 	bl	8000290 <__aeabi_uldivmod>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	460c      	mov	r4, r1
 8002c12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	60bb      	str	r3, [r7, #8]
      break;
 8002c2e:	e002      	b.n	8002c36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c32:	60bb      	str	r3, [r7, #8]
      break;
 8002c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c36:	68bb      	ldr	r3, [r7, #8]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c40:	40023800 	.word	0x40023800
 8002c44:	00f42400 	.word	0x00f42400
 8002c48:	007a1200 	.word	0x007a1200

08002c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000004 	.word	0x20000004

08002c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c68:	f7ff fff0 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002c6c:	4601      	mov	r1, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	0a9b      	lsrs	r3, r3, #10
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4a03      	ldr	r2, [pc, #12]	; (8002c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	08005138 	.word	0x08005138

08002c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c90:	f7ff ffdc 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002c94:	4601      	mov	r1, r0
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	0b5b      	lsrs	r3, r3, #13
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4a03      	ldr	r2, [pc, #12]	; (8002cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca2:	5cd3      	ldrb	r3, [r2, r3]
 8002ca4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	08005138 	.word	0x08005138

08002cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d075      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ce8:	4bad      	ldr	r3, [pc, #692]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cee:	f7ff f82b 	bl	8001d48 <HAL_GetTick>
 8002cf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cf6:	f7ff f827 	bl	8001d48 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e18b      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d08:	4ba6      	ldr	r3, [pc, #664]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	019a      	lsls	r2, r3, #6
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	071b      	lsls	r3, r3, #28
 8002d2c:	499d      	ldr	r1, [pc, #628]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01f      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d40:	4b98      	ldr	r3, [pc, #608]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d46:	0f1b      	lsrs	r3, r3, #28
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	019a      	lsls	r2, r3, #6
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	071b      	lsls	r3, r3, #28
 8002d60:	4990      	ldr	r1, [pc, #576]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d68:	4b8e      	ldr	r3, [pc, #568]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6e:	f023 021f 	bic.w	r2, r3, #31
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	498a      	ldr	r1, [pc, #552]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00d      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	019a      	lsls	r2, r3, #6
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	061b      	lsls	r3, r3, #24
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	071b      	lsls	r3, r3, #28
 8002da0:	4980      	ldr	r1, [pc, #512]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002da8:	4b7d      	ldr	r3, [pc, #500]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dae:	f7fe ffcb 	bl	8001d48 <HAL_GetTick>
 8002db2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002db6:	f7fe ffc7 	bl	8001d48 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e12b      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dc8:	4b76      	ldr	r3, [pc, #472]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0f0      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d079      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002dec:	4b6e      	ldr	r3, [pc, #440]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002df2:	f7fe ffa9 	bl	8001d48 <HAL_GetTick>
 8002df6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002dfa:	f7fe ffa5 	bl	8001d48 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e109      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e0c:	4b65      	ldr	r3, [pc, #404]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e18:	d0ef      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d020      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e26:	4b5f      	ldr	r3, [pc, #380]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2c:	0f1b      	lsrs	r3, r3, #28
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	019a      	lsls	r2, r3, #6
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	061b      	lsls	r3, r3, #24
 8002e40:	431a      	orrs	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	071b      	lsls	r3, r3, #28
 8002e46:	4957      	ldr	r1, [pc, #348]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e4e:	4b55      	ldr	r3, [pc, #340]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	4950      	ldr	r1, [pc, #320]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01e      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e74:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	0e1b      	lsrs	r3, r3, #24
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	019a      	lsls	r2, r3, #6
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	061b      	lsls	r3, r3, #24
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	071b      	lsls	r3, r3, #28
 8002e94:	4943      	ldr	r1, [pc, #268]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e9c:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ea2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	493e      	ldr	r1, [pc, #248]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002eb2:	4b3d      	ldr	r3, [pc, #244]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002eb8:	f7fe ff46 	bl	8001d48 <HAL_GetTick>
 8002ebc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002ec0:	f7fe ff42 	bl	8001d48 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0a6      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ed2:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ede:	d1ef      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 808d 	beq.w	8003008 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	4a2b      	ldr	r2, [pc, #172]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6413      	str	r3, [r2, #64]	; 0x40
 8002efe:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002f0a:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a27      	ldr	r2, [pc, #156]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f16:	f7fe ff17 	bl	8001d48 <HAL_GetTick>
 8002f1a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f1e:	f7fe ff13 	bl	8001d48 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e077      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f30:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f44:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d039      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d032      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f64:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002f70:	4a0c      	ldr	r2, [pc, #48]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d11e      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe fee1 	bl	8001d48 <HAL_GetTick>
 8002f86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f88:	e014      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8a:	f7fe fedd 	bl	8001d48 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d90b      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e03f      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8002fa0:	42470068 	.word	0x42470068
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	42470070 	.word	0x42470070
 8002fac:	40007000 	.word	0x40007000
 8002fb0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0e4      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fcc:	d10d      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002fce:	4b16      	ldr	r3, [pc, #88]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe2:	4911      	ldr	r1, [pc, #68]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]
 8002fe8:	e005      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ff0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ff4:	6093      	str	r3, [r2, #8]
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002ff8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003002:	4909      	ldr	r1, [pc, #36]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003004:	4313      	orrs	r3, r2
 8003006:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800301a:	4b04      	ldr	r3, [pc, #16]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800301c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40023800 	.word	0x40023800
 800302c:	424711e0 	.word	0x424711e0

08003030 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e083      	b.n	800314a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	7f5b      	ldrb	r3, [r3, #29]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d105      	bne.n	8003058 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fe fcd8 	bl	8001a08 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	22ca      	movs	r2, #202	; 0xca
 8003064:	625a      	str	r2, [r3, #36]	; 0x24
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2253      	movs	r2, #83	; 0x53
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f897 	bl	80031a2 <RTC_EnterInitMode>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	22ff      	movs	r2, #255	; 0xff
 8003080:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2204      	movs	r2, #4
 8003086:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e05e      	b.n	800314a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800309a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800309e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6899      	ldr	r1, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68d2      	ldr	r2, [r2, #12]
 80030c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6919      	ldr	r1, [r3, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	041a      	lsls	r2, r3, #16
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10e      	bne.n	8003118 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f829 	bl	8003152 <HAL_RTC_WaitForSynchro>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	22ff      	movs	r2, #255	; 0xff
 800310c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2204      	movs	r2, #4
 8003112:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e018      	b.n	800314a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003126:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	22ff      	movs	r2, #255	; 0xff
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
  }
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800316c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800316e:	f7fe fdeb 	bl	8001d48 <HAL_GetTick>
 8003172:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003174:	e009      	b.n	800318a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003176:	f7fe fde7 	bl	8001d48 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003184:	d901      	bls.n	800318a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e007      	b.n	800319a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ee      	beq.n	8003176 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d119      	bne.n	80031f0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031c6:	f7fe fdbf 	bl	8001d48 <HAL_GetTick>
 80031ca:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80031cc:	e009      	b.n	80031e2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80031ce:	f7fe fdbb 	bl	8001d48 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031dc:	d901      	bls.n	80031e2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e007      	b.n	80031f2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ee      	beq.n	80031ce <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e01d      	b.n	8003248 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7fe fc07 	bl	8001a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3304      	adds	r3, #4
 8003236:	4619      	mov	r1, r3
 8003238:	4610      	mov	r0, r2
 800323a:	f000 fa15 	bl	8003668 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b06      	cmp	r3, #6
 8003278:	d007      	beq.n	800328a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d122      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d11b      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0202 	mvn.w	r2, #2
 80032c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f9a5 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f997 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f9a8 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d122      	bne.n	8003348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b04      	cmp	r3, #4
 800330e:	d11b      	bne.n	8003348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0204 	mvn.w	r2, #4
 8003318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f97b 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 8003334:	e005      	b.n	8003342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f96d 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f97e 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b08      	cmp	r3, #8
 8003354:	d122      	bne.n	800339c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0308 	and.w	r3, r3, #8
 8003360:	2b08      	cmp	r3, #8
 8003362:	d11b      	bne.n	800339c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0208 	mvn.w	r2, #8
 800336c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2204      	movs	r2, #4
 8003372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f951 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 8003388:	e005      	b.n	8003396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f943 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f954 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d122      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d11b      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0210 	mvn.w	r2, #16
 80033c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2208      	movs	r2, #8
 80033c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f927 	bl	800362a <HAL_TIM_IC_CaptureCallback>
 80033dc:	e005      	b.n	80033ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f919 	bl	8003616 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f92a 	bl	800363e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d10e      	bne.n	800341c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d107      	bne.n	800341c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f06f 0201 	mvn.w	r2, #1
 8003414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd f8ba 	bl	8000590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b80      	cmp	r3, #128	; 0x80
 8003428:	d10e      	bne.n	8003448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003434:	2b80      	cmp	r3, #128	; 0x80
 8003436:	d107      	bne.n	8003448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fad0 	bl	80039e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d10e      	bne.n	8003474 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d107      	bne.n	8003474 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800346c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8ef 	bl	8003652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b20      	cmp	r3, #32
 8003480:	d10e      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b20      	cmp	r3, #32
 800348e:	d107      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0220 	mvn.w	r2, #32
 8003498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fa9a 	bl	80039d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_TIM_ConfigClockSource+0x18>
 80034bc:	2302      	movs	r3, #2
 80034be:	e0a6      	b.n	800360e <HAL_TIM_ConfigClockSource+0x166>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d067      	beq.n	80035c8 <HAL_TIM_ConfigClockSource+0x120>
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	d80b      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x6c>
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d073      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x140>
 8003500:	2b10      	cmp	r3, #16
 8003502:	d802      	bhi.n	800350a <HAL_TIM_ConfigClockSource+0x62>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d06f      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003508:	e078      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800350a:	2b20      	cmp	r3, #32
 800350c:	d06c      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x140>
 800350e:	2b30      	cmp	r3, #48	; 0x30
 8003510:	d06a      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003512:	e073      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003514:	2b70      	cmp	r3, #112	; 0x70
 8003516:	d00d      	beq.n	8003534 <HAL_TIM_ConfigClockSource+0x8c>
 8003518:	2b70      	cmp	r3, #112	; 0x70
 800351a:	d804      	bhi.n	8003526 <HAL_TIM_ConfigClockSource+0x7e>
 800351c:	2b50      	cmp	r3, #80	; 0x50
 800351e:	d033      	beq.n	8003588 <HAL_TIM_ConfigClockSource+0xe0>
 8003520:	2b60      	cmp	r3, #96	; 0x60
 8003522:	d041      	beq.n	80035a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003524:	e06a      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352a:	d066      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0x152>
 800352c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003530:	d017      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003532:	e063      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f000 f9aa 	bl	800389c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003556:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	609a      	str	r2, [r3, #8]
      break;
 8003560:	e04c      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6899      	ldr	r1, [r3, #8]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f000 f993 	bl	800389c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003584:	609a      	str	r2, [r3, #8]
      break;
 8003586:	e039      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6859      	ldr	r1, [r3, #4]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	461a      	mov	r2, r3
 8003596:	f000 f907 	bl	80037a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2150      	movs	r1, #80	; 0x50
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f960 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 80035a6:	e029      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	461a      	mov	r2, r3
 80035b6:	f000 f926 	bl	8003806 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2160      	movs	r1, #96	; 0x60
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f950 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 80035c6:	e019      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	461a      	mov	r2, r3
 80035d6:	f000 f8e7 	bl	80037a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2140      	movs	r1, #64	; 0x40
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f940 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 80035e6:	e009      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f000 f937 	bl	8003866 <TIM_ITRx_SetConfig>
      break;
 80035f8:	e000      	b.n	80035fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80035fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a40      	ldr	r2, [pc, #256]	; (800377c <TIM_Base_SetConfig+0x114>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003686:	d00f      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3d      	ldr	r2, [pc, #244]	; (8003780 <TIM_Base_SetConfig+0x118>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00b      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a3c      	ldr	r2, [pc, #240]	; (8003784 <TIM_Base_SetConfig+0x11c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a3b      	ldr	r2, [pc, #236]	; (8003788 <TIM_Base_SetConfig+0x120>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0x40>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a3a      	ldr	r2, [pc, #232]	; (800378c <TIM_Base_SetConfig+0x124>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d108      	bne.n	80036ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a2f      	ldr	r2, [pc, #188]	; (800377c <TIM_Base_SetConfig+0x114>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d027      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2c      	ldr	r2, [pc, #176]	; (8003780 <TIM_Base_SetConfig+0x118>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d023      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2b      	ldr	r2, [pc, #172]	; (8003784 <TIM_Base_SetConfig+0x11c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01f      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <TIM_Base_SetConfig+0x120>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a29      	ldr	r2, [pc, #164]	; (800378c <TIM_Base_SetConfig+0x124>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d017      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a28      	ldr	r2, [pc, #160]	; (8003790 <TIM_Base_SetConfig+0x128>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a27      	ldr	r2, [pc, #156]	; (8003794 <TIM_Base_SetConfig+0x12c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00f      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a26      	ldr	r2, [pc, #152]	; (8003798 <TIM_Base_SetConfig+0x130>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00b      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a25      	ldr	r2, [pc, #148]	; (800379c <TIM_Base_SetConfig+0x134>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <TIM_Base_SetConfig+0x138>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d003      	beq.n	800371a <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <TIM_Base_SetConfig+0x13c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d108      	bne.n	800372c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a0a      	ldr	r2, [pc, #40]	; (800377c <TIM_Base_SetConfig+0x114>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0xf8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0c      	ldr	r2, [pc, #48]	; (800378c <TIM_Base_SetConfig+0x124>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d103      	bne.n	8003768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	615a      	str	r2, [r3, #20]
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40010000 	.word	0x40010000
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	40010400 	.word	0x40010400
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800
 800379c:	40001800 	.word	0x40001800
 80037a0:	40001c00 	.word	0x40001c00
 80037a4:	40002000 	.word	0x40002000

080037a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f023 0201 	bic.w	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f023 030a 	bic.w	r3, r3, #10
 80037e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	621a      	str	r2, [r3, #32]
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003806:	b480      	push	{r7}
 8003808:	b087      	sub	sp, #28
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	f023 0210 	bic.w	r2, r3, #16
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003830:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	031b      	lsls	r3, r3, #12
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003842:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	621a      	str	r2, [r3, #32]
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003866:	b480      	push	{r7}
 8003868:	b085      	sub	sp, #20
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	f043 0307 	orr.w	r3, r3, #7
 8003888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	021a      	lsls	r2, r3, #8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	431a      	orrs	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	609a      	str	r2, [r3, #8]
}
 80038d0:	bf00      	nop
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e05a      	b.n	80039aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a21      	ldr	r2, [pc, #132]	; (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d022      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003940:	d01d      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1d      	ldr	r2, [pc, #116]	; (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d018      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1a      	ldr	r2, [pc, #104]	; (80039c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00e      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d009      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a17      	ldr	r2, [pc, #92]	; (80039cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d004      	beq.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a15      	ldr	r2, [pc, #84]	; (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d10c      	bne.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	4313      	orrs	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40010400 	.word	0x40010400
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40001800 	.word	0x40001800

080039d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e03f      	b.n	8003a8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fe f82c 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	; 0x24
 8003a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 faf9 	bl	8004038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d130      	bne.n	8003b12 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_UART_Transmit_IT+0x26>
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e029      	b.n	8003b14 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Transmit_IT+0x38>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e022      	b.n	8003b14 <HAL_UART_Transmit_IT+0x7e>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	88fa      	ldrh	r2, [r7, #6]
 8003ae6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2221      	movs	r2, #33	; 0x21
 8003af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b0c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d140      	bne.n	8003bbc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <HAL_UART_Receive_IT+0x26>
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e039      	b.n	8003bbe <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Receive_IT+0x38>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e032      	b.n	8003bbe <HAL_UART_Receive_IT+0x9e>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2222      	movs	r2, #34	; 0x22
 8003b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b96:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0220 	orr.w	r2, r2, #32
 8003bb6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_UART_IRQHandler+0x52>
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f98c 	bl	8003f34 <UART_Receive_IT>
      return;
 8003c1c:	e0d1      	b.n	8003dc2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80b0 	beq.w	8003d86 <HAL_UART_IRQHandler+0x1ba>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d105      	bne.n	8003c3c <HAL_UART_IRQHandler+0x70>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80a5 	beq.w	8003d86 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_UART_IRQHandler+0x90>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	f043 0201 	orr.w	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_UART_IRQHandler+0xb0>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	f043 0202 	orr.w	r2, r3, #2
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_UART_IRQHandler+0xd0>
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	f043 0204 	orr.w	r2, r3, #4
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00f      	beq.n	8003cc6 <HAL_UART_IRQHandler+0xfa>
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <HAL_UART_IRQHandler+0xee>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	f043 0208 	orr.w	r2, r3, #8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d078      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x11c>
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f926 	bl	8003f34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	bf0c      	ite	eq
 8003cf6:	2301      	moveq	r3, #1
 8003cf8:	2300      	movne	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d102      	bne.n	8003d10 <HAL_UART_IRQHandler+0x144>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d031      	beq.n	8003d74 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f86f 	bl	8003df4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d123      	bne.n	8003d6c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d32:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	4a21      	ldr	r2, [pc, #132]	; (8003dc8 <HAL_UART_IRQHandler+0x1fc>)
 8003d42:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe f91a 	bl	8001f82 <HAL_DMA_Abort_IT>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d016      	beq.n	8003d82 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d62:	e00e      	b.n	8003d82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f83b 	bl	8003de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6a:	e00a      	b.n	8003d82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f837 	bl	8003de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d72:	e006      	b.n	8003d82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f833 	bl	8003de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003d80:	e01e      	b.n	8003dc0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d82:	bf00      	nop
    return;
 8003d84:	e01c      	b.n	8003dc0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_UART_IRQHandler+0x1d6>
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f85c 	bl	8003e58 <UART_Transmit_IT>
    return;
 8003da0:	e00f      	b.n	8003dc2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x1f6>
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f8a4 	bl	8003f04 <UART_EndTransmit_IT>
    return;
 8003dbc:	bf00      	nop
 8003dbe:	e000      	b.n	8003dc2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003dc0:	bf00      	nop
  }
}
 8003dc2:	3720      	adds	r7, #32
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	08003e31 	.word	0x08003e31

08003dcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff ffc8 	bl	8003de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e50:	bf00      	nop
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b21      	cmp	r3, #33	; 0x21
 8003e6a:	d144      	bne.n	8003ef6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e74:	d11a      	bne.n	8003eac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e8a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d105      	bne.n	8003ea0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	1c9a      	adds	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	621a      	str	r2, [r3, #32]
 8003e9e:	e00e      	b.n	8003ebe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	621a      	str	r2, [r3, #32]
 8003eaa:	e008      	b.n	8003ebe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	1c59      	adds	r1, r3, #1
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6211      	str	r1, [r2, #32]
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10f      	bne.n	8003ef2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ee0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e000      	b.n	8003ef8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
  }
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff51 	bl	8003dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b22      	cmp	r3, #34	; 0x22
 8003f46:	d171      	bne.n	800402c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f50:	d123      	bne.n	8003f9a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10e      	bne.n	8003f7e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	1c9a      	adds	r2, r3, #2
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f7c:	e029      	b.n	8003fd2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28
 8003f98:	e01b      	b.n	8003fd2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6858      	ldr	r0, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	1c59      	adds	r1, r3, #1
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6291      	str	r1, [r2, #40]	; 0x28
 8003fb2:	b2c2      	uxtb	r2, r0
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e00c      	b.n	8003fd2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	1c58      	adds	r0, r3, #1
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	6288      	str	r0, [r1, #40]	; 0x28
 8003fca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d120      	bne.n	8004028 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0220 	bic.w	r2, r2, #32
 8003ff4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004004:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc ff9e 	bl	8000f60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e002      	b.n	800402e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	e000      	b.n	800402e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800402c:	2302      	movs	r3, #2
  }
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800407a:	f023 030c 	bic.w	r3, r3, #12
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	430b      	orrs	r3, r1
 8004086:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a6:	f040 818b 	bne.w	80043c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4ac1      	ldr	r2, [pc, #772]	; (80043b4 <UART_SetConfig+0x37c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d005      	beq.n	80040c0 <UART_SetConfig+0x88>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4abf      	ldr	r2, [pc, #764]	; (80043b8 <UART_SetConfig+0x380>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	f040 80bd 	bne.w	800423a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040c0:	f7fe fde4 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 80040c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	461d      	mov	r5, r3
 80040ca:	f04f 0600 	mov.w	r6, #0
 80040ce:	46a8      	mov	r8, r5
 80040d0:	46b1      	mov	r9, r6
 80040d2:	eb18 0308 	adds.w	r3, r8, r8
 80040d6:	eb49 0409 	adc.w	r4, r9, r9
 80040da:	4698      	mov	r8, r3
 80040dc:	46a1      	mov	r9, r4
 80040de:	eb18 0805 	adds.w	r8, r8, r5
 80040e2:	eb49 0906 	adc.w	r9, r9, r6
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040fa:	4688      	mov	r8, r1
 80040fc:	4691      	mov	r9, r2
 80040fe:	eb18 0005 	adds.w	r0, r8, r5
 8004102:	eb49 0106 	adc.w	r1, r9, r6
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	461d      	mov	r5, r3
 800410c:	f04f 0600 	mov.w	r6, #0
 8004110:	196b      	adds	r3, r5, r5
 8004112:	eb46 0406 	adc.w	r4, r6, r6
 8004116:	461a      	mov	r2, r3
 8004118:	4623      	mov	r3, r4
 800411a:	f7fc f8b9 	bl	8000290 <__aeabi_uldivmod>
 800411e:	4603      	mov	r3, r0
 8004120:	460c      	mov	r4, r1
 8004122:	461a      	mov	r2, r3
 8004124:	4ba5      	ldr	r3, [pc, #660]	; (80043bc <UART_SetConfig+0x384>)
 8004126:	fba3 2302 	umull	r2, r3, r3, r2
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	461d      	mov	r5, r3
 8004134:	f04f 0600 	mov.w	r6, #0
 8004138:	46a9      	mov	r9, r5
 800413a:	46b2      	mov	sl, r6
 800413c:	eb19 0309 	adds.w	r3, r9, r9
 8004140:	eb4a 040a 	adc.w	r4, sl, sl
 8004144:	4699      	mov	r9, r3
 8004146:	46a2      	mov	sl, r4
 8004148:	eb19 0905 	adds.w	r9, r9, r5
 800414c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800415c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004160:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004164:	4689      	mov	r9, r1
 8004166:	4692      	mov	sl, r2
 8004168:	eb19 0005 	adds.w	r0, r9, r5
 800416c:	eb4a 0106 	adc.w	r1, sl, r6
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	461d      	mov	r5, r3
 8004176:	f04f 0600 	mov.w	r6, #0
 800417a:	196b      	adds	r3, r5, r5
 800417c:	eb46 0406 	adc.w	r4, r6, r6
 8004180:	461a      	mov	r2, r3
 8004182:	4623      	mov	r3, r4
 8004184:	f7fc f884 	bl	8000290 <__aeabi_uldivmod>
 8004188:	4603      	mov	r3, r0
 800418a:	460c      	mov	r4, r1
 800418c:	461a      	mov	r2, r3
 800418e:	4b8b      	ldr	r3, [pc, #556]	; (80043bc <UART_SetConfig+0x384>)
 8004190:	fba3 1302 	umull	r1, r3, r3, r2
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	2164      	movs	r1, #100	; 0x64
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	3332      	adds	r3, #50	; 0x32
 80041a2:	4a86      	ldr	r2, [pc, #536]	; (80043bc <UART_SetConfig+0x384>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041b0:	4498      	add	r8, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	461d      	mov	r5, r3
 80041b6:	f04f 0600 	mov.w	r6, #0
 80041ba:	46a9      	mov	r9, r5
 80041bc:	46b2      	mov	sl, r6
 80041be:	eb19 0309 	adds.w	r3, r9, r9
 80041c2:	eb4a 040a 	adc.w	r4, sl, sl
 80041c6:	4699      	mov	r9, r3
 80041c8:	46a2      	mov	sl, r4
 80041ca:	eb19 0905 	adds.w	r9, r9, r5
 80041ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80041d2:	f04f 0100 	mov.w	r1, #0
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041e6:	4689      	mov	r9, r1
 80041e8:	4692      	mov	sl, r2
 80041ea:	eb19 0005 	adds.w	r0, r9, r5
 80041ee:	eb4a 0106 	adc.w	r1, sl, r6
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	461d      	mov	r5, r3
 80041f8:	f04f 0600 	mov.w	r6, #0
 80041fc:	196b      	adds	r3, r5, r5
 80041fe:	eb46 0406 	adc.w	r4, r6, r6
 8004202:	461a      	mov	r2, r3
 8004204:	4623      	mov	r3, r4
 8004206:	f7fc f843 	bl	8000290 <__aeabi_uldivmod>
 800420a:	4603      	mov	r3, r0
 800420c:	460c      	mov	r4, r1
 800420e:	461a      	mov	r2, r3
 8004210:	4b6a      	ldr	r3, [pc, #424]	; (80043bc <UART_SetConfig+0x384>)
 8004212:	fba3 1302 	umull	r1, r3, r3, r2
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	2164      	movs	r1, #100	; 0x64
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	3332      	adds	r3, #50	; 0x32
 8004224:	4a65      	ldr	r2, [pc, #404]	; (80043bc <UART_SetConfig+0x384>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	f003 0207 	and.w	r2, r3, #7
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4442      	add	r2, r8
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	e26f      	b.n	800471a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800423a:	f7fe fd13 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 800423e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	461d      	mov	r5, r3
 8004244:	f04f 0600 	mov.w	r6, #0
 8004248:	46a8      	mov	r8, r5
 800424a:	46b1      	mov	r9, r6
 800424c:	eb18 0308 	adds.w	r3, r8, r8
 8004250:	eb49 0409 	adc.w	r4, r9, r9
 8004254:	4698      	mov	r8, r3
 8004256:	46a1      	mov	r9, r4
 8004258:	eb18 0805 	adds.w	r8, r8, r5
 800425c:	eb49 0906 	adc.w	r9, r9, r6
 8004260:	f04f 0100 	mov.w	r1, #0
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800426c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004270:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004274:	4688      	mov	r8, r1
 8004276:	4691      	mov	r9, r2
 8004278:	eb18 0005 	adds.w	r0, r8, r5
 800427c:	eb49 0106 	adc.w	r1, r9, r6
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	461d      	mov	r5, r3
 8004286:	f04f 0600 	mov.w	r6, #0
 800428a:	196b      	adds	r3, r5, r5
 800428c:	eb46 0406 	adc.w	r4, r6, r6
 8004290:	461a      	mov	r2, r3
 8004292:	4623      	mov	r3, r4
 8004294:	f7fb fffc 	bl	8000290 <__aeabi_uldivmod>
 8004298:	4603      	mov	r3, r0
 800429a:	460c      	mov	r4, r1
 800429c:	461a      	mov	r2, r3
 800429e:	4b47      	ldr	r3, [pc, #284]	; (80043bc <UART_SetConfig+0x384>)
 80042a0:	fba3 2302 	umull	r2, r3, r3, r2
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	461d      	mov	r5, r3
 80042ae:	f04f 0600 	mov.w	r6, #0
 80042b2:	46a9      	mov	r9, r5
 80042b4:	46b2      	mov	sl, r6
 80042b6:	eb19 0309 	adds.w	r3, r9, r9
 80042ba:	eb4a 040a 	adc.w	r4, sl, sl
 80042be:	4699      	mov	r9, r3
 80042c0:	46a2      	mov	sl, r4
 80042c2:	eb19 0905 	adds.w	r9, r9, r5
 80042c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80042ca:	f04f 0100 	mov.w	r1, #0
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042de:	4689      	mov	r9, r1
 80042e0:	4692      	mov	sl, r2
 80042e2:	eb19 0005 	adds.w	r0, r9, r5
 80042e6:	eb4a 0106 	adc.w	r1, sl, r6
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	461d      	mov	r5, r3
 80042f0:	f04f 0600 	mov.w	r6, #0
 80042f4:	196b      	adds	r3, r5, r5
 80042f6:	eb46 0406 	adc.w	r4, r6, r6
 80042fa:	461a      	mov	r2, r3
 80042fc:	4623      	mov	r3, r4
 80042fe:	f7fb ffc7 	bl	8000290 <__aeabi_uldivmod>
 8004302:	4603      	mov	r3, r0
 8004304:	460c      	mov	r4, r1
 8004306:	461a      	mov	r2, r3
 8004308:	4b2c      	ldr	r3, [pc, #176]	; (80043bc <UART_SetConfig+0x384>)
 800430a:	fba3 1302 	umull	r1, r3, r3, r2
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	2164      	movs	r1, #100	; 0x64
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	3332      	adds	r3, #50	; 0x32
 800431c:	4a27      	ldr	r2, [pc, #156]	; (80043bc <UART_SetConfig+0x384>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800432a:	4498      	add	r8, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	461d      	mov	r5, r3
 8004330:	f04f 0600 	mov.w	r6, #0
 8004334:	46a9      	mov	r9, r5
 8004336:	46b2      	mov	sl, r6
 8004338:	eb19 0309 	adds.w	r3, r9, r9
 800433c:	eb4a 040a 	adc.w	r4, sl, sl
 8004340:	4699      	mov	r9, r3
 8004342:	46a2      	mov	sl, r4
 8004344:	eb19 0905 	adds.w	r9, r9, r5
 8004348:	eb4a 0a06 	adc.w	sl, sl, r6
 800434c:	f04f 0100 	mov.w	r1, #0
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004358:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800435c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004360:	4689      	mov	r9, r1
 8004362:	4692      	mov	sl, r2
 8004364:	eb19 0005 	adds.w	r0, r9, r5
 8004368:	eb4a 0106 	adc.w	r1, sl, r6
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	461d      	mov	r5, r3
 8004372:	f04f 0600 	mov.w	r6, #0
 8004376:	196b      	adds	r3, r5, r5
 8004378:	eb46 0406 	adc.w	r4, r6, r6
 800437c:	461a      	mov	r2, r3
 800437e:	4623      	mov	r3, r4
 8004380:	f7fb ff86 	bl	8000290 <__aeabi_uldivmod>
 8004384:	4603      	mov	r3, r0
 8004386:	460c      	mov	r4, r1
 8004388:	461a      	mov	r2, r3
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <UART_SetConfig+0x384>)
 800438c:	fba3 1302 	umull	r1, r3, r3, r2
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	2164      	movs	r1, #100	; 0x64
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	3332      	adds	r3, #50	; 0x32
 800439e:	4a07      	ldr	r2, [pc, #28]	; (80043bc <UART_SetConfig+0x384>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	f003 0207 	and.w	r2, r3, #7
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4442      	add	r2, r8
 80043b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80043b2:	e1b2      	b.n	800471a <UART_SetConfig+0x6e2>
 80043b4:	40011000 	.word	0x40011000
 80043b8:	40011400 	.word	0x40011400
 80043bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4ad7      	ldr	r2, [pc, #860]	; (8004724 <UART_SetConfig+0x6ec>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d005      	beq.n	80043d6 <UART_SetConfig+0x39e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4ad6      	ldr	r2, [pc, #856]	; (8004728 <UART_SetConfig+0x6f0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	f040 80d1 	bne.w	8004578 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043d6:	f7fe fc59 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 80043da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	469a      	mov	sl, r3
 80043e0:	f04f 0b00 	mov.w	fp, #0
 80043e4:	46d0      	mov	r8, sl
 80043e6:	46d9      	mov	r9, fp
 80043e8:	eb18 0308 	adds.w	r3, r8, r8
 80043ec:	eb49 0409 	adc.w	r4, r9, r9
 80043f0:	4698      	mov	r8, r3
 80043f2:	46a1      	mov	r9, r4
 80043f4:	eb18 080a 	adds.w	r8, r8, sl
 80043f8:	eb49 090b 	adc.w	r9, r9, fp
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004408:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800440c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004410:	4688      	mov	r8, r1
 8004412:	4691      	mov	r9, r2
 8004414:	eb1a 0508 	adds.w	r5, sl, r8
 8004418:	eb4b 0609 	adc.w	r6, fp, r9
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4619      	mov	r1, r3
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	f04f 0400 	mov.w	r4, #0
 800442e:	0094      	lsls	r4, r2, #2
 8004430:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004434:	008b      	lsls	r3, r1, #2
 8004436:	461a      	mov	r2, r3
 8004438:	4623      	mov	r3, r4
 800443a:	4628      	mov	r0, r5
 800443c:	4631      	mov	r1, r6
 800443e:	f7fb ff27 	bl	8000290 <__aeabi_uldivmod>
 8004442:	4603      	mov	r3, r0
 8004444:	460c      	mov	r4, r1
 8004446:	461a      	mov	r2, r3
 8004448:	4bb8      	ldr	r3, [pc, #736]	; (800472c <UART_SetConfig+0x6f4>)
 800444a:	fba3 2302 	umull	r2, r3, r3, r2
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	469b      	mov	fp, r3
 8004458:	f04f 0c00 	mov.w	ip, #0
 800445c:	46d9      	mov	r9, fp
 800445e:	46e2      	mov	sl, ip
 8004460:	eb19 0309 	adds.w	r3, r9, r9
 8004464:	eb4a 040a 	adc.w	r4, sl, sl
 8004468:	4699      	mov	r9, r3
 800446a:	46a2      	mov	sl, r4
 800446c:	eb19 090b 	adds.w	r9, r9, fp
 8004470:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004480:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004484:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004488:	4689      	mov	r9, r1
 800448a:	4692      	mov	sl, r2
 800448c:	eb1b 0509 	adds.w	r5, fp, r9
 8004490:	eb4c 060a 	adc.w	r6, ip, sl
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4619      	mov	r1, r3
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	0094      	lsls	r4, r2, #2
 80044a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044ac:	008b      	lsls	r3, r1, #2
 80044ae:	461a      	mov	r2, r3
 80044b0:	4623      	mov	r3, r4
 80044b2:	4628      	mov	r0, r5
 80044b4:	4631      	mov	r1, r6
 80044b6:	f7fb feeb 	bl	8000290 <__aeabi_uldivmod>
 80044ba:	4603      	mov	r3, r0
 80044bc:	460c      	mov	r4, r1
 80044be:	461a      	mov	r2, r3
 80044c0:	4b9a      	ldr	r3, [pc, #616]	; (800472c <UART_SetConfig+0x6f4>)
 80044c2:	fba3 1302 	umull	r1, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2164      	movs	r1, #100	; 0x64
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	3332      	adds	r3, #50	; 0x32
 80044d4:	4a95      	ldr	r2, [pc, #596]	; (800472c <UART_SetConfig+0x6f4>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e0:	4498      	add	r8, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	469b      	mov	fp, r3
 80044e6:	f04f 0c00 	mov.w	ip, #0
 80044ea:	46d9      	mov	r9, fp
 80044ec:	46e2      	mov	sl, ip
 80044ee:	eb19 0309 	adds.w	r3, r9, r9
 80044f2:	eb4a 040a 	adc.w	r4, sl, sl
 80044f6:	4699      	mov	r9, r3
 80044f8:	46a2      	mov	sl, r4
 80044fa:	eb19 090b 	adds.w	r9, r9, fp
 80044fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004502:	f04f 0100 	mov.w	r1, #0
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800450e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004512:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004516:	4689      	mov	r9, r1
 8004518:	4692      	mov	sl, r2
 800451a:	eb1b 0509 	adds.w	r5, fp, r9
 800451e:	eb4c 060a 	adc.w	r6, ip, sl
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4619      	mov	r1, r3
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	f04f 0400 	mov.w	r4, #0
 8004534:	0094      	lsls	r4, r2, #2
 8004536:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800453a:	008b      	lsls	r3, r1, #2
 800453c:	461a      	mov	r2, r3
 800453e:	4623      	mov	r3, r4
 8004540:	4628      	mov	r0, r5
 8004542:	4631      	mov	r1, r6
 8004544:	f7fb fea4 	bl	8000290 <__aeabi_uldivmod>
 8004548:	4603      	mov	r3, r0
 800454a:	460c      	mov	r4, r1
 800454c:	461a      	mov	r2, r3
 800454e:	4b77      	ldr	r3, [pc, #476]	; (800472c <UART_SetConfig+0x6f4>)
 8004550:	fba3 1302 	umull	r1, r3, r3, r2
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	2164      	movs	r1, #100	; 0x64
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	3332      	adds	r3, #50	; 0x32
 8004562:	4a72      	ldr	r2, [pc, #456]	; (800472c <UART_SetConfig+0x6f4>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	f003 020f 	and.w	r2, r3, #15
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4442      	add	r2, r8
 8004574:	609a      	str	r2, [r3, #8]
 8004576:	e0d0      	b.n	800471a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004578:	f7fe fb74 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 800457c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	469a      	mov	sl, r3
 8004582:	f04f 0b00 	mov.w	fp, #0
 8004586:	46d0      	mov	r8, sl
 8004588:	46d9      	mov	r9, fp
 800458a:	eb18 0308 	adds.w	r3, r8, r8
 800458e:	eb49 0409 	adc.w	r4, r9, r9
 8004592:	4698      	mov	r8, r3
 8004594:	46a1      	mov	r9, r4
 8004596:	eb18 080a 	adds.w	r8, r8, sl
 800459a:	eb49 090b 	adc.w	r9, r9, fp
 800459e:	f04f 0100 	mov.w	r1, #0
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045b2:	4688      	mov	r8, r1
 80045b4:	4691      	mov	r9, r2
 80045b6:	eb1a 0508 	adds.w	r5, sl, r8
 80045ba:	eb4b 0609 	adc.w	r6, fp, r9
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	4619      	mov	r1, r3
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	f04f 0400 	mov.w	r4, #0
 80045d0:	0094      	lsls	r4, r2, #2
 80045d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045d6:	008b      	lsls	r3, r1, #2
 80045d8:	461a      	mov	r2, r3
 80045da:	4623      	mov	r3, r4
 80045dc:	4628      	mov	r0, r5
 80045de:	4631      	mov	r1, r6
 80045e0:	f7fb fe56 	bl	8000290 <__aeabi_uldivmod>
 80045e4:	4603      	mov	r3, r0
 80045e6:	460c      	mov	r4, r1
 80045e8:	461a      	mov	r2, r3
 80045ea:	4b50      	ldr	r3, [pc, #320]	; (800472c <UART_SetConfig+0x6f4>)
 80045ec:	fba3 2302 	umull	r2, r3, r3, r2
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	469b      	mov	fp, r3
 80045fa:	f04f 0c00 	mov.w	ip, #0
 80045fe:	46d9      	mov	r9, fp
 8004600:	46e2      	mov	sl, ip
 8004602:	eb19 0309 	adds.w	r3, r9, r9
 8004606:	eb4a 040a 	adc.w	r4, sl, sl
 800460a:	4699      	mov	r9, r3
 800460c:	46a2      	mov	sl, r4
 800460e:	eb19 090b 	adds.w	r9, r9, fp
 8004612:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004622:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004626:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800462a:	4689      	mov	r9, r1
 800462c:	4692      	mov	sl, r2
 800462e:	eb1b 0509 	adds.w	r5, fp, r9
 8004632:	eb4c 060a 	adc.w	r6, ip, sl
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	4619      	mov	r1, r3
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	f04f 0400 	mov.w	r4, #0
 8004648:	0094      	lsls	r4, r2, #2
 800464a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800464e:	008b      	lsls	r3, r1, #2
 8004650:	461a      	mov	r2, r3
 8004652:	4623      	mov	r3, r4
 8004654:	4628      	mov	r0, r5
 8004656:	4631      	mov	r1, r6
 8004658:	f7fb fe1a 	bl	8000290 <__aeabi_uldivmod>
 800465c:	4603      	mov	r3, r0
 800465e:	460c      	mov	r4, r1
 8004660:	461a      	mov	r2, r3
 8004662:	4b32      	ldr	r3, [pc, #200]	; (800472c <UART_SetConfig+0x6f4>)
 8004664:	fba3 1302 	umull	r1, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2164      	movs	r1, #100	; 0x64
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	3332      	adds	r3, #50	; 0x32
 8004676:	4a2d      	ldr	r2, [pc, #180]	; (800472c <UART_SetConfig+0x6f4>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004682:	4498      	add	r8, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	469b      	mov	fp, r3
 8004688:	f04f 0c00 	mov.w	ip, #0
 800468c:	46d9      	mov	r9, fp
 800468e:	46e2      	mov	sl, ip
 8004690:	eb19 0309 	adds.w	r3, r9, r9
 8004694:	eb4a 040a 	adc.w	r4, sl, sl
 8004698:	4699      	mov	r9, r3
 800469a:	46a2      	mov	sl, r4
 800469c:	eb19 090b 	adds.w	r9, r9, fp
 80046a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046b8:	4689      	mov	r9, r1
 80046ba:	4692      	mov	sl, r2
 80046bc:	eb1b 0509 	adds.w	r5, fp, r9
 80046c0:	eb4c 060a 	adc.w	r6, ip, sl
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4619      	mov	r1, r3
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	f04f 0400 	mov.w	r4, #0
 80046d6:	0094      	lsls	r4, r2, #2
 80046d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046dc:	008b      	lsls	r3, r1, #2
 80046de:	461a      	mov	r2, r3
 80046e0:	4623      	mov	r3, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	4631      	mov	r1, r6
 80046e6:	f7fb fdd3 	bl	8000290 <__aeabi_uldivmod>
 80046ea:	4603      	mov	r3, r0
 80046ec:	460c      	mov	r4, r1
 80046ee:	461a      	mov	r2, r3
 80046f0:	4b0e      	ldr	r3, [pc, #56]	; (800472c <UART_SetConfig+0x6f4>)
 80046f2:	fba3 1302 	umull	r1, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2164      	movs	r1, #100	; 0x64
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	3332      	adds	r3, #50	; 0x32
 8004704:	4a09      	ldr	r2, [pc, #36]	; (800472c <UART_SetConfig+0x6f4>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	f003 020f 	and.w	r2, r3, #15
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4442      	add	r2, r8
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	e7ff      	b.n	800471a <UART_SetConfig+0x6e2>
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004724:	40011000 	.word	0x40011000
 8004728:	40011400 	.word	0x40011400
 800472c:	51eb851f 	.word	0x51eb851f

08004730 <__errno>:
 8004730:	4b01      	ldr	r3, [pc, #4]	; (8004738 <__errno+0x8>)
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000010 	.word	0x20000010

0800473c <__libc_init_array>:
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	4e0d      	ldr	r6, [pc, #52]	; (8004774 <__libc_init_array+0x38>)
 8004740:	4c0d      	ldr	r4, [pc, #52]	; (8004778 <__libc_init_array+0x3c>)
 8004742:	1ba4      	subs	r4, r4, r6
 8004744:	10a4      	asrs	r4, r4, #2
 8004746:	2500      	movs	r5, #0
 8004748:	42a5      	cmp	r5, r4
 800474a:	d109      	bne.n	8004760 <__libc_init_array+0x24>
 800474c:	4e0b      	ldr	r6, [pc, #44]	; (800477c <__libc_init_array+0x40>)
 800474e:	4c0c      	ldr	r4, [pc, #48]	; (8004780 <__libc_init_array+0x44>)
 8004750:	f000 fc36 	bl	8004fc0 <_init>
 8004754:	1ba4      	subs	r4, r4, r6
 8004756:	10a4      	asrs	r4, r4, #2
 8004758:	2500      	movs	r5, #0
 800475a:	42a5      	cmp	r5, r4
 800475c:	d105      	bne.n	800476a <__libc_init_array+0x2e>
 800475e:	bd70      	pop	{r4, r5, r6, pc}
 8004760:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004764:	4798      	blx	r3
 8004766:	3501      	adds	r5, #1
 8004768:	e7ee      	b.n	8004748 <__libc_init_array+0xc>
 800476a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800476e:	4798      	blx	r3
 8004770:	3501      	adds	r5, #1
 8004772:	e7f2      	b.n	800475a <__libc_init_array+0x1e>
 8004774:	0800517c 	.word	0x0800517c
 8004778:	0800517c 	.word	0x0800517c
 800477c:	0800517c 	.word	0x0800517c
 8004780:	08005180 	.word	0x08005180

08004784 <memset>:
 8004784:	4402      	add	r2, r0
 8004786:	4603      	mov	r3, r0
 8004788:	4293      	cmp	r3, r2
 800478a:	d100      	bne.n	800478e <memset+0xa>
 800478c:	4770      	bx	lr
 800478e:	f803 1b01 	strb.w	r1, [r3], #1
 8004792:	e7f9      	b.n	8004788 <memset+0x4>

08004794 <siprintf>:
 8004794:	b40e      	push	{r1, r2, r3}
 8004796:	b500      	push	{lr}
 8004798:	b09c      	sub	sp, #112	; 0x70
 800479a:	ab1d      	add	r3, sp, #116	; 0x74
 800479c:	9002      	str	r0, [sp, #8]
 800479e:	9006      	str	r0, [sp, #24]
 80047a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047a4:	4809      	ldr	r0, [pc, #36]	; (80047cc <siprintf+0x38>)
 80047a6:	9107      	str	r1, [sp, #28]
 80047a8:	9104      	str	r1, [sp, #16]
 80047aa:	4909      	ldr	r1, [pc, #36]	; (80047d0 <siprintf+0x3c>)
 80047ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80047b0:	9105      	str	r1, [sp, #20]
 80047b2:	6800      	ldr	r0, [r0, #0]
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	a902      	add	r1, sp, #8
 80047b8:	f000 f876 	bl	80048a8 <_svfiprintf_r>
 80047bc:	9b02      	ldr	r3, [sp, #8]
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	b01c      	add	sp, #112	; 0x70
 80047c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047c8:	b003      	add	sp, #12
 80047ca:	4770      	bx	lr
 80047cc:	20000010 	.word	0x20000010
 80047d0:	ffff0208 	.word	0xffff0208

080047d4 <strcat>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	4603      	mov	r3, r0
 80047d8:	781a      	ldrb	r2, [r3, #0]
 80047da:	1c5c      	adds	r4, r3, #1
 80047dc:	b93a      	cbnz	r2, 80047ee <strcat+0x1a>
 80047de:	3b01      	subs	r3, #1
 80047e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047e4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047e8:	2a00      	cmp	r2, #0
 80047ea:	d1f9      	bne.n	80047e0 <strcat+0xc>
 80047ec:	bd10      	pop	{r4, pc}
 80047ee:	4623      	mov	r3, r4
 80047f0:	e7f2      	b.n	80047d8 <strcat+0x4>

080047f2 <__ssputs_r>:
 80047f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f6:	688e      	ldr	r6, [r1, #8]
 80047f8:	429e      	cmp	r6, r3
 80047fa:	4682      	mov	sl, r0
 80047fc:	460c      	mov	r4, r1
 80047fe:	4690      	mov	r8, r2
 8004800:	4699      	mov	r9, r3
 8004802:	d837      	bhi.n	8004874 <__ssputs_r+0x82>
 8004804:	898a      	ldrh	r2, [r1, #12]
 8004806:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800480a:	d031      	beq.n	8004870 <__ssputs_r+0x7e>
 800480c:	6825      	ldr	r5, [r4, #0]
 800480e:	6909      	ldr	r1, [r1, #16]
 8004810:	1a6f      	subs	r7, r5, r1
 8004812:	6965      	ldr	r5, [r4, #20]
 8004814:	2302      	movs	r3, #2
 8004816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800481a:	fb95 f5f3 	sdiv	r5, r5, r3
 800481e:	f109 0301 	add.w	r3, r9, #1
 8004822:	443b      	add	r3, r7
 8004824:	429d      	cmp	r5, r3
 8004826:	bf38      	it	cc
 8004828:	461d      	movcc	r5, r3
 800482a:	0553      	lsls	r3, r2, #21
 800482c:	d530      	bpl.n	8004890 <__ssputs_r+0x9e>
 800482e:	4629      	mov	r1, r5
 8004830:	f000 fb2c 	bl	8004e8c <_malloc_r>
 8004834:	4606      	mov	r6, r0
 8004836:	b950      	cbnz	r0, 800484e <__ssputs_r+0x5c>
 8004838:	230c      	movs	r3, #12
 800483a:	f8ca 3000 	str.w	r3, [sl]
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	f04f 30ff 	mov.w	r0, #4294967295
 800484a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484e:	463a      	mov	r2, r7
 8004850:	6921      	ldr	r1, [r4, #16]
 8004852:	f000 faa9 	bl	8004da8 <memcpy>
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800485c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004860:	81a3      	strh	r3, [r4, #12]
 8004862:	6126      	str	r6, [r4, #16]
 8004864:	6165      	str	r5, [r4, #20]
 8004866:	443e      	add	r6, r7
 8004868:	1bed      	subs	r5, r5, r7
 800486a:	6026      	str	r6, [r4, #0]
 800486c:	60a5      	str	r5, [r4, #8]
 800486e:	464e      	mov	r6, r9
 8004870:	454e      	cmp	r6, r9
 8004872:	d900      	bls.n	8004876 <__ssputs_r+0x84>
 8004874:	464e      	mov	r6, r9
 8004876:	4632      	mov	r2, r6
 8004878:	4641      	mov	r1, r8
 800487a:	6820      	ldr	r0, [r4, #0]
 800487c:	f000 fa9f 	bl	8004dbe <memmove>
 8004880:	68a3      	ldr	r3, [r4, #8]
 8004882:	1b9b      	subs	r3, r3, r6
 8004884:	60a3      	str	r3, [r4, #8]
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	441e      	add	r6, r3
 800488a:	6026      	str	r6, [r4, #0]
 800488c:	2000      	movs	r0, #0
 800488e:	e7dc      	b.n	800484a <__ssputs_r+0x58>
 8004890:	462a      	mov	r2, r5
 8004892:	f000 fb55 	bl	8004f40 <_realloc_r>
 8004896:	4606      	mov	r6, r0
 8004898:	2800      	cmp	r0, #0
 800489a:	d1e2      	bne.n	8004862 <__ssputs_r+0x70>
 800489c:	6921      	ldr	r1, [r4, #16]
 800489e:	4650      	mov	r0, sl
 80048a0:	f000 faa6 	bl	8004df0 <_free_r>
 80048a4:	e7c8      	b.n	8004838 <__ssputs_r+0x46>
	...

080048a8 <_svfiprintf_r>:
 80048a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ac:	461d      	mov	r5, r3
 80048ae:	898b      	ldrh	r3, [r1, #12]
 80048b0:	061f      	lsls	r7, r3, #24
 80048b2:	b09d      	sub	sp, #116	; 0x74
 80048b4:	4680      	mov	r8, r0
 80048b6:	460c      	mov	r4, r1
 80048b8:	4616      	mov	r6, r2
 80048ba:	d50f      	bpl.n	80048dc <_svfiprintf_r+0x34>
 80048bc:	690b      	ldr	r3, [r1, #16]
 80048be:	b96b      	cbnz	r3, 80048dc <_svfiprintf_r+0x34>
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	f000 fae3 	bl	8004e8c <_malloc_r>
 80048c6:	6020      	str	r0, [r4, #0]
 80048c8:	6120      	str	r0, [r4, #16]
 80048ca:	b928      	cbnz	r0, 80048d8 <_svfiprintf_r+0x30>
 80048cc:	230c      	movs	r3, #12
 80048ce:	f8c8 3000 	str.w	r3, [r8]
 80048d2:	f04f 30ff 	mov.w	r0, #4294967295
 80048d6:	e0c8      	b.n	8004a6a <_svfiprintf_r+0x1c2>
 80048d8:	2340      	movs	r3, #64	; 0x40
 80048da:	6163      	str	r3, [r4, #20]
 80048dc:	2300      	movs	r3, #0
 80048de:	9309      	str	r3, [sp, #36]	; 0x24
 80048e0:	2320      	movs	r3, #32
 80048e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048e6:	2330      	movs	r3, #48	; 0x30
 80048e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048ec:	9503      	str	r5, [sp, #12]
 80048ee:	f04f 0b01 	mov.w	fp, #1
 80048f2:	4637      	mov	r7, r6
 80048f4:	463d      	mov	r5, r7
 80048f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80048fa:	b10b      	cbz	r3, 8004900 <_svfiprintf_r+0x58>
 80048fc:	2b25      	cmp	r3, #37	; 0x25
 80048fe:	d13e      	bne.n	800497e <_svfiprintf_r+0xd6>
 8004900:	ebb7 0a06 	subs.w	sl, r7, r6
 8004904:	d00b      	beq.n	800491e <_svfiprintf_r+0x76>
 8004906:	4653      	mov	r3, sl
 8004908:	4632      	mov	r2, r6
 800490a:	4621      	mov	r1, r4
 800490c:	4640      	mov	r0, r8
 800490e:	f7ff ff70 	bl	80047f2 <__ssputs_r>
 8004912:	3001      	adds	r0, #1
 8004914:	f000 80a4 	beq.w	8004a60 <_svfiprintf_r+0x1b8>
 8004918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800491a:	4453      	add	r3, sl
 800491c:	9309      	str	r3, [sp, #36]	; 0x24
 800491e:	783b      	ldrb	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 809d 	beq.w	8004a60 <_svfiprintf_r+0x1b8>
 8004926:	2300      	movs	r3, #0
 8004928:	f04f 32ff 	mov.w	r2, #4294967295
 800492c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004930:	9304      	str	r3, [sp, #16]
 8004932:	9307      	str	r3, [sp, #28]
 8004934:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004938:	931a      	str	r3, [sp, #104]	; 0x68
 800493a:	462f      	mov	r7, r5
 800493c:	2205      	movs	r2, #5
 800493e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004942:	4850      	ldr	r0, [pc, #320]	; (8004a84 <_svfiprintf_r+0x1dc>)
 8004944:	f7fb fc54 	bl	80001f0 <memchr>
 8004948:	9b04      	ldr	r3, [sp, #16]
 800494a:	b9d0      	cbnz	r0, 8004982 <_svfiprintf_r+0xda>
 800494c:	06d9      	lsls	r1, r3, #27
 800494e:	bf44      	itt	mi
 8004950:	2220      	movmi	r2, #32
 8004952:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004956:	071a      	lsls	r2, r3, #28
 8004958:	bf44      	itt	mi
 800495a:	222b      	movmi	r2, #43	; 0x2b
 800495c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004960:	782a      	ldrb	r2, [r5, #0]
 8004962:	2a2a      	cmp	r2, #42	; 0x2a
 8004964:	d015      	beq.n	8004992 <_svfiprintf_r+0xea>
 8004966:	9a07      	ldr	r2, [sp, #28]
 8004968:	462f      	mov	r7, r5
 800496a:	2000      	movs	r0, #0
 800496c:	250a      	movs	r5, #10
 800496e:	4639      	mov	r1, r7
 8004970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004974:	3b30      	subs	r3, #48	; 0x30
 8004976:	2b09      	cmp	r3, #9
 8004978:	d94d      	bls.n	8004a16 <_svfiprintf_r+0x16e>
 800497a:	b1b8      	cbz	r0, 80049ac <_svfiprintf_r+0x104>
 800497c:	e00f      	b.n	800499e <_svfiprintf_r+0xf6>
 800497e:	462f      	mov	r7, r5
 8004980:	e7b8      	b.n	80048f4 <_svfiprintf_r+0x4c>
 8004982:	4a40      	ldr	r2, [pc, #256]	; (8004a84 <_svfiprintf_r+0x1dc>)
 8004984:	1a80      	subs	r0, r0, r2
 8004986:	fa0b f000 	lsl.w	r0, fp, r0
 800498a:	4318      	orrs	r0, r3
 800498c:	9004      	str	r0, [sp, #16]
 800498e:	463d      	mov	r5, r7
 8004990:	e7d3      	b.n	800493a <_svfiprintf_r+0x92>
 8004992:	9a03      	ldr	r2, [sp, #12]
 8004994:	1d11      	adds	r1, r2, #4
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	9103      	str	r1, [sp, #12]
 800499a:	2a00      	cmp	r2, #0
 800499c:	db01      	blt.n	80049a2 <_svfiprintf_r+0xfa>
 800499e:	9207      	str	r2, [sp, #28]
 80049a0:	e004      	b.n	80049ac <_svfiprintf_r+0x104>
 80049a2:	4252      	negs	r2, r2
 80049a4:	f043 0302 	orr.w	r3, r3, #2
 80049a8:	9207      	str	r2, [sp, #28]
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	783b      	ldrb	r3, [r7, #0]
 80049ae:	2b2e      	cmp	r3, #46	; 0x2e
 80049b0:	d10c      	bne.n	80049cc <_svfiprintf_r+0x124>
 80049b2:	787b      	ldrb	r3, [r7, #1]
 80049b4:	2b2a      	cmp	r3, #42	; 0x2a
 80049b6:	d133      	bne.n	8004a20 <_svfiprintf_r+0x178>
 80049b8:	9b03      	ldr	r3, [sp, #12]
 80049ba:	1d1a      	adds	r2, r3, #4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	9203      	str	r2, [sp, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bfb8      	it	lt
 80049c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80049c8:	3702      	adds	r7, #2
 80049ca:	9305      	str	r3, [sp, #20]
 80049cc:	4d2e      	ldr	r5, [pc, #184]	; (8004a88 <_svfiprintf_r+0x1e0>)
 80049ce:	7839      	ldrb	r1, [r7, #0]
 80049d0:	2203      	movs	r2, #3
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7fb fc0c 	bl	80001f0 <memchr>
 80049d8:	b138      	cbz	r0, 80049ea <_svfiprintf_r+0x142>
 80049da:	2340      	movs	r3, #64	; 0x40
 80049dc:	1b40      	subs	r0, r0, r5
 80049de:	fa03 f000 	lsl.w	r0, r3, r0
 80049e2:	9b04      	ldr	r3, [sp, #16]
 80049e4:	4303      	orrs	r3, r0
 80049e6:	3701      	adds	r7, #1
 80049e8:	9304      	str	r3, [sp, #16]
 80049ea:	7839      	ldrb	r1, [r7, #0]
 80049ec:	4827      	ldr	r0, [pc, #156]	; (8004a8c <_svfiprintf_r+0x1e4>)
 80049ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049f2:	2206      	movs	r2, #6
 80049f4:	1c7e      	adds	r6, r7, #1
 80049f6:	f7fb fbfb 	bl	80001f0 <memchr>
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d038      	beq.n	8004a70 <_svfiprintf_r+0x1c8>
 80049fe:	4b24      	ldr	r3, [pc, #144]	; (8004a90 <_svfiprintf_r+0x1e8>)
 8004a00:	bb13      	cbnz	r3, 8004a48 <_svfiprintf_r+0x1a0>
 8004a02:	9b03      	ldr	r3, [sp, #12]
 8004a04:	3307      	adds	r3, #7
 8004a06:	f023 0307 	bic.w	r3, r3, #7
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	9303      	str	r3, [sp, #12]
 8004a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a10:	444b      	add	r3, r9
 8004a12:	9309      	str	r3, [sp, #36]	; 0x24
 8004a14:	e76d      	b.n	80048f2 <_svfiprintf_r+0x4a>
 8004a16:	fb05 3202 	mla	r2, r5, r2, r3
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	460f      	mov	r7, r1
 8004a1e:	e7a6      	b.n	800496e <_svfiprintf_r+0xc6>
 8004a20:	2300      	movs	r3, #0
 8004a22:	3701      	adds	r7, #1
 8004a24:	9305      	str	r3, [sp, #20]
 8004a26:	4619      	mov	r1, r3
 8004a28:	250a      	movs	r5, #10
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a30:	3a30      	subs	r2, #48	; 0x30
 8004a32:	2a09      	cmp	r2, #9
 8004a34:	d903      	bls.n	8004a3e <_svfiprintf_r+0x196>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0c8      	beq.n	80049cc <_svfiprintf_r+0x124>
 8004a3a:	9105      	str	r1, [sp, #20]
 8004a3c:	e7c6      	b.n	80049cc <_svfiprintf_r+0x124>
 8004a3e:	fb05 2101 	mla	r1, r5, r1, r2
 8004a42:	2301      	movs	r3, #1
 8004a44:	4607      	mov	r7, r0
 8004a46:	e7f0      	b.n	8004a2a <_svfiprintf_r+0x182>
 8004a48:	ab03      	add	r3, sp, #12
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	4622      	mov	r2, r4
 8004a4e:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <_svfiprintf_r+0x1ec>)
 8004a50:	a904      	add	r1, sp, #16
 8004a52:	4640      	mov	r0, r8
 8004a54:	f3af 8000 	nop.w
 8004a58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a5c:	4681      	mov	r9, r0
 8004a5e:	d1d6      	bne.n	8004a0e <_svfiprintf_r+0x166>
 8004a60:	89a3      	ldrh	r3, [r4, #12]
 8004a62:	065b      	lsls	r3, r3, #25
 8004a64:	f53f af35 	bmi.w	80048d2 <_svfiprintf_r+0x2a>
 8004a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a6a:	b01d      	add	sp, #116	; 0x74
 8004a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a70:	ab03      	add	r3, sp, #12
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	4622      	mov	r2, r4
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <_svfiprintf_r+0x1ec>)
 8004a78:	a904      	add	r1, sp, #16
 8004a7a:	4640      	mov	r0, r8
 8004a7c:	f000 f882 	bl	8004b84 <_printf_i>
 8004a80:	e7ea      	b.n	8004a58 <_svfiprintf_r+0x1b0>
 8004a82:	bf00      	nop
 8004a84:	08005140 	.word	0x08005140
 8004a88:	08005146 	.word	0x08005146
 8004a8c:	0800514a 	.word	0x0800514a
 8004a90:	00000000 	.word	0x00000000
 8004a94:	080047f3 	.word	0x080047f3

08004a98 <_printf_common>:
 8004a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a9c:	4691      	mov	r9, r2
 8004a9e:	461f      	mov	r7, r3
 8004aa0:	688a      	ldr	r2, [r1, #8]
 8004aa2:	690b      	ldr	r3, [r1, #16]
 8004aa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	bfb8      	it	lt
 8004aac:	4613      	movlt	r3, r2
 8004aae:	f8c9 3000 	str.w	r3, [r9]
 8004ab2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ab6:	4606      	mov	r6, r0
 8004ab8:	460c      	mov	r4, r1
 8004aba:	b112      	cbz	r2, 8004ac2 <_printf_common+0x2a>
 8004abc:	3301      	adds	r3, #1
 8004abe:	f8c9 3000 	str.w	r3, [r9]
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	0699      	lsls	r1, r3, #26
 8004ac6:	bf42      	ittt	mi
 8004ac8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004acc:	3302      	addmi	r3, #2
 8004ace:	f8c9 3000 	strmi.w	r3, [r9]
 8004ad2:	6825      	ldr	r5, [r4, #0]
 8004ad4:	f015 0506 	ands.w	r5, r5, #6
 8004ad8:	d107      	bne.n	8004aea <_printf_common+0x52>
 8004ada:	f104 0a19 	add.w	sl, r4, #25
 8004ade:	68e3      	ldr	r3, [r4, #12]
 8004ae0:	f8d9 2000 	ldr.w	r2, [r9]
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	42ab      	cmp	r3, r5
 8004ae8:	dc28      	bgt.n	8004b3c <_printf_common+0xa4>
 8004aea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004aee:	6822      	ldr	r2, [r4, #0]
 8004af0:	3300      	adds	r3, #0
 8004af2:	bf18      	it	ne
 8004af4:	2301      	movne	r3, #1
 8004af6:	0692      	lsls	r2, r2, #26
 8004af8:	d42d      	bmi.n	8004b56 <_printf_common+0xbe>
 8004afa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004afe:	4639      	mov	r1, r7
 8004b00:	4630      	mov	r0, r6
 8004b02:	47c0      	blx	r8
 8004b04:	3001      	adds	r0, #1
 8004b06:	d020      	beq.n	8004b4a <_printf_common+0xb2>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	68e5      	ldr	r5, [r4, #12]
 8004b0c:	f8d9 2000 	ldr.w	r2, [r9]
 8004b10:	f003 0306 	and.w	r3, r3, #6
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	bf08      	it	eq
 8004b18:	1aad      	subeq	r5, r5, r2
 8004b1a:	68a3      	ldr	r3, [r4, #8]
 8004b1c:	6922      	ldr	r2, [r4, #16]
 8004b1e:	bf0c      	ite	eq
 8004b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b24:	2500      	movne	r5, #0
 8004b26:	4293      	cmp	r3, r2
 8004b28:	bfc4      	itt	gt
 8004b2a:	1a9b      	subgt	r3, r3, r2
 8004b2c:	18ed      	addgt	r5, r5, r3
 8004b2e:	f04f 0900 	mov.w	r9, #0
 8004b32:	341a      	adds	r4, #26
 8004b34:	454d      	cmp	r5, r9
 8004b36:	d11a      	bne.n	8004b6e <_printf_common+0xd6>
 8004b38:	2000      	movs	r0, #0
 8004b3a:	e008      	b.n	8004b4e <_printf_common+0xb6>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	4652      	mov	r2, sl
 8004b40:	4639      	mov	r1, r7
 8004b42:	4630      	mov	r0, r6
 8004b44:	47c0      	blx	r8
 8004b46:	3001      	adds	r0, #1
 8004b48:	d103      	bne.n	8004b52 <_printf_common+0xba>
 8004b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b52:	3501      	adds	r5, #1
 8004b54:	e7c3      	b.n	8004ade <_printf_common+0x46>
 8004b56:	18e1      	adds	r1, r4, r3
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	2030      	movs	r0, #48	; 0x30
 8004b5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b60:	4422      	add	r2, r4
 8004b62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b6a:	3302      	adds	r3, #2
 8004b6c:	e7c5      	b.n	8004afa <_printf_common+0x62>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	4622      	mov	r2, r4
 8004b72:	4639      	mov	r1, r7
 8004b74:	4630      	mov	r0, r6
 8004b76:	47c0      	blx	r8
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d0e6      	beq.n	8004b4a <_printf_common+0xb2>
 8004b7c:	f109 0901 	add.w	r9, r9, #1
 8004b80:	e7d8      	b.n	8004b34 <_printf_common+0x9c>
	...

08004b84 <_printf_i>:
 8004b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	7e09      	ldrb	r1, [r1, #24]
 8004b90:	b085      	sub	sp, #20
 8004b92:	296e      	cmp	r1, #110	; 0x6e
 8004b94:	4617      	mov	r7, r2
 8004b96:	4606      	mov	r6, r0
 8004b98:	4698      	mov	r8, r3
 8004b9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b9c:	f000 80b3 	beq.w	8004d06 <_printf_i+0x182>
 8004ba0:	d822      	bhi.n	8004be8 <_printf_i+0x64>
 8004ba2:	2963      	cmp	r1, #99	; 0x63
 8004ba4:	d036      	beq.n	8004c14 <_printf_i+0x90>
 8004ba6:	d80a      	bhi.n	8004bbe <_printf_i+0x3a>
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	f000 80b9 	beq.w	8004d20 <_printf_i+0x19c>
 8004bae:	2958      	cmp	r1, #88	; 0x58
 8004bb0:	f000 8083 	beq.w	8004cba <_printf_i+0x136>
 8004bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004bbc:	e032      	b.n	8004c24 <_printf_i+0xa0>
 8004bbe:	2964      	cmp	r1, #100	; 0x64
 8004bc0:	d001      	beq.n	8004bc6 <_printf_i+0x42>
 8004bc2:	2969      	cmp	r1, #105	; 0x69
 8004bc4:	d1f6      	bne.n	8004bb4 <_printf_i+0x30>
 8004bc6:	6820      	ldr	r0, [r4, #0]
 8004bc8:	6813      	ldr	r3, [r2, #0]
 8004bca:	0605      	lsls	r5, r0, #24
 8004bcc:	f103 0104 	add.w	r1, r3, #4
 8004bd0:	d52a      	bpl.n	8004c28 <_printf_i+0xa4>
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6011      	str	r1, [r2, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	da03      	bge.n	8004be2 <_printf_i+0x5e>
 8004bda:	222d      	movs	r2, #45	; 0x2d
 8004bdc:	425b      	negs	r3, r3
 8004bde:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004be2:	486f      	ldr	r0, [pc, #444]	; (8004da0 <_printf_i+0x21c>)
 8004be4:	220a      	movs	r2, #10
 8004be6:	e039      	b.n	8004c5c <_printf_i+0xd8>
 8004be8:	2973      	cmp	r1, #115	; 0x73
 8004bea:	f000 809d 	beq.w	8004d28 <_printf_i+0x1a4>
 8004bee:	d808      	bhi.n	8004c02 <_printf_i+0x7e>
 8004bf0:	296f      	cmp	r1, #111	; 0x6f
 8004bf2:	d020      	beq.n	8004c36 <_printf_i+0xb2>
 8004bf4:	2970      	cmp	r1, #112	; 0x70
 8004bf6:	d1dd      	bne.n	8004bb4 <_printf_i+0x30>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	f043 0320 	orr.w	r3, r3, #32
 8004bfe:	6023      	str	r3, [r4, #0]
 8004c00:	e003      	b.n	8004c0a <_printf_i+0x86>
 8004c02:	2975      	cmp	r1, #117	; 0x75
 8004c04:	d017      	beq.n	8004c36 <_printf_i+0xb2>
 8004c06:	2978      	cmp	r1, #120	; 0x78
 8004c08:	d1d4      	bne.n	8004bb4 <_printf_i+0x30>
 8004c0a:	2378      	movs	r3, #120	; 0x78
 8004c0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c10:	4864      	ldr	r0, [pc, #400]	; (8004da4 <_printf_i+0x220>)
 8004c12:	e055      	b.n	8004cc0 <_printf_i+0x13c>
 8004c14:	6813      	ldr	r3, [r2, #0]
 8004c16:	1d19      	adds	r1, r3, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6011      	str	r1, [r2, #0]
 8004c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c24:	2301      	movs	r3, #1
 8004c26:	e08c      	b.n	8004d42 <_printf_i+0x1be>
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6011      	str	r1, [r2, #0]
 8004c2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c30:	bf18      	it	ne
 8004c32:	b21b      	sxthne	r3, r3
 8004c34:	e7cf      	b.n	8004bd6 <_printf_i+0x52>
 8004c36:	6813      	ldr	r3, [r2, #0]
 8004c38:	6825      	ldr	r5, [r4, #0]
 8004c3a:	1d18      	adds	r0, r3, #4
 8004c3c:	6010      	str	r0, [r2, #0]
 8004c3e:	0628      	lsls	r0, r5, #24
 8004c40:	d501      	bpl.n	8004c46 <_printf_i+0xc2>
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	e002      	b.n	8004c4c <_printf_i+0xc8>
 8004c46:	0668      	lsls	r0, r5, #25
 8004c48:	d5fb      	bpl.n	8004c42 <_printf_i+0xbe>
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	4854      	ldr	r0, [pc, #336]	; (8004da0 <_printf_i+0x21c>)
 8004c4e:	296f      	cmp	r1, #111	; 0x6f
 8004c50:	bf14      	ite	ne
 8004c52:	220a      	movne	r2, #10
 8004c54:	2208      	moveq	r2, #8
 8004c56:	2100      	movs	r1, #0
 8004c58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c5c:	6865      	ldr	r5, [r4, #4]
 8004c5e:	60a5      	str	r5, [r4, #8]
 8004c60:	2d00      	cmp	r5, #0
 8004c62:	f2c0 8095 	blt.w	8004d90 <_printf_i+0x20c>
 8004c66:	6821      	ldr	r1, [r4, #0]
 8004c68:	f021 0104 	bic.w	r1, r1, #4
 8004c6c:	6021      	str	r1, [r4, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d13d      	bne.n	8004cee <_printf_i+0x16a>
 8004c72:	2d00      	cmp	r5, #0
 8004c74:	f040 808e 	bne.w	8004d94 <_printf_i+0x210>
 8004c78:	4665      	mov	r5, ip
 8004c7a:	2a08      	cmp	r2, #8
 8004c7c:	d10b      	bne.n	8004c96 <_printf_i+0x112>
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	07db      	lsls	r3, r3, #31
 8004c82:	d508      	bpl.n	8004c96 <_printf_i+0x112>
 8004c84:	6923      	ldr	r3, [r4, #16]
 8004c86:	6862      	ldr	r2, [r4, #4]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	bfde      	ittt	le
 8004c8c:	2330      	movle	r3, #48	; 0x30
 8004c8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c96:	ebac 0305 	sub.w	r3, ip, r5
 8004c9a:	6123      	str	r3, [r4, #16]
 8004c9c:	f8cd 8000 	str.w	r8, [sp]
 8004ca0:	463b      	mov	r3, r7
 8004ca2:	aa03      	add	r2, sp, #12
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	f7ff fef6 	bl	8004a98 <_printf_common>
 8004cac:	3001      	adds	r0, #1
 8004cae:	d14d      	bne.n	8004d4c <_printf_i+0x1c8>
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	b005      	add	sp, #20
 8004cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cba:	4839      	ldr	r0, [pc, #228]	; (8004da0 <_printf_i+0x21c>)
 8004cbc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004cc0:	6813      	ldr	r3, [r2, #0]
 8004cc2:	6821      	ldr	r1, [r4, #0]
 8004cc4:	1d1d      	adds	r5, r3, #4
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6015      	str	r5, [r2, #0]
 8004cca:	060a      	lsls	r2, r1, #24
 8004ccc:	d50b      	bpl.n	8004ce6 <_printf_i+0x162>
 8004cce:	07ca      	lsls	r2, r1, #31
 8004cd0:	bf44      	itt	mi
 8004cd2:	f041 0120 	orrmi.w	r1, r1, #32
 8004cd6:	6021      	strmi	r1, [r4, #0]
 8004cd8:	b91b      	cbnz	r3, 8004ce2 <_printf_i+0x15e>
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	f022 0220 	bic.w	r2, r2, #32
 8004ce0:	6022      	str	r2, [r4, #0]
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	e7b7      	b.n	8004c56 <_printf_i+0xd2>
 8004ce6:	064d      	lsls	r5, r1, #25
 8004ce8:	bf48      	it	mi
 8004cea:	b29b      	uxthmi	r3, r3
 8004cec:	e7ef      	b.n	8004cce <_printf_i+0x14a>
 8004cee:	4665      	mov	r5, ip
 8004cf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cf4:	fb02 3311 	mls	r3, r2, r1, r3
 8004cf8:	5cc3      	ldrb	r3, [r0, r3]
 8004cfa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004cfe:	460b      	mov	r3, r1
 8004d00:	2900      	cmp	r1, #0
 8004d02:	d1f5      	bne.n	8004cf0 <_printf_i+0x16c>
 8004d04:	e7b9      	b.n	8004c7a <_printf_i+0xf6>
 8004d06:	6813      	ldr	r3, [r2, #0]
 8004d08:	6825      	ldr	r5, [r4, #0]
 8004d0a:	6961      	ldr	r1, [r4, #20]
 8004d0c:	1d18      	adds	r0, r3, #4
 8004d0e:	6010      	str	r0, [r2, #0]
 8004d10:	0628      	lsls	r0, r5, #24
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	d501      	bpl.n	8004d1a <_printf_i+0x196>
 8004d16:	6019      	str	r1, [r3, #0]
 8004d18:	e002      	b.n	8004d20 <_printf_i+0x19c>
 8004d1a:	066a      	lsls	r2, r5, #25
 8004d1c:	d5fb      	bpl.n	8004d16 <_printf_i+0x192>
 8004d1e:	8019      	strh	r1, [r3, #0]
 8004d20:	2300      	movs	r3, #0
 8004d22:	6123      	str	r3, [r4, #16]
 8004d24:	4665      	mov	r5, ip
 8004d26:	e7b9      	b.n	8004c9c <_printf_i+0x118>
 8004d28:	6813      	ldr	r3, [r2, #0]
 8004d2a:	1d19      	adds	r1, r3, #4
 8004d2c:	6011      	str	r1, [r2, #0]
 8004d2e:	681d      	ldr	r5, [r3, #0]
 8004d30:	6862      	ldr	r2, [r4, #4]
 8004d32:	2100      	movs	r1, #0
 8004d34:	4628      	mov	r0, r5
 8004d36:	f7fb fa5b 	bl	80001f0 <memchr>
 8004d3a:	b108      	cbz	r0, 8004d40 <_printf_i+0x1bc>
 8004d3c:	1b40      	subs	r0, r0, r5
 8004d3e:	6060      	str	r0, [r4, #4]
 8004d40:	6863      	ldr	r3, [r4, #4]
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	2300      	movs	r3, #0
 8004d46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d4a:	e7a7      	b.n	8004c9c <_printf_i+0x118>
 8004d4c:	6923      	ldr	r3, [r4, #16]
 8004d4e:	462a      	mov	r2, r5
 8004d50:	4639      	mov	r1, r7
 8004d52:	4630      	mov	r0, r6
 8004d54:	47c0      	blx	r8
 8004d56:	3001      	adds	r0, #1
 8004d58:	d0aa      	beq.n	8004cb0 <_printf_i+0x12c>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	079b      	lsls	r3, r3, #30
 8004d5e:	d413      	bmi.n	8004d88 <_printf_i+0x204>
 8004d60:	68e0      	ldr	r0, [r4, #12]
 8004d62:	9b03      	ldr	r3, [sp, #12]
 8004d64:	4298      	cmp	r0, r3
 8004d66:	bfb8      	it	lt
 8004d68:	4618      	movlt	r0, r3
 8004d6a:	e7a3      	b.n	8004cb4 <_printf_i+0x130>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	464a      	mov	r2, r9
 8004d70:	4639      	mov	r1, r7
 8004d72:	4630      	mov	r0, r6
 8004d74:	47c0      	blx	r8
 8004d76:	3001      	adds	r0, #1
 8004d78:	d09a      	beq.n	8004cb0 <_printf_i+0x12c>
 8004d7a:	3501      	adds	r5, #1
 8004d7c:	68e3      	ldr	r3, [r4, #12]
 8004d7e:	9a03      	ldr	r2, [sp, #12]
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	42ab      	cmp	r3, r5
 8004d84:	dcf2      	bgt.n	8004d6c <_printf_i+0x1e8>
 8004d86:	e7eb      	b.n	8004d60 <_printf_i+0x1dc>
 8004d88:	2500      	movs	r5, #0
 8004d8a:	f104 0919 	add.w	r9, r4, #25
 8004d8e:	e7f5      	b.n	8004d7c <_printf_i+0x1f8>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1ac      	bne.n	8004cee <_printf_i+0x16a>
 8004d94:	7803      	ldrb	r3, [r0, #0]
 8004d96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d9e:	e76c      	b.n	8004c7a <_printf_i+0xf6>
 8004da0:	08005151 	.word	0x08005151
 8004da4:	08005162 	.word	0x08005162

08004da8 <memcpy>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	1e43      	subs	r3, r0, #1
 8004dac:	440a      	add	r2, r1
 8004dae:	4291      	cmp	r1, r2
 8004db0:	d100      	bne.n	8004db4 <memcpy+0xc>
 8004db2:	bd10      	pop	{r4, pc}
 8004db4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004db8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dbc:	e7f7      	b.n	8004dae <memcpy+0x6>

08004dbe <memmove>:
 8004dbe:	4288      	cmp	r0, r1
 8004dc0:	b510      	push	{r4, lr}
 8004dc2:	eb01 0302 	add.w	r3, r1, r2
 8004dc6:	d807      	bhi.n	8004dd8 <memmove+0x1a>
 8004dc8:	1e42      	subs	r2, r0, #1
 8004dca:	4299      	cmp	r1, r3
 8004dcc:	d00a      	beq.n	8004de4 <memmove+0x26>
 8004dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dd2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004dd6:	e7f8      	b.n	8004dca <memmove+0xc>
 8004dd8:	4283      	cmp	r3, r0
 8004dda:	d9f5      	bls.n	8004dc8 <memmove+0xa>
 8004ddc:	1881      	adds	r1, r0, r2
 8004dde:	1ad2      	subs	r2, r2, r3
 8004de0:	42d3      	cmn	r3, r2
 8004de2:	d100      	bne.n	8004de6 <memmove+0x28>
 8004de4:	bd10      	pop	{r4, pc}
 8004de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004dee:	e7f7      	b.n	8004de0 <memmove+0x22>

08004df0 <_free_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4605      	mov	r5, r0
 8004df4:	2900      	cmp	r1, #0
 8004df6:	d045      	beq.n	8004e84 <_free_r+0x94>
 8004df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dfc:	1f0c      	subs	r4, r1, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	bfb8      	it	lt
 8004e02:	18e4      	addlt	r4, r4, r3
 8004e04:	f000 f8d2 	bl	8004fac <__malloc_lock>
 8004e08:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <_free_r+0x98>)
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	b933      	cbnz	r3, 8004e1e <_free_r+0x2e>
 8004e10:	6063      	str	r3, [r4, #4]
 8004e12:	6014      	str	r4, [r2, #0]
 8004e14:	4628      	mov	r0, r5
 8004e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e1a:	f000 b8c8 	b.w	8004fae <__malloc_unlock>
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	d90c      	bls.n	8004e3c <_free_r+0x4c>
 8004e22:	6821      	ldr	r1, [r4, #0]
 8004e24:	1862      	adds	r2, r4, r1
 8004e26:	4293      	cmp	r3, r2
 8004e28:	bf04      	itt	eq
 8004e2a:	681a      	ldreq	r2, [r3, #0]
 8004e2c:	685b      	ldreq	r3, [r3, #4]
 8004e2e:	6063      	str	r3, [r4, #4]
 8004e30:	bf04      	itt	eq
 8004e32:	1852      	addeq	r2, r2, r1
 8004e34:	6022      	streq	r2, [r4, #0]
 8004e36:	6004      	str	r4, [r0, #0]
 8004e38:	e7ec      	b.n	8004e14 <_free_r+0x24>
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	b10a      	cbz	r2, 8004e44 <_free_r+0x54>
 8004e40:	42a2      	cmp	r2, r4
 8004e42:	d9fa      	bls.n	8004e3a <_free_r+0x4a>
 8004e44:	6819      	ldr	r1, [r3, #0]
 8004e46:	1858      	adds	r0, r3, r1
 8004e48:	42a0      	cmp	r0, r4
 8004e4a:	d10b      	bne.n	8004e64 <_free_r+0x74>
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	4401      	add	r1, r0
 8004e50:	1858      	adds	r0, r3, r1
 8004e52:	4282      	cmp	r2, r0
 8004e54:	6019      	str	r1, [r3, #0]
 8004e56:	d1dd      	bne.n	8004e14 <_free_r+0x24>
 8004e58:	6810      	ldr	r0, [r2, #0]
 8004e5a:	6852      	ldr	r2, [r2, #4]
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	4401      	add	r1, r0
 8004e60:	6019      	str	r1, [r3, #0]
 8004e62:	e7d7      	b.n	8004e14 <_free_r+0x24>
 8004e64:	d902      	bls.n	8004e6c <_free_r+0x7c>
 8004e66:	230c      	movs	r3, #12
 8004e68:	602b      	str	r3, [r5, #0]
 8004e6a:	e7d3      	b.n	8004e14 <_free_r+0x24>
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	1821      	adds	r1, r4, r0
 8004e70:	428a      	cmp	r2, r1
 8004e72:	bf04      	itt	eq
 8004e74:	6811      	ldreq	r1, [r2, #0]
 8004e76:	6852      	ldreq	r2, [r2, #4]
 8004e78:	6062      	str	r2, [r4, #4]
 8004e7a:	bf04      	itt	eq
 8004e7c:	1809      	addeq	r1, r1, r0
 8004e7e:	6021      	streq	r1, [r4, #0]
 8004e80:	605c      	str	r4, [r3, #4]
 8004e82:	e7c7      	b.n	8004e14 <_free_r+0x24>
 8004e84:	bd38      	pop	{r3, r4, r5, pc}
 8004e86:	bf00      	nop
 8004e88:	20000094 	.word	0x20000094

08004e8c <_malloc_r>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	1ccd      	adds	r5, r1, #3
 8004e90:	f025 0503 	bic.w	r5, r5, #3
 8004e94:	3508      	adds	r5, #8
 8004e96:	2d0c      	cmp	r5, #12
 8004e98:	bf38      	it	cc
 8004e9a:	250c      	movcc	r5, #12
 8004e9c:	2d00      	cmp	r5, #0
 8004e9e:	4606      	mov	r6, r0
 8004ea0:	db01      	blt.n	8004ea6 <_malloc_r+0x1a>
 8004ea2:	42a9      	cmp	r1, r5
 8004ea4:	d903      	bls.n	8004eae <_malloc_r+0x22>
 8004ea6:	230c      	movs	r3, #12
 8004ea8:	6033      	str	r3, [r6, #0]
 8004eaa:	2000      	movs	r0, #0
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
 8004eae:	f000 f87d 	bl	8004fac <__malloc_lock>
 8004eb2:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <_malloc_r+0xac>)
 8004eb4:	6814      	ldr	r4, [r2, #0]
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	b991      	cbnz	r1, 8004ee0 <_malloc_r+0x54>
 8004eba:	4c20      	ldr	r4, [pc, #128]	; (8004f3c <_malloc_r+0xb0>)
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	b91b      	cbnz	r3, 8004ec8 <_malloc_r+0x3c>
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	f000 f863 	bl	8004f8c <_sbrk_r>
 8004ec6:	6020      	str	r0, [r4, #0]
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f000 f85e 	bl	8004f8c <_sbrk_r>
 8004ed0:	1c43      	adds	r3, r0, #1
 8004ed2:	d124      	bne.n	8004f1e <_malloc_r+0x92>
 8004ed4:	230c      	movs	r3, #12
 8004ed6:	6033      	str	r3, [r6, #0]
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f000 f868 	bl	8004fae <__malloc_unlock>
 8004ede:	e7e4      	b.n	8004eaa <_malloc_r+0x1e>
 8004ee0:	680b      	ldr	r3, [r1, #0]
 8004ee2:	1b5b      	subs	r3, r3, r5
 8004ee4:	d418      	bmi.n	8004f18 <_malloc_r+0x8c>
 8004ee6:	2b0b      	cmp	r3, #11
 8004ee8:	d90f      	bls.n	8004f0a <_malloc_r+0x7e>
 8004eea:	600b      	str	r3, [r1, #0]
 8004eec:	50cd      	str	r5, [r1, r3]
 8004eee:	18cc      	adds	r4, r1, r3
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	f000 f85c 	bl	8004fae <__malloc_unlock>
 8004ef6:	f104 000b 	add.w	r0, r4, #11
 8004efa:	1d23      	adds	r3, r4, #4
 8004efc:	f020 0007 	bic.w	r0, r0, #7
 8004f00:	1ac3      	subs	r3, r0, r3
 8004f02:	d0d3      	beq.n	8004eac <_malloc_r+0x20>
 8004f04:	425a      	negs	r2, r3
 8004f06:	50e2      	str	r2, [r4, r3]
 8004f08:	e7d0      	b.n	8004eac <_malloc_r+0x20>
 8004f0a:	428c      	cmp	r4, r1
 8004f0c:	684b      	ldr	r3, [r1, #4]
 8004f0e:	bf16      	itet	ne
 8004f10:	6063      	strne	r3, [r4, #4]
 8004f12:	6013      	streq	r3, [r2, #0]
 8004f14:	460c      	movne	r4, r1
 8004f16:	e7eb      	b.n	8004ef0 <_malloc_r+0x64>
 8004f18:	460c      	mov	r4, r1
 8004f1a:	6849      	ldr	r1, [r1, #4]
 8004f1c:	e7cc      	b.n	8004eb8 <_malloc_r+0x2c>
 8004f1e:	1cc4      	adds	r4, r0, #3
 8004f20:	f024 0403 	bic.w	r4, r4, #3
 8004f24:	42a0      	cmp	r0, r4
 8004f26:	d005      	beq.n	8004f34 <_malloc_r+0xa8>
 8004f28:	1a21      	subs	r1, r4, r0
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	f000 f82e 	bl	8004f8c <_sbrk_r>
 8004f30:	3001      	adds	r0, #1
 8004f32:	d0cf      	beq.n	8004ed4 <_malloc_r+0x48>
 8004f34:	6025      	str	r5, [r4, #0]
 8004f36:	e7db      	b.n	8004ef0 <_malloc_r+0x64>
 8004f38:	20000094 	.word	0x20000094
 8004f3c:	20000098 	.word	0x20000098

08004f40 <_realloc_r>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	4607      	mov	r7, r0
 8004f44:	4614      	mov	r4, r2
 8004f46:	460e      	mov	r6, r1
 8004f48:	b921      	cbnz	r1, 8004f54 <_realloc_r+0x14>
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f50:	f7ff bf9c 	b.w	8004e8c <_malloc_r>
 8004f54:	b922      	cbnz	r2, 8004f60 <_realloc_r+0x20>
 8004f56:	f7ff ff4b 	bl	8004df0 <_free_r>
 8004f5a:	4625      	mov	r5, r4
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f60:	f000 f826 	bl	8004fb0 <_malloc_usable_size_r>
 8004f64:	42a0      	cmp	r0, r4
 8004f66:	d20f      	bcs.n	8004f88 <_realloc_r+0x48>
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	f7ff ff8e 	bl	8004e8c <_malloc_r>
 8004f70:	4605      	mov	r5, r0
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d0f2      	beq.n	8004f5c <_realloc_r+0x1c>
 8004f76:	4631      	mov	r1, r6
 8004f78:	4622      	mov	r2, r4
 8004f7a:	f7ff ff15 	bl	8004da8 <memcpy>
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4638      	mov	r0, r7
 8004f82:	f7ff ff35 	bl	8004df0 <_free_r>
 8004f86:	e7e9      	b.n	8004f5c <_realloc_r+0x1c>
 8004f88:	4635      	mov	r5, r6
 8004f8a:	e7e7      	b.n	8004f5c <_realloc_r+0x1c>

08004f8c <_sbrk_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4c06      	ldr	r4, [pc, #24]	; (8004fa8 <_sbrk_r+0x1c>)
 8004f90:	2300      	movs	r3, #0
 8004f92:	4605      	mov	r5, r0
 8004f94:	4608      	mov	r0, r1
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	f7fc fe04 	bl	8001ba4 <_sbrk>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d102      	bne.n	8004fa6 <_sbrk_r+0x1a>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	b103      	cbz	r3, 8004fa6 <_sbrk_r+0x1a>
 8004fa4:	602b      	str	r3, [r5, #0]
 8004fa6:	bd38      	pop	{r3, r4, r5, pc}
 8004fa8:	200001cc 	.word	0x200001cc

08004fac <__malloc_lock>:
 8004fac:	4770      	bx	lr

08004fae <__malloc_unlock>:
 8004fae:	4770      	bx	lr

08004fb0 <_malloc_usable_size_r>:
 8004fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fb4:	1f18      	subs	r0, r3, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bfbc      	itt	lt
 8004fba:	580b      	ldrlt	r3, [r1, r0]
 8004fbc:	18c0      	addlt	r0, r0, r3
 8004fbe:	4770      	bx	lr

08004fc0 <_init>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	bf00      	nop
 8004fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc6:	bc08      	pop	{r3}
 8004fc8:	469e      	mov	lr, r3
 8004fca:	4770      	bx	lr

08004fcc <_fini>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	bf00      	nop
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr
